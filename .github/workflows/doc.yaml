name: Extract PowerQuery Functions Schema
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 1 */1 *'  # Run monthly on the 1st day of each month
  push:
    branches: [ main ]
    paths:
      - 'process/dox.pbix'
      - '.github/scripts/generate-doc-output.ps1'
      - '.github/workflows/doc.yaml'
    paths-ignore:
      - 'pq_functions_schema/**'  # Don't trigger on schema updates

jobs:
  setup-and-process:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup environment dependencies
        run: |
          # Install Power BI Desktop via chocolatey (MSI version)
          Write-Host "üì¶ Installing Power BI Desktop..."
          choco install --ignore-checksums powerbi
          
          # Wait for installation to complete
          Start-Sleep -Seconds 30
          
          # Verify Power BI Desktop installation
          $pbiMsiPath = "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe"
          if (Test-Path $pbiMsiPath) {
            Write-Host "‚úÖ Power BI Desktop MSI version installed at: $pbiMsiPath"
          } else {
            Write-Host "‚ö†Ô∏è MSI version not found, checking for other installations..."
            
            # Check for Store version
            $storeApps = Get-AppxPackage | Where-Object {$_.Name -like "*PowerBI*"}
            if ($storeApps) {
              Write-Host "‚úÖ Found Power BI Desktop Store version: $($storeApps.Name)"
            } else {
              Write-Error "‚ùå No Power BI Desktop installation found"
              exit 1
            }
          }
          
          # Install SqlServer PowerShell module
          Write-Host "üì¶ Installing SqlServer PowerShell module..."
          Install-Module -Name SqlServer -Force -Scope AllUsers -AllowClobber
          
          # Import the module to verify installation
          Import-Module SqlServer
          
          # Verify Invoke-ASCmd is available
          Get-Command Invoke-ASCmd

      - name: Verify environment prerequisites
        run: |
          Write-Host "üîç Verifying environment setup..."
          
          # Check if SqlServer module is loaded
          if (Get-Module -Name SqlServer) {
            Write-Host "‚úÖ SqlServer module is loaded"
          } else {
            Write-Error "‚ùå SqlServer module not loaded"
            exit 1
          }
          
          # Check if Invoke-ASCmd is available
          if (Get-Command Invoke-ASCmd -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Invoke-ASCmd command is available"
          } else {
            Write-Error "‚ùå Invoke-ASCmd command not found"
            exit 1
          }
          
          # Check if dox.pbix exists
          $pbixPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "process\dox.pbix"
          if (Test-Path $pbixPath) {
            Write-Host "‚úÖ Found dox.pbix file at: $pbixPath"
          } else {
            Write-Error "‚ùå dox.pbix file not found at: $pbixPath"
            exit 1
          }
          
          # Check if extraction script exists
          $scriptPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath ".github\scripts\generate-doc-output.ps1"
          if (Test-Path $scriptPath) {
            Write-Host "‚úÖ Found extraction script at: $scriptPath"
          } else {
            Write-Error "‚ùå Extraction script not found at: $scriptPath"
            exit 1
          }
          
          # Check Power BI Desktop installation and determine path
          $pbiMsiPath = "C:\Program Files\Microsoft Power BI Desktop\bin\PBIDesktop.exe"
          $pbiStorePath = "shell:AppsFolder\Microsoft.MicrosoftPowerBIDesktop_8wekyb3d8bbwe!Microsoft.MicrosoftPowerBIDesktop"
          
          if (Test-Path $pbiMsiPath) {
            Write-Host "‚úÖ Power BI Desktop MSI version available"
            $env:PBI_DESKTOP_PATH = $pbiMsiPath
            $env:PBI_DESKTOP_TYPE = "MSI"
          } else {
            # Check for Store version
            $storeApps = Get-AppxPackage | Where-Object {$_.Name -like "*PowerBI*"}
            if ($storeApps) {
              Write-Host "‚úÖ Power BI Desktop Store version available"
              $env:PBI_DESKTOP_PATH = $pbiStorePath
              $env:PBI_DESKTOP_TYPE = "STORE"
            } else {
              Write-Error "‚ùå No Power BI Desktop installation found"
              exit 1
            }
          }
          
          Write-Host "üéâ All prerequisites verified successfully!"
          Write-Host "üìç Using Power BI Desktop: $($env:PBI_DESKTOP_TYPE) at $($env:PBI_DESKTOP_PATH)"

      - name: Extract PowerQuery functions schema
        run: |
          # Import SqlServer module at start of extraction
          Import-Module SqlServer -Force
          
          # Set English locale
          $env:PQ_UICultureOverride = "en"
          Write-Host "Set locale to English (en)"

          # Start Power BI Desktop with the dox.pbix file
          $pbixPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "process\dox.pbix"
          Write-Host "üöÄ Starting Power BI Desktop ($($env:PBI_DESKTOP_TYPE)) with file: $pbixPath"
          
          try {
            if ($env:PBI_DESKTOP_TYPE -eq "MSI") {
              # Launch MSI version directly
              $process = Start-Process -FilePath $env:PBI_DESKTOP_PATH -ArgumentList "`"$pbixPath`"" -PassThru
              Write-Host "‚úÖ Power BI Desktop MSI launched with PID: $($process.Id)"
            } elseif ($env:PBI_DESKTOP_TYPE -eq "STORE") {
              # Launch Store version
              $process = Start-Process -FilePath $env:PBI_DESKTOP_PATH -ArgumentList "`"$pbixPath`"" -PassThru
              Write-Host "‚úÖ Power BI Desktop Store version launched with PID: $($process.Id)"
            } else {
              Write-Error "‚ùå Unknown Power BI Desktop type: $($env:PBI_DESKTOP_TYPE)"
              exit 1
            }
          } catch {
            Write-Error "‚ùå Failed to launch Power BI Desktop: $_"
            exit 1
          }
          
          # Wait for Power BI Desktop to fully load
          Start-Sleep -Seconds 60
          Write-Host "‚è≥ Waiting for Power BI Desktop to fully initialize..."
          
          # Verify Power BI Desktop is running
          $pbiProcess = Get-Process -Name "PBIDesktop" -ErrorAction SilentlyContinue
          if ($pbiProcess) {
            Write-Host "‚úÖ Power BI Desktop is running (PID: $($pbiProcess.Id))"
          } else {
            Write-Error "‚ùå Power BI Desktop process not found - it may have failed to start"
            exit 1
          }

          # Get the msmdsrv.exe port with retry logic
          $maxAttempts = 5
          $attempt = 0
          $msmdsrvPorts = $null
          
          do {
            $attempt++
            Write-Host "Attempt $attempt to find Analysis Services port..."
            $msmdsrvPorts = Get-Process -Name msmdsrv -ErrorAction SilentlyContinue | ForEach-Object {
              Get-NetTCPConnection -OwningProcess $_.Id -ErrorAction SilentlyContinue | Select-Object LocalPort -Unique
            }
            if (-not $msmdsrvPorts) {
              Start-Sleep -Seconds 10
            }
          } while (-not $msmdsrvPorts -and $attempt -lt $maxAttempts)
          
          if ($msmdsrvPorts) {
            # Extract PowerQuery functions schema
            $port = $msmdsrvPorts[0].LocalPort
            Write-Host "Found Analysis Services on port: $port"
            
            # Ensure output directory exists
            $outputDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pq_functions_schema"
            if (-not (Test-Path $outputDir)) {
              New-Item -ItemType Directory -Path $outputDir -Force
            }
            
            $outputJsonFile = Join-Path -Path $outputDir -ChildPath "pq_functions_schema.json"
            Write-Host "Extracting to: $outputJsonFile"
            
            # Run extraction script with error handling
            try {
              pwsh -File ./.github/scripts/generate-doc-output.ps1 -port $port -outputJsonFile $outputJsonFile
              
              # Verify output file was created
              if (Test-Path $outputJsonFile) {
                $fileSize = (Get-Item $outputJsonFile).Length
                Write-Host "‚úÖ Schema extraction successful! File size: $fileSize bytes"
              } else {
                Write-Error "‚ùå Output file was not created"
                exit 1
              }
            } catch {
              Write-Error "‚ùå Extraction script failed: $_"
              exit 1
            }
          } else {
            Write-Error "‚ùå No Analysis Services process found after $maxAttempts attempts"
            exit 1
          }
          
          # Close Power BI Desktop properly
          Write-Host "üßπ Cleaning up Power BI Desktop processes..."
          $pbiProcesses = Get-Process -Name "PBIDesktop" -ErrorAction SilentlyContinue
          if ($pbiProcesses) {
            $pbiProcesses | ForEach-Object {
              Write-Host "Stopping Power BI Desktop process (PID: $($_.Id))"
              Stop-Process -Id $_.Id -Force -ErrorAction SilentlyContinue
            }
            Start-Sleep -Seconds 5
            
            # Verify cleanup
            $remainingProcesses = Get-Process -Name "PBIDesktop" -ErrorAction SilentlyContinue
            if ($remainingProcesses) {
              Write-Host "‚ö†Ô∏è Some Power BI Desktop processes still running"
            } else {
              Write-Host "‚úÖ All Power BI Desktop processes stopped"
            }
          } else {
            Write-Host "‚ÑπÔ∏è No Power BI Desktop processes found to clean up"
          }
          
          Write-Host "üéâ PowerQuery functions schema extraction completed successfully!"
      - name: Handle changes based on trigger type
        run: |
          # Determine trigger type
          $triggerType = "${{ github.event_name }}"
          Write-Host "üîç Workflow triggered by: $triggerType"
          
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check for changes using PowerShell
          $gitStatus = git status --porcelain pq_functions_schema/
          if ([string]::IsNullOrEmpty($gitStatus)) {
            Write-Host "üìù No changes detected in PowerQuery functions schema"
          } else {
            Write-Host "üìù Changes detected in PowerQuery functions schema"
            
            if ($triggerType -eq "schedule") {
              # Auto-commit for scheduled runs (monthly updates)
              Write-Host "ü§ñ Auto-committing scheduled schema update..."
              git add pq_functions_schema/
              $commitDate = Get-Date -Format 'yyyy-MM-dd'
              git commit -m "üîÑ Auto-update PowerQuery functions schema - $commitDate [skip ci]"
              git push origin HEAD
              Write-Host "‚úÖ Scheduled update committed and pushed to main branch!"
              
            } elseif ($triggerType -eq "push") {
              # For push-triggered runs, create a PR instead of direct commit
              Write-Host "üìã Creating pull request for push-triggered schema update..."
              git add pq_functions_schema/
              $commitDate = Get-Date -Format 'yyyy-MM-dd'
              $branchName = "schema-update-$commitDate"
              git checkout -b $branchName
              git commit -m "üîÑ Update PowerQuery functions schema - $commitDate"
              git push origin $branchName
              Write-Host "‚úÖ Changes pushed to branch: $branchName"
              Write-Host "üëâ Please create a PR to merge these changes"
              
            } elseif ($triggerType -eq "workflow_dispatch") {
              # For manual runs, ask user what to do
              Write-Host "üîß Manual run detected - creating update branch..."
              git add pq_functions_schema/
              $commitDate = Get-Date -Format 'yyyy-MM-dd'
              $branchName = "manual-schema-update-$commitDate"
              git checkout -b $branchName
              git commit -m "üîÑ Manual PowerQuery functions schema update - $commitDate"
              git push origin $branchName
              Write-Host "‚úÖ Changes pushed to branch: $branchName"
              Write-Host "üëâ Please review and create a PR to merge these changes"
              
            } else {
              Write-Host "‚ùì Unknown trigger type: $triggerType"
              Write-Host "üìÅ Changes are available but not committed"
            }
          }

