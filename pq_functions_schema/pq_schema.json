[
  {
    "name": "Access.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a structural representation of an Access database.",
      "longDescription": "Returns a structural representation of an Access database, <code>database</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] for example.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "database",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AnalysisServices.Databases",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the Analysis Services databases on a particular host.",
      "longDescription": "Returns databases on an Analysis Services instance, <code>server</code>.  An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : A logical value indicating if the types specified in the multidimensional or tabular model will be used for the types of the added measure columns. When set to false, the type &quot;number&quot; will be used for all measure columns. The default value for this option is false.</li>\r\n<li><code>Culture</code> : A culture name specifying the culture for the data. This corresponds to the &#39;Locale Identifier&#39; connection string property.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>SubQueries</code> : A number (0, 1 or 2) that sets the value of the &quot;SubQueries&quot; property in the connection string. This controls the behavior of calculated members on subselects or subcubes. (The default value is 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AzureStorage.BlobContents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the content of the specified blob from an Azure storage vault.",
      "longDescription": "Returns the content of the blob at the URL, <code>url</code>, from an Azure storage vault. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>BlockSize</code> : The number of bytes to read before waiting on the data consumer. The default value is 4 MB.</li>\r\n<li><code>RequestSize</code> : The number of bytes to try to read in a single HTTP request to the server. The default value is 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : The ConcurrentRequests option supports faster download of data by specifying the number of requests to be made in parallel, at the cost of memory utilization. The memory required is (ConcurrentRequest * RequestSize). The default value is 16.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "AzureStorage.Blobs",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a navigational table containing the containers found in the specified account from an Azure storage vault.",
      "longDescription": "Returns a navigational table containing a row for each container found at the account URL, <code>account</code>, from an Azure storage vault. Each row contains a link to the container blobs. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>BlockSize</code> : The number of bytes to read before waiting on the data consumer. The default value is 4 MB.</li>\r\n<li><code>RequestSize</code> : The number of bytes to try to read in a single HTTP request to the server. The default value is 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : The ConcurrentRequests option supports faster download of data by specifying the number of requests to be made in parallel, at the cost of memory utilization. The memory required is (ConcurrentRequest * RequestSize). The default value is 16.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "account",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter account"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AzureStorage.DataLake",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a navigational table containing the documents found in the specified container and its subfolders from Azure Data Lake Storage.",
      "longDescription": "Returns a navigational table containing the documents found in the specified container and its subfolders at the account URL, <code>endpoint</code>, from an Azure Data Lake Storage filesystem. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>BlockSize</code> : The number of bytes to read before waiting on the data consumer. The default value is 4 MB.</li>\r\n<li><code>RequestSize</code> : The number of bytes to try to read in a single HTTP request to the server. The default value is 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : The ConcurrentRequests option supports faster download of data by specifying the number of requests to be made in parallel, at the cost of memory utilization. The memory required is (ConcurrentRequest * RequestSize). The default value is 16.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that controls whether the files are returned in a tree-like directory view or in a flat list. The default value is false.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "endpoint",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter endpoint"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AzureStorage.DataLakeContents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the content of the specified file from an Azure Data Lake Storage filesystem.",
      "longDescription": "Returns the content of the file at the URL, <code>url</code>, from an Azure Data Lake Storage filesystem. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>BlockSize</code> : The number of bytes to read before waiting on the data consumer. The default value is 4 MB.</li>\r\n<li><code>RequestSize</code> : The number of bytes to try to read in a single HTTP request to the server. The default value is 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : The ConcurrentRequests option supports faster download of data by specifying the number of requests to be made in parallel, at the cost of memory utilization. The memory required is (ConcurrentRequest * RequestSize). The default value is 16.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "AzureStorage.Tables",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a navigational table containing the tables found in the specified account from an Azure storage vault.",
      "longDescription": "Returns a navigational table containing a row for each table found at the account URL, <code>account</code>, from an Azure storage vault. Each row contains a link to the azure table. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields :\r\n    <ul>\r\n<li><code>Timeout</code> : A duration that controls how long to wait before abandoning the request to the server. The default value is source-specific.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "account",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter account"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Binary.ApproximateLength",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the approximate length of the binary.",
      "longDescription": "Returns the approximate length of <code>binary</code>, or an error if the data source doesn't support an approximate length.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Binary.Buffer",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Buffers the binary value in memory.",
      "longDescription": "Buffers the binary value in memory.  The result of this call is a stable binary value, which means it will have a deterministic length and order of bytes.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Combines a list of binaries into a single binary.",
      "longDescription": "Combines a list of binaries into a single binary.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binaries",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaries"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a binary from the given value",
      "longDescription": "Returns a <code>binary</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Binary.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>binary</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>binary</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>binary</code> value from the text representation. Refer to <code>Binary.FromText</code> for details.</li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "encoding",
        "type": "BinaryEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.FromList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a list of numbers into a binary value.",
      "longDescription": "Converts a list of numbers into a binary value.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Decodes data from a text form into binary.",
      "longDescription": "Returns the result of converting text value <code>text</code> to a binary (list of <code>number</code>). <code>encoding</code> may be specified to indicate the encoding used in the text value.\r\n      The following <code>BinaryEncoding</code> values may be used for <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 encoding</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Hex encoding</li>\r\n      </ul>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "encoding",
        "type": "BinaryEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.InferContentType",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Reads the binary stream and tries to determine the content type and format information of the stream.",
      "longDescription": "Returns a record with field Content.Type that contains the inferred MIME-type.\r\n    If the inferred content type is text/*, and an encoding code page is detected, then additionally returns field Content.Encoding that contains the encoding of the stream.\r\n    If the inferred content type is text/csv, and the format is delimited, additionally returns field Csv.PotentialDelimiter containing a table for analysis of potential delimiters.\r\n    If the inferred content type is text/csv, and the format is fixed-width, additionally returns field Csv.PotentialPositions containing a list for analysis of potential fixed width column positions.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "source",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter source"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Binary.Length",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of characters.",
      "longDescription": "Returns the number of characters.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Binary.ToList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a binary value into a list of numbers.",
      "longDescription": "Converts a binary value into a list of numbers.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Binary.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Encodes binary data into a text form.",
      "longDescription": "Returns the result of converting a binary list of numbers <code>binary</code> into a text value. Optionally, <code>encoding</code> may be specified to indicate the encoding to be used in the text value produced\r\n      The following <code>BinaryEncoding</code> values may be used for <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 encoding</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Hex encoding</li>\r\n      </ul>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "encoding",
        "type": "BinaryEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Binary.ViewError",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a modified error record which won't trigger a fallback when thrown by a handler defined on a view (via Binary.View).",
      "longDescription": "Creates a modified error record from <code>errorRecord</code> which won't trigger a fallback when thrown by a handler defined on a view (via Binary.View).",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "errorRecord",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter errorRecord"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Binary.ViewFunction",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a function that can be intercepted by a handler defined on a view (via Binary.View).",
      "longDescription": "<p>Creates a view function based on <code>function</code> that can be handled in a view created by <code>Binary.View</code>.</p>\r\n<p>The <code>OnInvoke</code> handler of <code>Binary.View</code> can be used to define a handler for the view function.</p>\r\n<p>As with the handlers for built-in operations, if no <code>OnInvoke</code> handler is specified, or if it does not handle the view function, or if an error is raised by the handler, <code>function</code> is applied on top of the view.</p>\r\n<p>Refer to the published Power Query custom connector documentation for a more complete description of <code>Binary.View</code> and custom view functions.</p>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.7BitEncodedSignedInteger",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.",
      "longDescription": "A binary format that reads a 64-bit signed integer that was encoded using a 7-bit variable-length encoding.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.7BitEncodedUnsignedInteger",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.",
      "longDescription": "A binary format that reads a 64-bit unsigned integer that was encoded using a 7-bit variable-length encoding.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Byte",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads an 8-bit unsigned integer.",
      "longDescription": "A binary format that reads an 8-bit unsigned integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Decimal",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a .NET 16-byte decimal value.",
      "longDescription": "A binary format that reads a .NET 16-byte decimal value.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Double",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads an 8-byte IEEE double-precision floating point value.",
      "longDescription": "A binary format that reads an 8-byte IEEE double-precision floating point value.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.List",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that reads a sequence of items and returns a list.",
      "longDescription": "Returns a binary format that reads a sequence of items and returns a <code>list</code>.  The <code>binaryFormat</code> parameter specifies the binary format of each item.  There are three ways to determine the number of items read: <ul><li>If the <code>countOrCondition</code> is not specified, then the binary format will read until there are no more items.</li><li>If the <code>countOrCondition</code> is a number, then the binary format will read that many items.</li><li>If the <code>countOrCondition</code> is a function, then that function will be invoked for each item read.  The function returns true to continue, and false to stop reading items.  The final item is included in the list.</li><li>If the <code>countOrCondition</code> is a binary format, then the count of items is expected to precede the list, and the specified format is used to read the count.</li></ul>",
      "category": "Binary Formats.Reading lists"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.Null",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads zero bytes and returns null.",
      "longDescription": "A binary format that reads zero bytes and returns null.",
      "category": "Binary Formats.Controlling what comes next"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Record",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that reads a record.",
      "longDescription": "Returns a binary format that reads a record.  The <code>record</code> parameter specifies the format of the record.  Each field in the record can have a different binary format.  If a field contains a value that is not a binary format value, then no data is read for that field, and the field value is echoed to the result.",
      "category": "Binary Formats.Reading records"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.SignedInteger16",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 16-bit signed integer.",
      "longDescription": "A binary format that reads a 16-bit signed integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.SignedInteger32",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 32-bit signed integer.",
      "longDescription": "A binary format that reads a 32-bit signed integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.SignedInteger64",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 64-bit signed integer.",
      "longDescription": "A binary format that reads a 64-bit signed integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Single",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 4-byte IEEE single-precision floating point value.",
      "longDescription": "A binary format that reads a 4-byte IEEE single-precision floating point value.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.Text",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that reads a text value.",
      "longDescription": "Returns a binary format that reads a text value.  The <code>length</code> specifies the number of bytes to decode, or the binary format of the length that precedes the text.  The optional <code>encoding</code> value specifies the encoding of the text.  If the <code>encoding</code> is not specified, then the encoding is determined from the Unicode byte order marks.  If no byte order marks are present, then <code>TextEncoding.Utf8</code> is used.",
      "category": "Binary Formats.Reading text"
    },
    "functionParameters": [
      {
        "name": "length",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter length"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.UnsignedInteger16",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 16-bit unsigned integer.",
      "longDescription": "A binary format that reads a 16-bit unsigned integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.UnsignedInteger32",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 32-bit unsigned integer.",
      "longDescription": "A binary format that reads a 32-bit unsigned integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "BinaryFormat.UnsignedInteger64",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "A binary format that reads a 64-bit unsigned integer.",
      "longDescription": "A binary format that reads a 64-bit unsigned integer.",
      "category": "Binary Formats.Reading numbers"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Byte.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates an 8-bit integer from the given value.",
      "longDescription": "Returns an 8-bit integer <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Byte.From</code> returns <code>null</code>. If the given <code>value</code> is a <code>number</code> within the range of an 8-bit integer without a fractional part, <code>value</code> is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is <code>RoundingMode.ToEven</code>. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Refer to <code>Number.Round</code> for the available rounding modes. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Cdm.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Cdm.Contents",
      "longDescription": "This function is unavailable in the current context.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Character.FromNumber",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a number to a text character.",
      "longDescription": "Returns the character equivalent of the number.<br>\r\n    <br>\r\n    The provided <code>number</code> should be a 21-bit Unicode code point.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Character.ToNumber",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a character to a number value.",
      "longDescription": "Returns the number equivalent of the <code>character</code>.<br>\r\n    <br>\r\n    The result will be the 21-bit Unicode code point represented by the provided character or surrogate pair.\r\n  ",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "character",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter character"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Combiner.CombineTextByDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that combines a list of text using the specified delimiter.",
      "longDescription": "Returns a function that combines a list of text values into a single text value using the specified delimiter.",
      "category": "Combiner"
    },
    "functionParameters": [
      {
        "name": "delimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiter"
      },
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Combiner.CombineTextByEachDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that combines a list of text using a sequence of delimiters.",
      "longDescription": "Returns a function that combines a list of text values into a single text value using a sequence of delimiters.",
      "category": "Combiner"
    },
    "functionParameters": [
      {
        "name": "delimiters",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiters"
      },
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Combiner.CombineTextByLengths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that combines a list of text using the specified lengths.",
      "longDescription": "Returns a function that combines a list of text values into a single text value using the specified lengths.",
      "category": "Combiner"
    },
    "functionParameters": [
      {
        "name": "lengths",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lengths"
      },
      {
        "name": "template",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter template"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Combiner.CombineTextByPositions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that combines a list of text using the specified output positions.",
      "longDescription": "Returns a function that combines a list of text values into a single text value using the specified output positions.",
      "category": "Combiner"
    },
    "functionParameters": [
      {
        "name": "positions",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter positions"
      },
      {
        "name": "template",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter template"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Combiner.CombineTextByRanges",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that combines a list of text using the specified positions and lengths.",
      "longDescription": "Returns a function that combines a list of text values into a single text value using the specified output positions and lengths. A null length indicates that the entire text value should be included.",
      "category": "Combiner"
    },
    "functionParameters": [
      {
        "name": "ranges",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter ranges"
      },
      {
        "name": "template",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter template"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Comparer.FromCulture",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a comparer function based on the specified culture and case-sensitivity.",
      "longDescription": "Returns a comparer function that uses the <code>culture</code> and the case-sensitivity specified by <code>ignoreCase</code> to perform comparisons.<br>\r\n      <br>\r\n      A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.<br>\r\n      <br>\r\n      The default value for <code>ignoreCase</code> is false. The <code>culture</code> should be one of the locales supported by the .NET framework (for example, \"en-US\").\r\n    ",
      "category": "Comparer"
    },
    "functionParameters": [
      {
        "name": "culture",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter culture"
      },
      {
        "name": "ignoreCase",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter ignoreCase"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Csv.Document",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the CSV document as a table.",
      "longDescription": "Returns the contents of the CSV document as a table.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> can be null, the number of columns, a list of column names, a table type, or an options record.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> can be a single character, a list of characters, or the value <code>\"\"</code>, which indicates rows should be split by consecutive whitespace characters. Default: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Refer to <code>ExtraValues.Type</code> for the supported values of <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> specifies the text encoding type.\r\n      </li>\r\n    </ul>\r\n\r\n    If a record is specified for <code>columns</code> (and <code>delimiter</code>, <code>extraValues</code>, and <code>encoding</code> are null), the following record fields may be provided:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: A single character column delimiter. Default: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: Can be null, the number of columns, a list of column names, or a table type. If the number of columns is lower than the number found in the input, the additional columns will be ignored. If the number of columns is higher than the number found in the input, the additional columns will be null. When not specified, the number of columns will be determined by what is found in the input.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: The text encoding of the file. Default: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Specifies how quotes are handled.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (default): Quotes in a field are only significant immediately following the delimiter.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Quotes in a field are always significant, regardless of where they appear.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Specifies how quoted line breaks are handled.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (default): Quoted line breaks are treated as part of the data, not as the end of the current row.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: All line breaks are treated as the end of the current row, even when they occur inside a quoted value.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>IncludeByteOrderMark</code>: A logical value indicating whether to include a Byte Order Mark (BOM) at the beginning of the CSV output. When set to true, the BOM is written (for example, UTF-8 BOM: <code>0xEF 0xBB 0xBF</code>); when set to false, no BOM is included. This option is applicable only in output scenarios. Default is <code>false</code>.\r\n      </li>\r\n      <li>\r\n        <code>ExtraValues</code>: Refer to <code>ExtraValues.Type</code> for the supported values of ExtraValues.\r\n      </li>\r\n    </ul>\r\n  ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "source",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter source"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      },
      {
        "name": "delimiter",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter delimiter"
      },
      {
        "name": "extraValues",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter extraValues"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.AttributeMemberId",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the unique member identifier from members property value.",
      "longDescription": "Returns the unique member identifier from a member property value. <code>attribute</code>. Returns null for any other values.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "attribute",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attribute"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Cube.Dimensions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing the set of available dimensions.",
      "longDescription": "Returns a table containing the set of available dimensions within the <code>cube</code>. Each dimension is a table containing a set of dimension attributes and each dimension attribute is represented as a column in the dimension table. Dimensions can be expanded in the cube using Cube.AddAndExpandDimensionColumn. ",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.DisplayFolders",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a nested tree of tables representing the display folder hierarchy of the objects (for example, dimensions and measures).",
      "longDescription": "Returns a nested tree of tables representing the display folder hierarchy of the objects (for example, dimensions and measures) available for use in the <code>cube</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.MeasureProperties",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing the set of available measure properties that are expanded in the cube.",
      "longDescription": "Returns a table containing the set of available properties for measures that are expanded in the cube.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.Measures",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing the set of available measures.",
      "longDescription": "Returns a table containing the set of available measures within the <code>cube</code>.\r\n    Each measure is represented as a function. Measures can be applied to the cube using Cube.AddMeasureColumn.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.Parameters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing the set of parameters that can be applied to the cube.",
      "longDescription": "Returns a table containing the set of parameters that can be applied to <code>cube</code>. Each parameter is a function that can be invoked to get <code>cube</code> with the parameter and its arguments applied.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.Properties",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing the set of available properties for dimensions that are expanded in the cube.",
      "longDescription": "Returns a table containing the set of available properties for dimensions that are expanded in the cube.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.PropertyKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the key of a property.",
      "longDescription": "Returns the key of property <code>property</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "property",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter property"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Currency.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a currency value from the given value.",
      "longDescription": "Returns a <code>currency</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Currency.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of currency, fractional part of the <code>value</code> is rounded to 4 decimal digits and returned. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Valid range for currency is <code>-922,337,203,685,477.5808</code> to <code>922,337,203,685,477.5807</code>. Refer to <code>Number.Round</code> for the available rounding modes. The default is <code>RoundingMode.ToEven</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.Day",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the day component.",
      "longDescription": "Returns the day component of a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the day component is extracted.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.DayOfWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number (from 0 to 6) indicating the day of the week of the provided value.",
      "longDescription": "Returns a number (from 0 to 6) indicating the day of the week of the provided <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.</li>\r\n        <li><code>firstDayOfWeek</code>: A <code>Day</code> value indicating which day should be considered the first day of the week. Allowed values are Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, or Day.Saturday. If unspecified, a culture-dependent default is used.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "firstDayOfWeek",
        "type": "Day.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter firstDayOfWeek"
      }
    ],
    "returnType": "day.type"
  },
  {
    "name": "Date.DayOfWeekName",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the day of the week name.",
      "longDescription": "Returns the day of the week name for the provided <code>date</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "date",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter date"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Date.DayOfYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number from 1 to 366 representing the day of the year.",
      "longDescription": "Returns a number representing the day of the year in the provided <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value, <code>dateTime</code>.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.DaysInMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number from 28 to 31 indicating the number of days in the month.",
      "longDescription": "Returns the number of days in the month in the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value for which the number of days in the month is returned.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.EndOfDay",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the day.",
      "longDescription": "Returns the end of the day represented by <code>dateTime</code>. Time zone information is preserved.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from from which the end of the day is calculated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.EndOfMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the month.",
      "longDescription": "Returns the end of the month that contains <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the end of the month is calculated</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.EndOfQuarter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the quarter.",
      "longDescription": "Returns the end of the quarter that contains <code>dateTime</code>. Time zone information is preserved.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the end of the quarter is calculated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.EndOfWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the week.",
      "longDescription": "Returns the end of the week that contains <code>dateTime</code>.\r\n    This function takes an optional <code>Day</code>, <code>firstDayOfWeek</code>, to set as the first day of the week for this relative calculation. The default value is <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the last day of the week is calculated</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Optional]</i> A <code>Day.Type</code> value representing the first day of the week. Possible values are <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> and <code>Day.Saturday.</code> . The default value is <code>Day.Sunday</code>.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "firstDayOfWeek",
        "type": "Day.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter firstDayOfWeek"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.EndOfYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the year.",
      "longDescription": "Returns the end of the year that contains <code>dateTime</code>, including fractional seconds. Time zone information is preserved.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the end of the year is calculated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a date from the given value.",
      "longDescription": "Returns a date value from the given value.\r\n    <ul>\r\n      <li><code>value</code>: The value to covert to a date. If the given value is <code>null</code>, this function returns <code>null</code>. If the given value is <code>date</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>date</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>date</code> value from textual representation. Refer to <code>Date.FromText</code> for details.</li>\r\n        <li><code>datetime</code>: The date component of the <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: The date component of the local datetime equivalent of <code>value</code>.</li>\r\n        <li><code>number</code>: The date component of the datetime equivalent of a floating-point number whose integral component is the number of days before or after midnight, 30 December 1899, and whose fractional component represents the time on that day divided by 24. For example, midnight, 31 December 1899 is represented by 1.0; 6 A.M., 1 January 1900 is represented by 2.25; midnight, 29 December 1899 is represented by -1.0; and 6 A.M., 29 December 1899 is represented by -1.25. The base value is midnight, 30 December 1899. The minimum value is midnight, 1 January 0100. The maximum value is the last moment of 31 December 9999.</li>\r\n      </ul>\r\n      </li>\r\n      If <code>value</code> is of any other type, an error is returned.\r\n    <li><code>culture</code>: The culture of the given value (for example, \"en-US\").\r\n    </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "date"
  },
  {
    "name": "Date.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a Date from local, universal, and custom Date formats.",
      "longDescription": "Creates a date value from a textual representation.\r\n    <ul>\r\n      <li><code>text</code>: A text value to covert to a date.</li>\r\n      <li><code>options</code>: An optional <code>record</code> that can be provided to specify additional properties. The <code>record</code> can contain the following fields:\r\n      <ul>\r\n        <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> results in parsing the date using a best effort.</li>\r\n        <li><code>Culture</code>: When <code>Format</code> isn't null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n      </ul>\r\n    </ul>\r\nTo support legacy workflows, <code>options</code> can also be a text value. This has the same behavior as if <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "date"
  },
  {
    "name": "Date.IsInCurrentDay",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current day, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current day, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInCurrentMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current month, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current month, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInCurrentQuarter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current quarter, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current quarter, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInCurrentWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current week, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current week, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInCurrentYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current year, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current year, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextDay",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextQuarter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousDay",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous day, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous month, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousQuarter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous quarter, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous week, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous year, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInYearToDate",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the current year and is on or before the current day, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current year and is on or before the current day, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsLeapYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date falls in a leap year.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> falls in is a leap year.\r\n <ul>\r\n        <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.Month",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the month component.",
      "longDescription": "Returns the month component of the provided <code>datetime</code> value, <code>dateTime</code>.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.MonthName",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the name of the month component.",
      "longDescription": "Returns the name of the month component for the provided <code>date</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "date",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter date"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Date.QuarterOfYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number indicating which quarter of the year the date falls in.",
      "longDescription": "Returns a number from 1 to 4 indicating which quarter of the year the date <code>dateTime</code> falls in. <code>dateTime</code> can be a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.StartOfDay",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the day.",
      "longDescription": "Returns the start of the day represented by <code>dateTime</code>.\r\n    <code>dateTime</code> must be a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.StartOfMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the month.",
      "longDescription": "Returns the start of the month that contains <code>dateTime</code>.\r\n    <code>dateTime</code> must be a <code>date</code> or <code>datetime</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.StartOfQuarter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the quarter.",
      "longDescription": "Returns the start of the quarter that contains <code>dateTime</code>.\r\n      <code>dateTime</code> must be a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.StartOfWeek",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the week.",
      "longDescription": "Returns the start of the week that contains <code>dateTime</code>.\r\n    <code>dateTime</code> must be a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "firstDayOfWeek",
        "type": "Day.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter firstDayOfWeek"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.StartOfYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the year.",
      "longDescription": "Returns the start of the year that contains <code>dateTime</code>.\r\n    <code>dateTime</code> must be a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.ToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing parts of the date value.",
      "longDescription": "Returns a record containing the parts of the given date value, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: A <code>date</code> value for from which the record of its parts is to be calculated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "date",
        "type": "date",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter date"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Date.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a textual representation of the date value.",
      "longDescription": "Returns a textual representation of <code>date</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. <code>culture</code> is only used for legacy workflows. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in formatting the date using the default defined by <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> and <code>culture</code> may also be text values. This has the same behavior as if <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "date",
        "type": "date",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter date"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Date.WeekOfMonth",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number from 1 to 6 indicating which week of the month this date falls in.",
      "longDescription": "Returns a number from 1 to 6 indicating which week of the month the date <code>dateTime</code> falls in.\r\n <ul>\r\n        <li><code>dateTime</code>: A <code>datetime</code> value for which the week-of-the-month is determined.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "firstDayOfWeek",
        "type": "Day.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter firstDayOfWeek"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.WeekOfYear",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number from 1 to 54 indicating which week of the year this date falls in.",
      "longDescription": "Returns a number from 1 to 54 indicating which week of the year the date, <code>dateTime</code>, falls in.\r\n <ul>\r\n        <li><code>dateTime</code>: A <code>datetime</code> value for which the week-of-the-year is determined.</li>\r\n        <li><code>firstDayOfWeek</code>: An optional <code>Day.Type</code> value that indicates which day is considered the start of a new week (for example, <code>Day.Sunday</code>). If unspecified, a culture-dependent default is used.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "firstDayOfWeek",
        "type": "Day.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter firstDayOfWeek"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Date.Year",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the year component.",
      "longDescription": "Returns the year component of the provided <code>datetime</code> value, <code>dateTime</code>.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "DateTime.Date",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the date component of the given date, datetime, or datetimezone value.",
      "longDescription": "Returns the date component of the <code>dateTime</code> parameter if the parameter is a <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value, or <code>null</code> if the parameter is <code>null</code>.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "date"
  },
  {
    "name": "DateTime.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetime from the given value.",
      "longDescription": "Returns a <code>datetime</code> value from the given <code>value</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").\r\nIf the given <code>value</code> is <code>null</code>, <code>DateTime.From</code> returns <code>null</code>. If the given <code>value</code> is <code>datetime</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>datetime</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>datetime</code> value from textual representation. Refer to <code>DateTime.FromText</code> for details.</li>\r\n        <li><code>date</code>: A <code>datetime</code> with <code>value</code> as the date component and <code>12:00:00 AM</code> as the time component.</li>\r\n        <li><code>datetimezone</code>: The local <code>datetime</code> equivalent of <code>value</code>.</li>\r\n        <li><code>time</code>: A <code>datetime</code> with the date equivalent of the OLE Automation Date of <code>0</code> as the date component and <code>value</code> as the time component.</li>\r\n        <li><code>number</code>: A <code>datetime</code> equivalent of the OLE Automation Date expressed by <code>value</code>. </li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "datetime"
  },
  {
    "name": "DateTime.FromFileTime",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetime from a 64 bits long number.",
      "longDescription": "Creates a <code>datetime</code> value from the <code>fileTime</code> value and converts it to the local time zone. The filetime is a Windows file time value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).\r\n",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "fileTime",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fileTime"
      }
    ],
    "returnType": "datetime"
  },
  {
    "name": "DateTime.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetimezone from local and universal datetime formats.",
      "longDescription": "Creates a <code>datetime</code> value from a textual representation, <code>text</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in parsing the date using a best effort.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> may also be a text value. This has the same behavior as if <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "datetime"
  },
  {
    "name": "DateTime.IsInCurrentHour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the current hour, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current hour, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInCurrentMinute",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the current minute, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current minute, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInCurrentSecond",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the current second, as determined by the current date and time on the system.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the current second, as determined by the current date and time on the system.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInNextHour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInNextMinute",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInNextSecond",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousHour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous hour, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousMinute",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous minute, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousSecond",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous second, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.Time",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the time part of the given datetime value.",
      "longDescription": "Returns the time part of the given datetime value, <code>dateTime</code>.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "time"
  },
  {
    "name": "DateTime.ToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing the datetime value's parts.",
      "longDescription": "Returns a record containing the parts of the given datetime value, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: A <code>datetime</code> value for from which the record of its parts is to be calculated.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "datetime",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "DateTime.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a textual representation of the datetime value.",
      "longDescription": "Returns a textual representation of <code>dateTime</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. <code>culture</code> is only used for legacy workflows. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in formatting the date using the default defined by <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> and <code>culture</code> may also be text values. This has the same behavior as if <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "datetime",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "DateTimeZone.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetimezone from the given value.",
      "longDescription": "Returns a <code>datetimezone</code> value from the given <code>value</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").\r\nIf the given <code>value</code> is <code>null</code>, <code>DateTimeZone.From</code> returns <code>null</code>. If the given <code>value</code> is <code>datetimezone</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>datetimezone</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>datetimezone</code> value from textual representation. Refer to <code>DateTimeZone.FromText</code> for details.</li>\r\n        <li><code>date</code>: A <code>datetimezone</code> with <code>value</code> as the date component, <code>12:00:00 AM</code> as the time component, and the offset corresponding the local time zone.</li>\r\n        <li><code>datetime</code>: A <code>datetimezone</code> with <code>value</code> as the datetime and the offset corresponding the local time zone.</li>\r\n        <li><code>time</code>: A <code>datetimezone</code> with the date equivalent of the OLE Automation Date of <code>0</code> as the date component, <code>value</code> as the time component, and the offset corresponding the local time zone.</li>\r\n        <li><code>number</code>: A <code>datetimezone</code> with the datetime equivalent of the OLE Automation Date expressed by <code>value</code> and the offset corresponding the local time zone.</li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.FromFileTime",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetimezone from a 64 bits long number.",
      "longDescription": "Creates a <code>datetimezone</code> value from the <code>fileTime</code> value and converts it to the local time zone. The filetime is a Windows file time value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).\r\n    ",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "fileTime",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fileTime"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a datetimezone from local, universal, and custom datetimezone formats.",
      "longDescription": "Creates a <code>datetimezone</code> value from a textual representation, <code>text</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in parsing the date using a best effort.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> may also be a text value. This has the same behavior as if <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.RemoveZone",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes timezone information from the given datetimezone value.",
      "longDescription": "Returns a #datetime value from <code>dateTimeZone</code> with timezone information removed.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "datetime"
  },
  {
    "name": "DateTimeZone.ToLocal",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts the timezone component to the local timezone.",
      "longDescription": "Changes timezone information of the datetimezone value <code>dateTimeZone</code> to the local timezone information.\r\n    If <code>dateTimeZone</code> does not have a timezone component, the local timezone information is added.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.ToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing the datetimezone value's parts.",
      "longDescription": "Returns a record containing the parts of the given datetimezone value, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: A <code>datetimezone</code> value for from which the record of its parts is to be calculated.</li>\r\n      </ul>",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "DateTimeZone.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a textual representation of the datetimezone value.",
      "longDescription": "Returns a textual representation of <code>dateTimeZone</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. <code>culture</code> is only used for legacy workflows. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in formatting the date using the default defined by <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"MMM\"</code> is <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, while in <code>\"ru-RU\"</code> <code>\"MMM\"</code> is <code>\"янв\", \"фев\", \"мар\", ...</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> and <code>culture</code> may also be text values. This has the same behavior as if <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "DateTimeZone.ToUtc",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts the timezone component to UTC timezone.",
      "longDescription": "Changes timezone information of the datetime value <code>dateTimeZone</code> to the UTC or Universal Time timezone information.\r\n    If <code>dateTimeZone</code> does not have a timezone component, the UTC timezone information is added.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.ZoneHours",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Gets the timezone hour of the value.",
      "longDescription": "Returns the time zone hour component of a <code>datetimezone</code> value.\r\n<ul>\r\n    <li><code>dateTimeZone</code>: A <code>datetimezone</code> value from which the time zone hour component is extracted. If <code>dateTimeZone</code> is <code>null</code>, the function returns <code>null</code>.</li>\r\n</ul>",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "DateTimeZone.ZoneMinutes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Gets the timezone minute of the value.",
      "longDescription": "Returns the time zone minute component of a `datetimezone` value.\r\n<ul>\r\n    <li><code>dateTimeZone</code>: A <code>datetimezone</code> value from which the time zone minute component is extracted. If <code>dateTimeZone</code> is <code>null</code>, the function returns <code>null</code>.</li>\r\n</ul>",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Decimal.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a Decimal from the given value.",
      "longDescription": "Returns a Decimal <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Decimal.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of Decimal, <code>value</code> is returned, otherwise an error is returned. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "DeltaLake.Metadata",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Given a Delta Lake table, returns the log entries for that table.",
      "longDescription": "Given a Delta Lake table, returns the log entries for that table.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "DeltaLake.Table",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the Delta Lake table.",
      "longDescription": "Returns the contents of the Delta Lake table.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "directory",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter directory"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "DirectQueryCapabilities.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Double.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a Double from the given value.",
      "longDescription": "Returns a Double <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Double.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of Double, <code>value</code> is returned, otherwise an error is returned. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.Days",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the days portion of a duration.",
      "longDescription": "Returns the days portion of <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a duration from the given value.",
      "longDescription": "Returns a duration value from the given value.\r\n    <ul>\r\n      <li><code>value</code>: The value from which the duration is derived. If the given <code>value</code> is <code>null</code>, this function returns <code>null</code>. If the given <code>value</code> is a <code>duration</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>duration</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>duration</code> value from textual elapsed time forms (d.h:m:s). Refer to <code>Duration.FromText</code> for details.</li>\r\n        <li><code>number</code>: A <code>duration</code> equivalent to the number of whole and fractional days expressed by <code>value</code>.</li>\r\n      </ul>\r\n    </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "duration"
  },
  {
    "name": "Duration.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a duration value from textual elapsed time forms (d.h:m:s).",
      "longDescription": "Returns a duration value from the specified text, <code>text</code>. The following formats can be parsed by this function:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (All ranges are inclusive)<br>\r\n        ddd: Number of days.<br>\r\n        hh: Number of hours, between 0 and 23.<br>\r\n        mm: Number of minutes, between 0 and 59.<br>\r\n        ss: Number of seconds, between 0 and 59.<br>\r\n        ff: Fraction of seconds, between 0 and 9999999.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "duration"
  },
  {
    "name": "Duration.Hours",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the hours portion of a duration.",
      "longDescription": "Returns the hours portion of <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.Minutes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the minutes portion of a duration.",
      "longDescription": "Returns the minutes portion of <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.Seconds",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the seconds portion of a duration.",
      "longDescription": "Returns the seconds portion of <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.ToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing the parts of the duration.",
      "longDescription": "Returns a record containing the parts the duration value, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: A <code>duration</code> from which the record is created.</li>\r\n      </ul>",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Duration.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the text of the form \"d.h:m:s\".",
      "longDescription": "Returns a textual representation in the form \"day.hour:mins:sec\" of the given duration value, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: A <code>duration</code> from which the textual representation is calculated.</li>\r\n  <li><code>format</code>: <i>[Optional]</i> Deprecated, will throw an error if not null</li>\r\n      </ul>",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      },
      {
        "name": "format",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter format"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Duration.TotalDays",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the total days this duration spans.",
      "longDescription": "Returns the total days spanned by <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.TotalHours",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the total hours this duration spans.",
      "longDescription": "Returns the total hours spanned by <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.TotalMinutes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the total minutes this duration spans.",
      "longDescription": "Returns the total minutes spanned by <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Duration.TotalSeconds",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the total seconds this duration spans.",
      "longDescription": "Returns the total seconds spanned by <code>duration</code>.",
      "category": "Duration"
    },
    "functionParameters": [
      {
        "name": "duration",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter duration"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Error.Record",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an error record from the provided text values for reason, message, detail and error code.",
      "longDescription": "Returns an error record from the provided text values for reason, message, detail and error code.",
      "category": "Error"
    },
    "functionParameters": [
      {
        "name": "reason",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter reason"
      },
      {
        "name": "message",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter message"
      },
      {
        "name": "detail",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter detail"
      },
      {
        "name": "parameters",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter parameters"
      },
      {
        "name": "errorCode",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter errorCode"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Essbase.Cubes",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the cubes in an Essbase instance grouped by Essbase server.",
      "longDescription": "Returns a table of cubes grouped by Essbase server from an Essbase instance at APS server <code>url</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Excel.ShapeTable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Excel.Workbook",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the Excel workbook.",
      "longDescription": "Returns the contents of the Excel workbook.\r\n    <ul>\r\n     <li> <code>useHeaders</code> can be null, a logical (true/false) value indicating whether the first row of each returned table should be treated as a header, or an options record. Default: false.</li>\r\n     <li> <code>delayTypes</code> can be null or a logical (true/false) value indicating whether the columns of each returned table should be left untyped. Default: false.</li>\r\n    </ul>\r\n\r\n    If a record is specified for <code>useHeaders</code> (and <code>delayTypes</code> is null), the following record fields may be provided:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Can be null or a logical (true/false) value indicating whether the first row of each returned table should be treated as a header. Default: false.</li>\r\n     <li> <code>DelayTypes</code>: Can be null or a logical (true/false) value indicating whether the columns of each returned table should be left untyped. Default: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Can be null or a logical (true/false) value indicating whether the area of a worksheet that contains data should be inferred by reading the worksheet itself, rather than by reading the dimensions metadata from the file. This can be useful in cases where the dimensions metadata is incorrect. Note that this option is only supported for Open XML Excel files, not for legacy Excel files. Default: false.</li>\r\n    </ul>\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "workbook",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter workbook"
      },
      {
        "name": "useHeaders",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter useHeaders"
      },
      {
        "name": "delayTypes",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter delayTypes"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Expression.Constant",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the M source code representation of a constant value.",
      "longDescription": "Returns the M source code representation of a constant value.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Expression.Evaluate",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of evaluating an M expression.",
      "longDescription": "Returns the result of evaluating an M expression <code>document</code>, with the available identifiers that can be referenced defined by <code>environment</code>.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "document",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter document"
      },
      {
        "name": "environment",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter environment"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Expression.Identifier",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the M source code representation of an identifier.",
      "longDescription": "Returns the M source code representation of an identifier <code>name</code>.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "name",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter name"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "File.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the specified file as binary.",
      "longDescription": "Returns the contents of the file, <code>path</code>, as binary. The <code>options</code> parameter is currently intended for internal use only.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "path",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter path"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Folder.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the properties and contents of the files and folders found in the specified folder.",
      "longDescription": "Returns a table containing a row for each folder and file found in the folder <code>path</code>. Each row contains properties of the folder or file and a link to its content. The <code>options</code> parameter is currently intended for internal use only.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "path",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter path"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Folder.Files",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the properties and contents of the files found in the specified folder and subfolders.",
      "longDescription": "Returns a table containing a row for each file found in the folder <code>path</code> and all its subfolders. Each row contains properties of the file and a link to its content. The <code>options</code> parameter is currently intended for internal use only.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "path",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter path"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Function.IsDataSource",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns whether or not a particular function is considered a data source.",
      "longDescription": "Returns whether or not <code>function</code> is considered a data source.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Geography.FromWellKnownText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates text representing a geographic value in Well-Known Text (WKT) format into a structured record.",
      "longDescription": "Translates text representing a geographic value in Well-Known Text (WKT) format into a structured record. WKT is a standard format defined by the Open Geospatial Consortium (OGC) and is the typical serialization format used by databases including SQL Server.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "input",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter input"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Geography.ToWellKnownText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates a structured geographic point value into its Well-Known Text (WKT) representation.",
      "longDescription": "Translates a structured geographic point value into its Well-Known Text (WKT) representation as defined by the Open Geospatial Consortium (OGC), also the serialization format used by many databases including SQL Server.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "input",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter input"
      },
      {
        "name": "omitSRID",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter omitSRID"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Geometry.FromWellKnownText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates text representing a geometric value in Well-Known Text (WKT) format into a structured record.",
      "longDescription": "Translates text representing a geometric value in Well-Known Text (WKT) format into a structured record. WKT is a standard format defined by the Open Geospatial Consortium (OGC) and is the typical serialization format used by databases including SQL Server.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "input",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter input"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Geometry.ToWellKnownText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates a structured geometric point value into its Well-Known Text (WKT) representation.",
      "longDescription": "Translates a structured geometric point value into its Well-Known Text (WKT) representation as defined by the Open Geospatial Consortium (OGC), also the serialization format used by many databases including SQL Server.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "input",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter input"
      },
      {
        "name": "omitSRID",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter omitSRID"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Graph.Nodes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "graph",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter graph"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Guid.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a guid value from the given value.",
      "longDescription": "Returns a <code>Guid.Type</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Guid.From</code> returns <code>null</code>.  A check will be performed to determine if the given <code>value</code> is in an acceptable format. Acceptable formats provided in the examples.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "HdInsight.Containers",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a navigational table containing the containers found in the specified account from an Azure storage vault.",
      "longDescription": "Returns a navigational table containing a row for each container found at the account URL, <code>account</code>, from an Azure storage vault. Each row contains a link to the container blobs.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "account",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter account"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "HdInsight.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a navigational table containing the containers found in the specified account from an Azure storage vault.",
      "longDescription": "Returns a navigational table containing a row for each container found at the account URL, <code>account</code>, from an Azure storage vault. Each row contains a link to the container blobs.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "account",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter account"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Hdfs.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the properties and contents of the files and folders found in the specified folder from a Hadoop file system.",
      "longDescription": "Returns a table containing a row for each folder and file found at the folder URL, <code>url</code>, from a Hadoop file system. Each row contains properties of the folder or file and a link to its content.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Hdfs.Files",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the properties and contents of the files found in the specified folder and subfolders from a Hadoop file system.",
      "longDescription": "Returns a table containing a row for each file found at the folder URL, <code>url</code>, and subfolders from a Hadoop file system. Each row contains properties of the file and a link to its content.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Int16.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a 16-bit integer from the given value.",
      "longDescription": "Returns a 16-bit integer <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Int16.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of 16-bit integer without a fractional part, <code>value</code> is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is <code>RoundingMode.ToEven</code>. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Refer to <code>Number.Round</code> for the available rounding modes. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Int32.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a 32-bit integer from the given value.",
      "longDescription": "Returns a 32-bit integer <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Int32.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of 32-bit integer without a fractional part, <code>value</code> is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is <code>RoundingMode.ToEven</code>. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Refer to <code>Number.Round</code> for the available rounding modes. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Int64.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a 64-bit integer from the given value.",
      "longDescription": "Returns a 64-bit integer <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Int64.From</code> returns <code>null</code>. If the given <code>value</code> is <code>number</code> within the range of 64-bit integer without a fractional part, <code>value</code> is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is <code>RoundingMode.ToEven</code>. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Refer to <code>Number.Round</code> for the available rounding modes. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Int8.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a signed 8-bit integer from the given value.",
      "longDescription": "Returns a signed 8-bit integer <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Int8.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of signed 8-bit integer without a fractional part, <code>value</code> is returned. If it has fractional part, then the number is rounded with the rounding mode specified. The default rounding mode is <code>RoundingMode.ToEven</code>. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. Refer to <code>Number.Round</code> for the available rounding modes. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "ItemExpression.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the abstract syntax tree (AST) for the body of a function.",
      "longDescription": "<p>Returns the abstract syntax tree (AST) for the body of <code>function</code>, normalized into an <i>item expression</i>:\r\n<ul>\r\n  <li>The function must be a 1-argument lambda.</li>\r\n  <li>All references to the function parameter are replaced with <code>ItemExpression.Item</code>.</li>\r\n  <li>The AST will be simplified to contain only nodes of the kinds:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>An error is raised if an item expression AST cannot be returned for the body of <code>function</code>.</p>",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Json.Document",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the content of the JSON document.",
      "longDescription": "Returns the content of the JSON document.\r\n    <ul>\r\n     <li><code>jsonText</code>: The content of the JSON document. The value of this parameter can be text or a binary value returned by a function like <code>File.Contents</code>.</li>\r\n     <li><code>encoding</code>: A <code>TextEncoding.Type</code> that specifies the encoding used in the JSON document. If <code>encoding</code> is omitted, UTF8 is used.</li>\r\n    </ul>\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "jsonText",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter jsonText"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Json.FromValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Produces a JSON representation of a given value.",
      "longDescription": "<p>Produces a JSON representation of a given value <code>value</code> with a text encoding specified by <code>encoding</code>. If <code>encoding</code> is omitted, UTF8 is used. Values are represented as follows:</p>\r\n <ul>\r\n        <li>Null, text and logical values are represented as the corresponding JSON types</li>\r\n        <li>Numbers are represented as numbers in JSON, except that <code>#infinity</code>, <code>-#infinity</code> and <code>#nan</code> are converted to null</li>\r\n        <li>Lists are represented as JSON arrays</li>\r\n        <li>Records are represented as JSON objects</li>\r\n        <li>Tables are represented as an array of objects</li>\r\n        <li>Dates, times, datetimes, datetimezones, and durations are represented as ISO-8601 text</li>\r\n        <li>Binary values are represented as base-64 encoded text</li>\r\n        <li>Types and functions produce an error</li>\r\n </ul>\r\n    ",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Lines.FromBinary",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a binary value to a list of text values split at lines breaks.  If a quote style is specified, then line breaks may appear within quotes.  If includeLineSeparators is true, then the line break characters are included in the text.",
      "longDescription": "Converts a binary value to a list of text values split at line breaks.\r\n    <ul>\r\n      <li>\r\n        <code>binary</code>: The binary value to convert to the list.\r\n      </li>\r\n      <li>\r\n        <code>quoteStyle</code>: Specifies how line breaks are handled. The value of <code>quoteStyle</code> can be <code>null</code>. The default value is <code>QuoteStyle.None</code>.\r\n      </li>\r\n      <li>\r\n        <code>includeLineSeparators</code>: Specifies whether to include the line break characters in the text. The value of <code>includeLineSeparators</code> can be <code>null</code>. The default value is <code>false</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code>: Specifies the text encoding of the binary value. The value of <code>encoding</code> can be <code>null</code>. The default value is <code>65001</code> (UTF-8).\r\n      </li>\r\n    </ul>\r\n\r\n    If a record is specified for <code>quoteStyle</code> (and <code>includeLineSeparators</code> and <code>encoding</code> are <code>null</code>), the following record fields can be provided:\r\n    <ul>\r\n      <li>\r\n        <code>QuoteStyle</code>: Specifies how quoted line breaks are handled.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code>: Quoted line breaks are treated as part of the data, not as the end of the current row.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: All line breaks are treated as the end of the current row, even when they occur inside a quoted value. This value is the default if the <code>CsvStyle</code> option isn't specified.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Specifies how quotes are handled. Should not be used with <code>QuoteStyle.None</code>.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code>: Quotes in a field are only significant immediately following the <code>Delimiter</code>.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Quotes in a field are always significant, regardless of where they appear.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>Delimiter</code>: A single character delimiter. Should be used only with <code>CsvStyle.QuoteAfterDelimiter</code>.\r\n      </li>\r\n      <li>\r\n        <code>IncludeLineSeparators</code>: Specifies whether to include the line break characters in the text. The default value is <code>false</code>.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: The text encoding of the binary value. The default value is <code>65001</code> (UTF-8).\r\n      </li>\r\n    </ul>\r\n    ",
      "category": "Lines"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "quoteStyle",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      },
      {
        "name": "includeLineSeparators",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeLineSeparators"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Lines.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a text value to a list of text values split at lines breaks. If includeLineSeparators is true, then the line break characters are included in the text.",
      "longDescription": "Converts a text value to a list of text values split at line breaks.\r\n    <ul>\r\n      <li>\r\n        <code>text</code>: The text value to convert to the list of text values.\r\n      </li>\r\n      <li>\r\n        <code>quoteStyle</code>: Specifies how line breaks are handled. The value of <code>quoteStyle</code> can be <code>null</code>. The default value is <code>QuoteStyle.None</code>.\r\n      </li>\r\n      <li>\r\n        <code>includeLineSeparators</code>: Specifies whether to include the line break characters in the text. The value of <code>includeLineSeparators</code> can be <code>null</code>. The default value is <code>false</code>.\r\n      </li>\r\n    </ul>\r\n\r\n    If a record is specified for <code>quoteStyle</code> (and <code>includeLineSeparators</code> is <code>null</code>), the following record fields can be provided:\r\n    <ul>\r\n      <li>\r\n        <code>QuoteStyle</code>: Specifies how quoted line breaks are handled.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code>: Quoted line breaks are treated as part of the data, not as the end of the current row.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: All line breaks are treated as the end of the current row, even when they occur inside a quoted value. This value is the default if the <code>CsvStyle</code> option isn't specified.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Specifies how quotes are handled. Should not be used with <code>QuoteStyle.None</code>.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code>: Quotes in a field are only significant immediately following the <code>Delimiter</code>.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Quotes in a field are always significant, regardless of where they appear.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>Delimiter</code>: A single character delimiter. Should be used only with <code>CsvStyle.QuoteAfterDelimiter</code>.\r\n      </li>\r\n      <li>\r\n        <code>IncludeLineSeparators</code>: Specifies whether to include the line break characters in the text. The default value is <code>false</code>.\r\n      </li>\r\n    </ul>\r\n    ",
      "category": "Lines"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "quoteStyle",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      },
      {
        "name": "includeLineSeparators",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeLineSeparators"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Lines.ToBinary",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.",
      "longDescription": "Converts a list of text into a binary value using the specified encoding and lineSeparator.The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.",
      "category": "Lines"
    },
    "functionParameters": [
      {
        "name": "lines",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lines"
      },
      {
        "name": "lineSeparator",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter lineSeparator"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      },
      {
        "name": "includeByteOrderMark",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeByteOrderMark"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Lines.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.",
      "longDescription": "Converts a list of text into a single text.  The specified lineSeparator is appended to each line.  If not specified then the carriage return and line feed characters are used.",
      "category": "Lines"
    },
    "functionParameters": [
      {
        "name": "lines",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lines"
      },
      {
        "name": "lineSeparator",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter lineSeparator"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "List.AllTrue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if all expressions are true.",
      "longDescription": "Returns true if all expressions in the list <code>list</code> are true.",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.AnyTrue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if any expression is true.",
      "longDescription": "Returns true if any expression in the list <code>list</code> is true.",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.Average",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the average of the values. Works with number, date, datetime, datetimezone and duration values.",
      "longDescription": "Returns the average value for the items in the list, <code>list</code>. The result is given in the same datatype as the values in the list. Only works with number, date, time, datetime, datetimezone and duration values.\r\n    If the list is empty null is returned.",
      "category": "List.Averages"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Buffer",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Buffers a list.",
      "longDescription": "Buffers the list <code>list</code> in memory. The result of this call is a stable list.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a single list by combining multiple lists.",
      "longDescription": "Takes a list of lists, <code>lists</code>, and merges them into a single new list.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "lists",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lists"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.ConformToPageReader",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "List.Count",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of items in the list.",
      "longDescription": "Returns the number of items in the list <code>list</code>.",
      "category": "List.Information"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "List.Distinct",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of values with duplicates removed.",
      "longDescription": "Returns a list that contains all the values in the specified list with duplicates removed. If the specified list is empty, the result is an empty list.\r\n    <ul>\r\n      <li><code>list</code>: The list from which distinct values are extracted.</li>\r\n      <li><code>equationCriteria</code>: (Optional) Specifies how equality is determined when comparing values. This parameter can be a key selector function, a comparer function, or a list containing both a key selector and a comparer.</li>\r\n    </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.First",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first value of the list or the specified default if empty.",
      "longDescription": "Returns the first item in the list <code>list</code>, or the optional default value, <code>defaultValue</code>, if the list is empty.\r\n    If the list is empty and a default value is not specified, the function returns <code>null</code>.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "defaultValue",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter defaultValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Intersect",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the intersection of the list values found in the input.",
      "longDescription": "Returns the intersection of the list values found in the input list <code>lists</code>. An optional parameter, <code>equationCriteria</code>, can be specified.",
      "category": "List.Set operations"
    },
    "functionParameters": [
      {
        "name": "lists",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lists"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.IsDistinct",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether there are duplicates in the list.",
      "longDescription": "Returns a logical value whether there are duplicates in the list <code>list</code>; <code>true</code> if the list is distinct, <code>false</code> if there are duplicate values. ",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.IsEmpty",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if the list is empty.",
      "longDescription": "Returns <code>true</code> if the list, <code>list</code>, contains no values (length 0). If the list contains values (length > 0), returns <code>false</code>.",
      "category": "List.Information"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.Last",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the last value of the list or the specified default if empty.",
      "longDescription": "Returns the last item in the list <code>list</code>, or the optional default value, <code>defaultValue</code>, if the list is empty.\r\n    If the list is empty and a default value is not specified, the function returns <code>null</code>.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "defaultValue",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter defaultValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.LastN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the last value in the list.  Can optionally specify how many values to return or a qualifying condition.",
      "longDescription": "Returns the last item of the list <code>list</code>. If the list is empty, an exception is thrown.\r\n This function takes an optional parameter, <code>countOrCondition</code>, to support gathering multiple items or filtering items. <code>countOrCondition</code> can be specified in three ways:\r\n <ul>\r\n  <li>If a number is specified, up to that many items are returned. </li>\r\n  <li>If a condition is specified, all items are returned that initially meet the condition, starting at the end of the list. Once an item fails the condition, no further items are considered. </li>\r\n  <li>If this parameter is null the last item in the list is returned.</li>\r\n </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Max",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the maximum value or the default value for an empty list.",
      "longDescription": "Returns the maximum item in the list <code>list</code>, or the optional default value <code>default</code> if the list is empty.\r\n    An optional comparisonCriteria value, <code>comparisonCriteria</code>, may be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "includeNulls",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeNulls"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Median",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the median value in the list.",
      "longDescription": "Returns the median item of the list <code>list</code>. This function returns <code>null</code> if the list contains no non-<code>null</code> values.\r\n    If there is an even number of items, the function chooses the smaller of the two median items unless the list is\r\n    comprised entirely of datetimes, durations, numbers or times, in which case it returns the average of the two items.",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Min",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the minimum value or the default value for an empty list.",
      "longDescription": "Returns the minimum item in the list <code>list</code>, or the optional default value <code>default</code> if the list is empty.\r\n    An optional comparisonCriteria value, <code>comparisonCriteria</code>, may be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "includeNulls",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeNulls"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Mode",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the most frequent value in the list.",
      "longDescription": "Returns the item that appears most frequently in <code>list</code>. If the list is empty an exception is thrown. If multiple items appear with the same maximum frequency, the last one is chosen.\r\n    An optional comparison criteria value, <code>equationCriteria</code>, can be specified to control equality testing. ",
      "category": "List.Averages"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Modes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of the most frequent values in the list.",
      "longDescription": "Returns the items that appear most frequently in <code>list</code>. If the list is empty an exception is thrown. If multiple items appear with the same maximum frequency, all of them are returned.\r\n    An optional comparison criteria value, <code>equationCriteria</code>, can be specified to control equality testing. ",
      "category": "List.Averages"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.NonNullCount",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of non-null items in the list.",
      "longDescription": "Returns the number of non-null items in the list <code>list</code>.",
      "category": "List.Information"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "List.Positions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of offsets for the input.",
      "longDescription": "Returns a list of offsets for the input list <code>list</code>.\r\n    When using List.Transform to change a list, the list of positions can be used to give the transform access to the position.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Product",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the product of the numbers in the list.",
      "longDescription": "Returns the product of the non-null numbers in the list, <code>numbersList</code>. Returns null if there are no non-null values in the list.",
      "category": "List.Numerics"
    },
    "functionParameters": [
      {
        "name": "numbersList",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numbersList"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "List.Random",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of random numbers.",
      "longDescription": "Returns a list of random numbers between 0 and 1, given the number of values to generate and an optional seed value.\r\n<ul>\r\n   <li><code>count</code>: The number of random values to generate.</li>\r\n   <li><code>seed</code>:  <i>[Optional]</i> A numeric value used to seed the random number generator.  If omitted a unique list of random numbers is generated each time you call the function.  If you specify the seed value with a number every call to the function generates the same list of random numbers.</li>\r\n</ul>",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "seed",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter seed"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveFirstN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list that skips the specified number of elements at the beginning of the list.",
      "longDescription": "Returns a list that removes the first element of list <code>list</code>. If <code>list</code> is an empty list an empty list is returned.\r\nThis function takes an optional parameter, <code>countOrCondition</code>, to support removing multiple values as listed below.\r\n <ul>\r\n <li>If a number is specified, up to that many items are removed. </li>\r\n <li>If a condition is specified, any consecutive matching items at the start of <code>list</code> are removed.</li>\r\n <li>If this parameter is null, the default behavior is observed. </li>\r\n </ul>",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveLastN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list that removes the specified number of elements from the end of the list.",
      "longDescription": "Returns a list that removes the last <code>countOrCondition</code> elements from the end of list <code>list</code>. If <code>list</code> has less than <code>countOrCondition</code> elements, an empty list is returned.\r\n <ul>\r\n <li>If a number is specified, up to that many items are removed. </li>\r\n <li>If a condition is specified, any consecutive matching items at the end of <code>list</code> are removed.</li>\r\n <li>If this parameter is null, only one item is removed. </li>\r\n </ul>",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveNulls",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all \"null\" values from the specified list.",
      "longDescription": "Removes all occurrences of \"null\" values in the <code>list</code>. If there are no 'null' values in the list, the original list is returned.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Reverse",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Reverses the order of values in the list.",
      "longDescription": "Returns a list with the values in the list <code>list</code> in reversed order.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Single",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the one list item for a list of length one, otherwise throws an exception.",
      "longDescription": "If there is only one item in the list <code>list</code>, returns that item.\r\n    If there is more than one item or the list is empty, the function throws an exception.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.SingleOrDefault",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the one list item for a list of length one and the default value for an empty list.",
      "longDescription": "If there is only one item in the list <code>list</code>, returns that item.\r\n    If the list is empty, the function returns null unless an optional <code>default</code> is specified. If there is more than one item in the list, the function returns an error.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Skip",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list that skips the specified number of elements at the beginning of the list.",
      "longDescription": "Returns a list that skips the first element of list <code>list</code>. If <code>list</code> is an empty list an empty list is returned.\r\nThis function takes an optional parameter, <code>countOrCondition</code>, to support skipping multiple values as listed below.\r\n <ul>\r\n <li>If a number is specified, up to that many items are skipped. </li>\r\n <li>If a condition is specified, any consecutive matching items at the start of <code>list</code> are skipped.</li>\r\n <li>If this parameter is null, the default behavior is observed. </li>\r\n </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Sort",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Sorts a list of data according to the criteria specified.",
      "longDescription": "Sorts a list of data, <code>list</code>, according to the optional criteria specified.\r\n    An optional parameter, <code>comparisonCriteria</code>, can be specified as the comparison criterion. This can take the following values:\r\n    <ul>\r\n    <li> To control the order, the comparison criterion can be an Order enum value. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> To compute a key to be used for sorting, a function of 1 argument can be used. </li>\r\n    <li> To both select a key and control order, comparison criterion can be a list containing the key and order (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> To completely control the comparison, a function of 2 arguments can be used. This function will be passed two items from the list (any two items, in any order). The function should return one of the following values:\r\n        <ul>\r\n            <li> <code>-1</code>: The first item is less than the second item.</li>\r\n            <li> <code>0</code>: The items are equal.</li>\r\n            <li> <code>1</code>: The first item is greater than the second item.</li>\r\n        </ul>\r\n        Value.Compare is a method that can be used to delegate this logic. </li>\r\n    </ul>",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.StandardDeviation",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a sample based estimate of the standard deviation.",
      "longDescription": "Returns a sample based estimate of the standard deviation of the values in the list, <code>numbersList</code>.\r\n    If <code>numbersList</code> is a list of numbers, a number is returned.\r\n    An exception is thrown on an empty list or a list of items that is not type <code>number</code>.",
      "category": "List.Averages"
    },
    "functionParameters": [
      {
        "name": "numbersList",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numbersList"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "List.Sum",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the sum of the items in the list.",
      "longDescription": "Returns the sum of the non-null values in the list, <code>list</code>.  Returns null if there are no non-null values in the list.",
      "category": "List.Addition"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Union",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the union of the list values found in the input.",
      "longDescription": "Takes a list of lists <code>lists</code>, unions the items in the individual lists and returns them in the output list. As a result, the returned list contains all items in any input lists.\r\n    This operation maintains traditional bag semantics, so duplicate values are matched as part of the Union.\r\n    An optional equation criteria value, <code>equationCriteria</code>, can be specified to control equality testing. ",
      "category": "List.Set operations"
    },
    "functionParameters": [
      {
        "name": "lists",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lists"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Zip",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of lists by combining items at the same position in multiple lists.",
      "longDescription": "Takes a list of lists, <code>lists</code>, and returns a list of lists combining items at the same position.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "lists",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lists"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Logical.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a logical from the given value.",
      "longDescription": "Returns a <code>logical</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Logical.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>logical</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>logical</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>logical</code> value from the text value, either <code>\"true\"</code> or <code>\"false\"</code>. Refer to <code>Logical.FromText</code> for details.</li>\r\n        <li><code>number</code>: <code>false</code> if <code>value</code> equals <code>0</code>, <code>true</code> otherwise.</li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "Logical"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Logical.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a logical value from the text values \"true\" and \"false\".",
      "longDescription": "Creates a logical value from the text value <code>text</code>, either \"true\" or \"false\". If <code>text</code> contains a different string, an exception is thrown. The text value <code>text</code> is case insensitive.",
      "category": "Logical"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Logical.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the text \"true\" or \"false\" given a logical value.",
      "longDescription": "Creates a text value from the logical value <code>logicalValue</code>, either <code>true</code> or <code>false</code>. If <code>logicalValue</code> is not a logical value, an exception is thrown.",
      "category": "Logical"
    },
    "functionParameters": [
      {
        "name": "logicalValue",
        "type": "logical",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter logicalValue"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Number.Abs",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the absolute value of the number.",
      "longDescription": "Returns the absolute value of <code>number</code>. If <code>number</code> is null, <code>Number.Abs</code> returns null.\r\n    <ul>\r\n        <li><code>number</code>: A <code>number</code> for which the absolute value is to be calculated.</li>\r\n      </ul>",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Acos",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the arccosine of the number.",
      "longDescription": "Returns the arccosine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Asin",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the arcsine of the number.",
      "longDescription": "Returns the arcsine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Atan",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the arctangent of the number.",
      "longDescription": "Returns the arctangent of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseNot",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a byte where each bit is the opposite of the input.",
      "longDescription": "Returns the result of performing a bitwise \"Not\" operation on <code>number</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Number.Cos",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the cosine of the number.",
      "longDescription": "Returns the cosine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Cosh",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the hyperbolic cosine of the number.",
      "longDescription": "Returns the hyperbolic cosine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Exp",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Raises e to the given power.",
      "longDescription": "Returns the result of raising e to the power of <code>number</code> (exponential function).\r\n      <ul>\r\n        <li><code>number</code>: A <code>number</code> for which the exponential function is to be calculated. If <code>number</code> is null, <code>Number.Exp</code> returns null. </li>\r\n      </ul>",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Factorial",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the factorial of the number.",
      "longDescription": "Returns the factorial of the number <code>number</code>.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a number from the given value.",
      "longDescription": "Returns a <code>number</code> value from the given <code>value</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").\r\nIf the given <code>value</code> is <code>null</code>, <code>Number.From</code> returns <code>null</code>. If the given <code>value</code> is <code>number</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>number</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>number</code> value from textual representation. Common text formats are handled (\"15\", \"3,423.10\", \"5.0E-10\"). Refer to <code>Number.FromText</code> for details.</li>\r\n        <li><code>logical</code>: 1 for <code>true</code>, 0 for <code>false</code>.</li>\r\n        <li><code>datetime</code>: A double-precision floating-point number that contains an OLE Automation date equivalent.</li>\r\n        <li><code>datetimezone</code>: A double-precision floating-point number that contains an OLE Automation date equivalent of the local date and time of <code>value</code>.</li>\r\n        <li><code>date</code>: A double-precision floating-point number that contains an OLE Automation date equivalent.</li>\r\n        <li><code>time</code>:  Expressed in fractional days.</li>\r\n        <li><code>duration</code>: Expressed in whole and fractional days.</li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates numbers from common text formats (\"15\", \"3,423.10\", \"5.0E-10\").",
      "longDescription": "Returns a <code>number</code> value from the given text value, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: The textual representation of a number value. The representation must be in a common number format, such as \"15\", \"3,423.10\", or \"5.0E-10\".</li>\r\n  <li><code>culture</code>: An optional culture that controls how <code>text</code> is interpreted (for example, \"en-US\").</li>\r\n </ul>",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.IsEven",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates if the value is even.",
      "longDescription": "Indicates if the value, <code>number</code>, is even by returning <code>true</code> if it is even, <code>false</code> otherwise.",
      "category": "Number.Information"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Number.IsNaN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates if the value is NaN (Not a number).",
      "longDescription": "Indicates if the value is NaN (Not a number). Returns <code>true</code> if <code>number</code> is equivalent to <code>Number.IsNaN</code>, <code>false</code> otherwise.",
      "category": "Number.Information"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Number.IsOdd",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates if the value is odd.",
      "longDescription": "Indicates if the value is odd. Returns <code>true</code> if <code>number</code> is an odd number, <code>false</code> otherwise.",
      "category": "Number.Information"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Number.Ln",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the natural logarithm of the number.",
      "longDescription": "Returns the natural logarithm of a number, <code>number</code>. If <code>number</code> is null <code>Number.Ln</code> returns null.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Log",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the logarithm of the number to the specified base (default e).",
      "longDescription": "Returns the logarithm of a number, <code>number</code>, to the specified <code>base</code> base. If <code>base</code> is not specified, the default value is Number.E.\r\n    If <code>number</code> is null <code>Number.Log</code> returns null.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "base",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter base"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Log10",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the base 10 logarithm of the number.",
      "longDescription": "Returns the base 10 logarithm of a number, <code>number</code>. If <code>number</code> is null <code>Number.Log10</code> returns null.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Round",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the rounded number. The number of digits and rounding mode can be specified.",
      "longDescription": "Returns the result of rounding <code>number</code> to the nearest number. If <code>number</code> is null, <code>Number.Round</code> returns null.<br>\r\n      <br>\r\n      By default, <code>number</code> is rounded to the nearest integer, and ties are broken by rounding to the nearest even number (using <code>RoundingMode.ToEven</code>, also known as \"banker's rounding\").<br>\r\n      <br>\r\n      However, these defaults can be overridden via the following optional parameters.\r\n      <ul>\r\n        <li><code>digits</code>: Causes <code>number</code> to be rounded to the specified number of decimal digits.</li>\r\n        <li><code>roundingMode</code>: Overrides the default tie-breaking behavior when <code>number</code> is at the midpoint between two potential rounded values\r\n      (refer to <code>RoundingMode.Type</code> for possible values).</li>\r\n      </ul>",
      "category": "Number.Rounding"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "digits",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter digits"
      },
      {
        "name": "roundingMode",
        "type": "RoundingMode.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter roundingMode"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.RoundAwayFromZero",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of rounding positive numbers up and negative numbers down. The number of digits can be specified.",
      "longDescription": "Returns the result of rounding <code>number</code> based on the sign of the number. This function will round positive numbers up and negative numbers down.\r\n    If <code>digits</code> is specified, <code>number</code> is rounded to the <code>digits</code> number of decimal digits.\r\n  ",
      "category": "Number.Rounding"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "digits",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter digits"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.RoundDown",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the highest previous number. The number of digits can be specified.",
      "longDescription": "Returns the result of rounding <code>number</code> down to the previous highest integer. If <code>number</code> is null, this function returns null.\r\n\r\n    If <code>digits</code> is provided, <code>number</code> is rounded to the specified number of decimal digits.\r\n  ",
      "category": "Number.Rounding"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "digits",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter digits"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.RoundTowardZero",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of rounding positive numbers down and negative numbers up. The number of digits can be specified.",
      "longDescription": "Returns the result of rounding <code>number</code> based on the sign of the number. This function will round positive numbers down and negative numbers up.\r\n    If <code>digits</code> is specified, <code>number</code> is rounded to the <code>digits</code> number of decimal digits.\r\n  ",
      "category": "Number.Rounding"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "digits",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter digits"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.RoundUp",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the next highest number. The number of digits can be specified.",
      "longDescription": "Returns the result of rounding <code>number</code> up to the next highest integer. If <code>number</code> is null, this function returns null.\r\n    If <code>digits</code> is provided, <code>number</code> is rounded to the specified number of decimal digits.\r\n  ",
      "category": "Number.Rounding"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "digits",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter digits"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Sign",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero.",
      "longDescription": "Returns 1 for if <code>number</code> is a positive number, -1 if it is a negative number, and 0 if it is zero.\r\n    If <code>number</code> is null, <code>Number.Sign</code> returns null.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Sin",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the sine of the number.",
      "longDescription": "Returns the sine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Sinh",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the hyperbolic sine of the number.",
      "longDescription": "Returns the hyperbolic sine of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Sqrt",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the square root of the number.",
      "longDescription": "Returns the square root of <code>number</code>.\r\n    If <code>number</code> is null, <code>Number.Sqrt</code> returns null. If it is a negative value, <code>Number.NaN</code> is returned (Not a number).",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Tan",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the tangent of the number.",
      "longDescription": "Returns the tangent of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Tanh",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the hyperbolic tangent of the number.",
      "longDescription": "Returns the hyperbolic tangent of <code>number</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts the given number to text.",
      "longDescription": "Converts the numeric value <code>number</code> to a text value according to the format specified by <code>format</code>.<br>\r\n    <br>\r\n    The format is a text value indicating how the number should be converted. For more details on the supported format values, go to https://go.microsoft.com/fwlink/?linkid=2241210 and https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    An optional <code>culture</code> may also be provided (for example, \"en-US\") to control the culture-dependent behavior of <code>format</code>.",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "format",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter format"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "OData.Feed",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of OData feeds offered by an OData service.",
      "longDescription": "Returns a table of OData feeds offered by an OData service from a uri <code>serviceUri</code>, headers <code>headers</code>. A boolean value specifying whether to use concurrent connections or an optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n    <li><code>Query</code>: Programmatically add query parameters to the URL without having to worry about escaping. </li>\r\n    <li> <code>Headers</code> : Specifying this value as a record will supply additional headers to an HTTP request.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.</li>\r\n    <li> <code>ApiKeyName</code> : If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</li>\r\n    <li> <code>Timeout</code> : Specifying this value as a duration will change the timeout for an HTTP request. The default value is 600 seconds.</li>\r\n    <li> <code>EnableBatch</code> : A logical (true/false) that sets whether to allow generation of an OData $batch request if the MaxUriLength is exceeded (default is false).</li>\r\n    <li> <code>MaxUriLength</code> : A number that indicates the max length of an allowed uri sent to an OData service. If exceeded and EnableBatch is true then the request will be made to an OData $batch endpoint, otherwise it will fail (default is 2048).</li>\r\n    <li> <code>Concurrent</code> : A logical (true/false) when set to true, requests to the service will be made concurrently. When set to false, requests will be made sequentially. When not specified, the value will be determined by the service’s AsynchronousRequestsSupported annotation. If the service does not specify whether AsynchronousRequestsSupported is supported, requests will be made sequentially.</li>\r\n    <li> <code>ODataVersion</code> : A number (3 or 4) that specifies the OData protocol version to use for this OData service. When not specified, all supported versions will be requested. The service version will be determined by the OData-Version header returned by the service.</li>\r\n    <li> <code>FunctionOverloads</code> : A logical (true/false) when set to true, function import overloads will be listed in the navigator as separate entries, when set to false, function import overloads will be listed as one union function in the navigator. Default value for V3: false. Default value for V4: true.</li>\r\n    <li> <code>MoreColumns</code> : A logical (true/false) when set to true, adds a \"More Columns\" column to each entity feed containing open types and polymorphic types. This will contain the fields not declared in the base type. When false, this field is not present. Defaults to false.</li>\r\n    <li> <code>IncludeAnnotations</code> : A comma separated list of namespace qualified term names or patterns to include with \"*\" as a wildcard. By default, none of the annotations are included.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : A comma separated list of namespace qualified term names or patterns to include on metadata document requests, with \"*\" as a wildcard. By default, includes the same annotations as IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Allows the OData service to avoid writing out certain values in responses. If acknowledged by the service, we will infer those values from the omitted fields. Options include:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Allows the OData service to omit null values.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Specifies the implementation of the OData connector to use. Valid values are \"2.0\" or null.</li>\r\n    </ul>",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "serviceUri",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter serviceUri"
      },
      {
        "name": "headers",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter headers"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Odbc.DataSource",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views from the ODBC data source. ",
      "longDescription": "Returns a table of SQL tables and views from the ODBC data source specified by the connection string <code>connectionString</code>. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is 15 seconds.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Odbc.InferOptions",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the result of trying to infer SQL capabilities for an ODBC driver.",
      "longDescription": "Returns the result of trying to infer SQL capbabilities with the connection string <code>connectionString</code> using ODBC. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "OleDb.DataSource",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views from the OLE DB data source.",
      "longDescription": "Returns a table of SQL tables and views from the OLE DB data source specified by the connection string <code>connectionString</code>. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is true).</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Oracle.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views from the Oracle database.",
      "longDescription": "Returns a table of SQL tables and views from the Oracle database on server <code>server</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Parquet.Document",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the Parquet document as a table.",
      "longDescription": "Returns the contents of the Parquet document as a table. Options include:\r\n    <ul>\r\n    <li> <code>TypeMapping</code> : A text value that controls the default type mapping when reading and writing files. The default value is null and attempts to preserve as much fidelity as possible to the original type. A value of \"Sql\" will produce results most compatible with Sql Server.</li>\r\n    </ul>",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Parquet.Metadata",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Pdf.Tables",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns any tables found in a PDF file.",
      "longDescription": "Returns any tables found in <code>pdf</code>. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>Implementation</code> : The version of the algorithm to use when identifying tables. Old versions are available only for backwards compatibility, to prevent old queries from being broken by algorithm updates. The newest version should always give the best results. Valid values are &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot;, or null.</li>\r\n<li><code>StartPage</code> : Specifies the first page in the range of pages to examine. Default: 1.</li>\r\n<li><code>EndPage</code> : Specifies the last page in the range of pages to examine. Default: the last page of the document.</li>\r\n<li><code>MultiPageTables</code> : Controls whether similar tables on consecutive pages will be automatically combined into a single table. Default: true.</li>\r\n<li><code>EnforceBorderLines</code> : Controls whether border lines are always enforced as cell boundaries (when true), or simply used as one hint among many for determining cell boundaries (when false). Default: false.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "pdf",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pdf"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Percentage.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a percentage value from the given value.",
      "longDescription": "Returns a <code>percentage</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Percentage.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>text</code> with a trailing percent symbol, then the converted decimal number will be returned. Otherwise, the value will be converted to a <code>number</code> using <code>Number.From</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "RData.FromBinary",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a record of data frames from the RData file.",
      "longDescription": "Returns a record of data frames from the RData file.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "stream",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter stream"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Record.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Combines the records in the given list.",
      "longDescription": "Combines the records in the given <code>records</code>. If the <code>records</code> contains non-record values, an error is returned.",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "records",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter records"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.FieldCount",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of fields in the record.",
      "longDescription": "Returns the number of fields in the record <code>record</code>.",
      "category": "Record.Information"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Record.FieldNames",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the names of the fields.",
      "longDescription": "Returns the names of the fields in the record <code>record</code> as text.",
      "category": "Record.Selection"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Record.FieldValues",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of the field values.",
      "longDescription": "Returns a list of the field values in record <code>record</code>.",
      "category": "Record.Selection"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Record.FromTable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a record from a table of the form {[Name = name, Value = value]}.",
      "longDescription": "Returns a record from a table of records <code>table</code> containing field names and value names <code>{[Name = name, Value = value]}</code>. An exception is thrown if the field names are not unique.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.ToList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of values containing the field values of the input record.",
      "longDescription": "Returns a list of values containing the field values from the input <code>record</code>.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Record.ToTable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with each row being a field name and value of the input record.",
      "longDescription": "Returns a table containing the columns <code>Name</code> and <code>Value</code> with a row for each field in <code>record</code>.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Resource.Access",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Resource.Access",
      "longDescription": "Resource.Access",
      "category": ""
    },
    "functionParameters": [
      {
        "name": "resource",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter resource"
      },
      {
        "name": "nativeQuery",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter nativeQuery"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "RowExpression.Column",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an abstract syntax tree (AST) that represents access to a column within a row expression.",
      "longDescription": "Returns an abstract syntax tree (AST) that represents access to column <code>columnName</code> of the row within a row expression.",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "columnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnName"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "RowExpression.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the abstract syntax tree (AST) for the body of a function.",
      "longDescription": "<p>Returns the abstract syntax tree (AST) for the body of <code>function</code>, normalized into a <i>row expression</i>:\r\n<ul>\r\n  <li>The function must be a 1-argument lambda.</li>\r\n  <li>All references to the function parameter are replaced with <code>RowExpression.Row</code>.</li>\r\n  <li>All references to columns are replaced with <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>The AST will be simplified to contain only nodes of the kinds:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>An error is raised if a row expression AST cannot be returned for the body of <code>function</code>.</p>",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "SapHana.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the packages in an SAP HANA database.",
      "longDescription": "Returns a table of multidimensional packages from the SAP HANA database <code>server</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>Distribution</code> : A SapHanaDistribution that sets the value of the &quot;Distribution&quot; property in the connection string. Statement routing is the method of evaluating the correct server node of a distributed system before statement execution. The default value is SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Specifies the implementation of the SAP HANA connector to use.</li>\r\n<li><code>EnableColumnBinding</code> : Binds variables to the columns of a SAP HANA result set when fetching data. May potentially improve performance at the cost of slightly higher memory utilization. The default value is false.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is 15 seconds.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SharePoint.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing content from a SharePoint site.",
      "longDescription": "Returns a table containing a row for each folder and document found at the specified SharePoint site, <code>url</code>. Each row contains properties of the folder or file and a link to its content. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>ApiVersion</code> : A number (14 or 15) or the text &quot;Auto&quot; that specifies the SharePoint API version to use for this site. When not specified, API version 14 is used. When Auto is specified, the server version will be automatically discovered if possible, otherwise version defaults to 14. Non-English SharePoint sites require at least version 15.</li>\r\n<li><code>Implementation</code> : Optional. Specifies which version of the SharePoint connector to use. Accepted values are &quot;2.0&quot; or null. If the value is &quot;2.0&quot;, the 2.0 implementation of the SharePoint connector is used. If the value is null, the original implementation of the SharePoint connector is used.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SharePoint.Files",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing documents from a SharePoint site.",
      "longDescription": "Returns a table containing a row for each document found at the specified SharePoint site, <code>url</code>, and subfolders. Each row contains properties of the folder or file and a link to its content. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>ApiVersion</code> : A number (14 or 15) or the text &quot;Auto&quot; that specifies the SharePoint API version to use for this site. When not specified, API version 14 is used. When Auto is specified, the server version will be automatically discovered if possible, otherwise version defaults to 14. Non-English SharePoint sites require at least version 15.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SharePoint.Tables",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing content from a SharePoint List.",
      "longDescription": "Returns a table containing a row for each List item found at the specified SharePoint list, <code>url</code>. Each row contains properties of the List. <code>options</code> may be specified to control the following options:\r\n    <ul>\r\n<li><code>ApiVersion</code> : A number (14 or 15) or the text &quot;Auto&quot; that specifies the SharePoint API version to use for this site. When not specified, API version 14 is used. When Auto is specified, the server version will be automatically discovered if possible, otherwise version defaults to 14. Non-English SharePoint sites require at least version 15.</li>\r\n<li><code>Implementation</code> : Optional. Specifies which version of the SharePoint connector to use. Accepted values are &quot;2.0&quot; or null. If the value is &quot;2.0&quot;, the 2.0 implementation of the SharePoint connector is used. If the value is null, the original implementation of the SharePoint connector is used.</li>\r\n<li><code>ViewMode</code> : Optional. This option is only valid for implementation 2.0. Accepted values are &quot;All&quot; and &quot;Default&quot;. If no value is specified, the value is set to &quot;All&quot;. When &quot;All&quot; is specified, the view includes all user-created and system-defined columns. When &quot;Default&quot; is specified, the view will match what the user sees when looking at the list online in whichever view that user set as Default in their settings. If the user edits their default view to add or remove either user-created or system-defined columns, or by creating a new view and setting it as default, these changes will propagate through the connector.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Prevents the connector from using a separate endpoint for note columns.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Single.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a Single from the given value.",
      "longDescription": "Returns a Single <code>number</code> value from the given <code>value</code>. If the given <code>value</code> is <code>null</code>, <code>Single.From</code> returns <code>null</code>.  If the given <code>value</code> is <code>number</code> within the range of Single, <code>value</code> is returned, otherwise an error is returned. If <code>value</code> is of any other type, it will first be converted to a <code>number</code> using <code>Number.FromText</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Number.Conversion and formatting"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Soda.Feed",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table from the contents at the specified URL formatted according to the SODA 2.0 API.",
      "longDescription": "Returns a table from the contents at the specified URL <code>url</code> formatted according to the SODA 2.0 API. The URL must point to a valid SODA-compliant source that ends in a .csv extension.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Splitter.SplitTextByAnyDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text at any of the specified delimiters.",
      "longDescription": "Returns a function that splits text into a list of text at any of the specified delimiters.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "delimiters",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiters"
      },
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text according to the specified delimiter.",
      "longDescription": "Returns a function that splits text into a list of text according to the specified delimiter.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "delimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiter"
      },
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      },
      {
        "name": "csvStyle",
        "type": "CsvStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter csvStyle"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByEachDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text at each specified delimiter in sequence.",
      "longDescription": "Returns a function that splits text into a list of text at each specified delimiter in sequence.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "delimiters",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiters"
      },
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByLengths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text by each specified length.",
      "longDescription": "Returns a function that splits text into a list of text by each specified length.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "lengths",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lengths"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByPositions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text at each specified position.",
      "longDescription": "Returns a function that splits text into a list of text at each specified position.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "positions",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter positions"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByRanges",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text according to the specified offsets and lengths.",
      "longDescription": "Returns a function that splits text into a list of text according to the specified offsets and lengths. A null length indicates that all remaining input should be included.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "ranges",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter ranges"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByRepeatedLengths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text after the specified length repeatedly.",
      "longDescription": "Returns a function that splits text into a list of text after the specified length repeatedly.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "length",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter length"
      },
      {
        "name": "startAtEnd",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startAtEnd"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Sql.Databases",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of databases on a SQL Server.",
      "longDescription": "Returns a table of databases on the specified SQL server, <code>server</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : A number that sets the value of the &quot;maxdop&quot; query clause in the generated SQL query.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n<li><code>MultiSubnetFailover</code> : A logical (true/false) that sets the value of the &quot;MultiSubnetFailover&quot; property in the connection string (default is false).</li>\r\n<li><code>UnsafeTypeConversions</code> : A logical (true/false) that, if true, attempts to fold type conversions which could fail and cause the entire query to fail. Not recommended for general use.</li>\r\n<li><code>ContextInfo</code> : A binary value that is used to set the CONTEXT_INFO before running each command.</li>\r\n<li><code>OmitSRID</code> : A logical (true/false) that, if true, omits the SRID when producing Well-Known Text from geometry and geography types.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : A logical (true/false) value that, if true, allows query folding across databases on the same server. The default value is false.</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] for example.\r\n    <br>\r\n    Does not support setting a SQL query to run on the server. <code>Sql.Database</code> should be used instead to run a SQL query.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SqlExpression.SchemaFrom",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "schema",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter schema"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.ApproximateRowCount",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the approximate number of rows in the table.",
      "longDescription": "Returns the approximate number of rows in the <code>table</code>, or an error if the data source doesn't support approximation.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Table.Buffer",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Buffers a table in memory, isolating it from external changes during evaluation.",
      "longDescription": "Buffers a table in memory, isolating it from external changes during evaluation.\r\n    Buffering is shallow. It forces the evaluation of any scalar cell values, but leaves non-scalar values (records, lists, tables, and so on) as-is.\r\n    <ul>\r\n       <li><code>table</code>: The table to buffer in memory.</li>\r\n       <li><code>options</code>: [Optional] The following options record values can be used:\r\n       <ul>\r\n          <li><code>BufferMode</code>: The buffer mode that describes the type of buffering to be performed. This option can be either <code>BufferMode.Eager</code> or <code>BufferMode.Delayed</code>.</li>\r\n       </li>\r\n       </ul>\r\n    </ul>\r\n    Using this function might or might not make your queries run faster. In some cases, it can make your queries run more slowly due to the added \r\n    cost of reading all the data and storing it in memory, as well as the fact that buffering prevents downstream folding. If the data doesn't need to be\r\n    buffered but you just want to prevent downstream folding, use <code>Table.StopFolding</code> instead.",
      "category": "Table.Other"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ColumnCount",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of columns in the table.",
      "longDescription": "Returns the number of columns in the table <code>table</code>.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Table.ColumnNames",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the column names as a list.",
      "longDescription": "Returns the column names in the table <code>table</code> as a list of text.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table that is the result of merging a list of tables.",
      "longDescription": "Returns a table that is the result of merging a list of tables, <code>tables</code>. The resulting table will have a row type structure defined by <code>columns</code> or by a union of the input types if <code>columns</code> is not specified.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "tables",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tables"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.DemoteHeaders",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Demotes the column headers to the first row of values.",
      "longDescription": "Demotes the column headers (i.e. column names) to the first row of values. The default column names are \"Column1\", \"Column2\" and so on.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Distinct",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes duplicate rows from the table.",
      "longDescription": "Removes duplicate rows from the table.\r\n    An optional parameter, <code>equationCriteria</code>, specifies which columns of the table are tested for duplication. If <code>equationCriteria</code> is not specified, all columns are tested.<br>\r\n    <br>\r\n    Because Power Query sometimes offloads certain operations to backend data sources (known as \"folding\"), and also sometimes optimizes queries by \r\n    skipping operations that aren't strictly necessary, in general there's no guarantee which specific duplicate will be preserved.\r\n    For example, you can't assume that the first row with a unique set of column values will remain, and rows further down in the table will be removed.\r\n    If you want the duplicate removal to behave predictably, first buffer the table using <code>Table.Buffer</code>.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.First",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first row or a specified default value.",
      "longDescription": "Returns the first row of the <code>table</code> or an optional default value, <code>default</code>, if the table is empty.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.FirstValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first column of the first row of the table or a specified default value.",
      "longDescription": "Returns the first column of the first row of the table <code>table</code> or a specified default value.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.FromColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a table from a list of columns and specified values.",
      "longDescription": "Creates a table of type <code>columns</code> from a list <code>lists</code> containing nested lists with the column names and values.\r\n    If some columns have more values then others, the missing values will be filled with the default value, 'null', if the columns are nullable.",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "lists",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter lists"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FromList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a list into a table by applying the specified splitting function to each item in the list.",
      "longDescription": "Converts a list, <code>list</code> into a table by applying the optional splitting function, <code>splitter</code>, to each item in the list. By default, the list is assumed to be a list of text values that is split by commas. Optional <code>columns</code> may be the number of columns, a list of columns or a TableType. Optional <code>default</code> and <code>extraValues</code> may also be specified.",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "splitter",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter splitter"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      },
      {
        "name": "extraValues",
        "type": "ExtraValues.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter extraValues"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FromRecords",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a list of records into a table.",
      "longDescription": "Converts <code>records</code>, a list of records, into a table.",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "records",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter records"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FromRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a table from a list of row values and optional columns",
      "longDescription": "Creates a table from the list <code>rows</code> where each element of the list is an inner list that contains the column values for a single row.  An optional list of column names, a table type, or a number of columns could be provided for <code>columns</code>.",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FromValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a table with a column from the provided value(s).",
      "longDescription": "Creates a table with a column containing the provided value or list of values, <code>value</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : The column name used when constructing a table from a list or scalar value.</li>\r\n    </ul>\r\n  ",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.IsDistinct",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the table contains only distinct rows (no duplicates).",
      "longDescription": "Indicates whether the <code>table</code> contains only distinct rows (no duplicates). Returns <code>true</code> if the rows are distinct, <code>false</code> otherwise.\r\n    An optional parameter, <code>comparisonCriteria</code>, specifies which columns of the table are tested for duplication. If <code>comparisonCriteria</code> is not specified, all columns are tested.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.IsEmpty",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the table contains any rows.",
      "longDescription": "Indicates whether the <code>table</code> contains any rows. Returns <code>true</code> if there are no rows (i.e. the table is empty), <code>false</code> otherwise.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.Keys",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the keys of the specified table.",
      "longDescription": "Returns the keys of the specified table.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.Last",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the last row or a specified default value.",
      "longDescription": "Returns the last row of the <code>table</code> or an optional default value, <code>default</code>, if the table is empty.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.PartitionKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the partition key of the specified table.",
      "longDescription": "Returns the partition key of the specified table.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.PartitionValues",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns information about how a table is partitioned.",
      "longDescription": "Returns information about how a table is partitioned.  A table is returned where each column is a partition column in the original table, and each row corresponds to a partition in the original table.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Profile",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a profile of the columns of a table.",
      "longDescription": "<p>Returns a profile for the columns in <code>table</code>.</p>\r\n<p>The following information is returned for each column (when applicable):\r\n<ul>\r\n  <li>minimum</li>\r\n  <li>maximum</li>\r\n  <li>average</li>\r\n  <li>standard deviation</li>\r\n  <li>count</li>\r\n  <li>null count</li>\r\n  <li>distinct count</li>\r\n</ul>\r\n</p>",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "additionalAggregates",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter additionalAggregates"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.PromoteHeaders",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Promotes the first row of values as the new column headers (i.e. column names).",
      "longDescription": "Promotes the first row of values as the new column headers (i.e. column names). By default, only text or number values are promoted to headers. Valid options:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : If set to <code>true</code>, all the scalar values in the first row are promoted to headers using the <code>Culture</code>, if specified (or current document locale).\r\n    For values that cannot be converted to text, a default column name will be used.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : A culture name specifying the culture for the data.\r\n    </div>\r\n  ",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveFirstN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the first count rows skipped.",
      "longDescription": "Returns a table that does not contain the first specified number of rows, <code>countOrCondition</code>, of the table <code>table</code>.\r\n    The number of rows removed depends on the optional parameter <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> If <code>countOrCondition</code> is omitted only the first row is removed. </li>\r\n    <li> If <code>countOrCondition</code> is a number, that many rows (starting at the top) will be removed. </li>\r\n    <li> If <code>countOrCondition</code> is a condition, the rows that meet the condition will be removed until a row does not meet the condition.</li>\r\n    </ul>",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveLastN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the last N rows removed.",
      "longDescription": "Returns a table that does not contain the last <code>countOrCondition</code> rows of the table <code>table</code>.\r\n        The number of rows removed depends on the optional parameter <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> If <code>countOrCondition</code> is omitted only the last row is removed. </li>\r\n    <li> If <code>countOrCondition</code> is a number, that many rows (starting at the bottom) will be removed. </li>\r\n    <li> If <code>countOrCondition</code> is a condition, the rows that meet the condition will be removed until a row does not meet the condition.</li>\r\n    </ul>",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveRowsWithErrors",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.",
      "longDescription": "Returns a table with the rows removed from the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReverseRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the rows in reverse order.",
      "longDescription": "Returns a table with the rows from the input <code>table</code> in reverse order.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RowCount",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of rows in the table.",
      "longDescription": "Returns the number of rows in the <code>table</code>.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Table.Schema",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing a description of the columns (i.e. the schema) of the specified table.",
      "longDescription": "<p>Returns a table describing the columns of <code>table</code>.</p>\r\n<p>Each row in the table describes the properties of a column of <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Column Name</b></td>\r\n    <td><b>Description</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>The name of the column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>The 0-based position of the column in <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>The name of the type of the column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>The kind of the type of the column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Whether the column can contain <code>null</code> values.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>The numeric base (for example, base-2 or base-10) of the <code>NumericPrecision</code> and <code>NumericScale</code> fields.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>The precision of a numeric column in the base specified by <code>NumericPrecisionBase</code>. This is the maximum number of digits that can be represented by a value of this type (including fractional digits).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>The scale of a numeric column in the base specified by <code>NumericPrecisionBase</code>. This is the number of digits in the fractional part of a value of this type. A value of <code>0</code> indicates a fixed scale with no fractional digits. A value of <code>null</code> indicates the scale is not known (either because it is floating or not defined).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>The maximum number of fractional digits supported in the seconds portion of a date or time value.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>The maximum number of characters permitted in a <code>text</code> column, or the maximum number of bytes permitted in a <code>binary</code> column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indicates whether this column can vary in length (up to <code>MaxLength</code>) or if it is of fixed size.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>The name of the type of the column in the native type system of the source (for example, <code>nvarchar</code> for SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>The default expression for a value of this column in the native expression language of the source (for example, <code>42</code> or <code>newid()</code> for SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>The description of the column.</td>\r\n  </tr>\r\n</table></p>",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.SelectRowsWithErrors",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.",
      "longDescription": "Returns a table with only those rows of the input table that contain an error in at least one of the cells. If a columns list is specified, then only the cells in the specified columns are inspected for errors.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.SingleRow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the single row in the table.",
      "longDescription": "Returns the single row in the one row <code>table</code>. If the <code>table</code> has more than one row, an exception is thrown.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Table.Skip",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the first count rows skipped.",
      "longDescription": "Returns a table that does not contain the first specified number of rows, <code>countOrCondition</code>, of the table <code>table</code>.\r\n    The number of rows skipped depends on the optional parameter <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> If <code>countOrCondition</code> is omitted only the first row is skipped. </li>\r\n    <li> If <code>countOrCondition</code> is a number, that many rows (starting at the top) will be skipped. </li>\r\n    <li> If <code>countOrCondition</code> is a condition, the rows that meet the condition will be skipped until a row does not meet the condition.</li>\r\n    </ul>",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.StopFolding",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Prevents any downstream operations from being run against the original source of the data.",
      "longDescription": "Prevents any downstream operations from being run against the original source of the data in <code>table</code>.",
      "category": "Table.Other"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ToColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a list of nested lists of column values from a table.",
      "longDescription": "Creates a list of nested lists from the table, <code>table</code>.  Each list item is an inner list that contains the column values.",
      "category": "Table.Conversions"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.ToList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a table into a list by applying the specified combining function to each row of values in the table.",
      "longDescription": "Converts a table into a list by applying the specified combining function to each row of values in the table.",
      "category": "Table.Conversions"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "combiner",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter combiner"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.ToRecords",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts a table to a list of records.",
      "longDescription": "Converts a table, <code>table</code>, to a list of records.",
      "category": "Table.Conversions"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.ToRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a list of nested lists of row values from a table.",
      "longDescription": "Creates a list of nested lists from the table, <code>table</code>.  Each list item is an inner list that contains the row values.",
      "category": "Table.Conversions"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.Transpose",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Makes columns into rows and rows into columns.",
      "longDescription": "Makes columns into rows and rows into columns.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ViewError",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a modified error record which won't trigger a fallback when thrown by a handler defined on a view (via Table.View).",
      "longDescription": "Creates a modified error record from <code>errorRecord</code> which won't trigger a fallback when thrown by a handler defined on a view (via Table.View).",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "errorRecord",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter errorRecord"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Table.ViewFunction",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a function that can be intercepted by a handler defined on a view (via Table.View).",
      "longDescription": "<p>Creates a view function based on <code>function</code> that can be handled in a view created by <code>Table.View</code>.</p>\r\n<p>The <code>OnInvoke</code> handler of <code>Table.View</code> can be used to define a handler for the view function.</p>\r\n<p>As with the handlers for built-in operations, if no <code>OnInvoke</code> handler is specified, or if it does not handle the view function, or if an error is raised by the handler, <code>function</code> is applied on top of the view.</p>\r\n<p>Refer to the published Power Query custom connector documentation for a more complete description of <code>Table.View</code> and custom view functions.</p>",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Tables.GetRelationships",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Gets the relationships among a set of tables.",
      "longDescription": "Gets the relationships among a set of tables. The set <code>tables</code> is assumed to have a structure similar to that of a navigation table. The column defined by <code>dataColumn</code> contains the actual data tables.",
      "category": "Table.Information"
    },
    "functionParameters": [
      {
        "name": "tables",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tables"
      },
      {
        "name": "dataColumn",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter dataColumn"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Teradata.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views from the Teradata database.",
      "longDescription": "Returns a table of SQL tables and views from the Teradata database on server <code>server</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Text.Clean",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the text value with all control characters removed.",
      "longDescription": "Returns a text value with all control characters of <code>text</code> removed.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Concatenates a list of text values into one text value.",
      "longDescription": "Returns the result of combining the list of text values, <code>texts</code>, into a single text value. Any <code>null</code> values present in <code>texts</code> are ignored.\r\n    An optional <code>separator</code> used in the final combined text can be specified.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "texts",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter texts"
      },
      {
        "name": "separator",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter separator"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a text value from the given value.",
      "longDescription": "Returns the text representation of a specified value.\r\n    <ul>\r\n      <li><code>value</code>: The value to convert to text. The value can be a <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code>, or <code>binary</code> value. If the given value is <code>null</code>, this function returns <code>null</code>.</li>\r\n      <li><code>culture</code>: (Optional) The culture to use when converting the value to text (for example, \"en-US\").</li> \r\n    </ul>",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.FromBinary",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Decodes data from a binary form into text.",
      "longDescription": "Decodes data, <code>binary</code>, from a binary value in to a text value, using <code>encoding</code> type.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.InferNumberType",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Infers the granular number type (Int64.Type, Double.Type, and so on) of a number encoded in text.",
      "longDescription": "Infers the granular number type (Int64.Type, Double.Type, and so on) of <code>text</code>. An error is raised if <code>text</code> is not a number. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Text"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Text.Length",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of characters.",
      "longDescription": "Returns the number of characters in the text <code>text</code>.",
      "category": "Text.Information"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Text.Lower",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts all characters to lowercase.",
      "longDescription": "Returns the result of converting all characters in <code>text</code> to lowercase. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Proper",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Capitalizes the first letter of each word.",
      "longDescription": "Returns the result of capitalizing only the first letter of each word in text value <code>text</code>. All other letters are returned in lowercase. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Reverse",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Text.Reverse",
      "longDescription": "Reverses the provided <code>text</code>.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.ToBinary",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Encodes text into a binary form.",
      "longDescription": "Encodes the given text value, <code>text</code>, into a binary value using the specified <code>encoding</code>.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      },
      {
        "name": "includeByteOrderMark",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeByteOrderMark"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Text.ToList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of character values from the given text value.",
      "longDescription": "Returns a list of character values from the given text value <code>text</code>.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Text.Trim",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all the specified leading and trailing characters.",
      "longDescription": "Returns the result of removing all leading and trailing characters from the specified <code>text</code>. By default, all the leading and trailing whitespace characters are removed.\r\n    <ul>\r\n    <li><code>text</code>: The text from which the leading and trailing characters are to be removed.</li>\r\n    <li><code>trim</code>: Overrides the whitespace characters that are trimmed by default. This parameter can either be a single character or a list of single characters. Each leading and trailing trim operation stops when a non-trimmed character is encountered.\r\n    </li>\r\n    </ul>",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "trim",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter trim"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.TrimEnd",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all specified trailing characters.",
      "longDescription": "Returns the result of removing all trailing characters from the specified <code>text</code>. By default, all the trailing whitespace characters are removed.\r\n    <ul>\r\n    <li><code>text</code>: The text from which the trailing characters are to be removed.</li>\r\n    <li><code>trim</code>: Overrides the whitespace characters that are trimmed by default. This parameter can either be a single character or a list of single characters. Each trailing trim operation stops when a non-trimmed character is encountered.\r\n    </li>\r\n    </ul>",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "trim",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter trim"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.TrimStart",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all specified leading characters.",
      "longDescription": "Returns the result of removing all leading characters from the specified <code>text</code>. By default, all the leading whitespace characters are removed.\r\n    <ul>\r\n    <li><code>text</code>: The text from which the leading characters are to be removed.</li>\r\n    <li><code>trim</code>: Overrides the whitespace characters that are trimmed by default. This parameter can either be a single character or a list of single characters. Each leading trim operation stops when a non-trimmed character is encountered.\r\n    </li>\r\n    </ul>",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "trim",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter trim"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Upper",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts all characters to uppercase.",
      "longDescription": "Returns the result of converting all characters in <code>text</code> to uppercase. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Time.EndOfHour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the end of the hour.",
      "longDescription": "Returns the end of the hour represented by <code>dateTime</code>, including fractional seconds. Time zone information is preserved.\r\n      <ul>\r\n        <li><code>dateTime</code>: A <code>time</code>, <code>datetime</code>, or <code>datetimezone</code> value from which the end of the hour is calculated.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Time.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a time from the given value.",
      "longDescription": "Returns a <code>time</code> value from the given <code>value</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").\r\nIf the given <code>value</code> is <code>null</code>, <code>Time.From</code> returns <code>null</code>. If the given <code>value</code> is <code>time</code>, <code>value</code> is returned. Values of the following types can be converted to a <code>time</code> value:\r\n      <ul>\r\n        <li><code>text</code>: A <code>time</code> value from textual representation. Refer to <code>Time.FromText</code> for details.</li>\r\n        <li><code>datetime</code>: The time component of the <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: The time component of the local datetime equivalent of <code>value</code>.</li>\r\n        <li><code>number</code>: A <code>time</code> equivalent to the number of fractional days expressed by <code>value</code>. If <code>value</code> is negative or greater or equal to 1, an error is returned.</li>\r\n      </ul>\r\nIf <code>value</code> is of any other type, an error is returned.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "time"
  },
  {
    "name": "Time.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a Time from local and universal, and custom Time formats.",
      "longDescription": "Creates a <code>time</code> value from a textual representation, <code>text</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in parsing the time using a best effort.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"tt\"</code> is <code>\"AM\" or \"PM\"</code>, while in <code>\"ar-EG\"</code> <code>\"tt\"</code> is <code>\"ص\" or \"م\"</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> may also be a text value. This has the same behavior as if <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "time"
  },
  {
    "name": "Time.Hour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the hour component.",
      "longDescription": "Returns the hour component of the provided <code>time</code>, <code>datetime</code>, or <code>datetimezone</code> value, <code>dateTime</code>.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Time.Minute",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the minute component.",
      "longDescription": "Returns the minute component of the provided <code>time</code>, <code>datetime</code>, or <code>datetimezone</code> value, <code>dateTime</code>.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Time.Second",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the second component.",
      "longDescription": "Returns the second component of the provided <code>time</code>, <code>datetime</code>, or <code>datetimezone</code> value, <code>dateTime</code>.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Time.StartOfHour",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the hour.",
      "longDescription": "Returns the start of the hour represented by <code>dateTime</code>.\r\n    <code>dateTime</code> must be a <code>time</code>, <code>datetime</code> or <code>datetimezone</code> value.",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Time.ToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing the Time value's parts.",
      "longDescription": "Returns a record containing the parts of the given Time value, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: A <code>time</code> value for from which the record of its parts is to be calculated.</li>\r\n      </ul>",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "time",
        "type": "time",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter time"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Time.ToText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a textual representation of the time value.",
      "longDescription": "Returns a textual representation of <code>time</code>. An optional <code>record</code> parameter, <code>options</code>, may be provided to specify additional properties. <code>culture</code> is only used for legacy workflows. The <code>record</code> can contain the following fields:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> value indicating the format to use. For more details, go to https://go.microsoft.com/fwlink/?linkid=2180104 and https://go.microsoft.com/fwlink/?linkid=2180105. Omitting this field or providing <code>null</code> will result in formatting the date using the default defined by <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: When <code>Format</code> is not null, <code>Culture</code> controls some format specifiers. For example, in <code>\"en-US\"</code> <code>\"tt\"</code> is <code>\"AM\" or \"PM\"</code>, while in <code>\"ar-EG\"</code> <code>\"tt\"</code> is <code>\"ص\" or \"م\"</code>. When <code>Format</code> is <code>null</code>, <code>Culture</code> controls the default format to use. When <code>Culture</code> is <code>null</code> or omitted, <code>Culture.Current</code> is used.</li>\r\n</ul>\r\nTo support legacy workflows, <code>options</code> and <code>culture</code> may also be text values. This has the same behavior as if <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
      "category": "Time"
    },
    "functionParameters": [
      {
        "name": "time",
        "type": "time",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter time"
      },
      {
        "name": "options",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Type.ClosedRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a closed version of the given record type (or the same type, if it is already closed).",
      "longDescription": "Returns a closed version of the given <code>record</code> <code>type</code> (or the same type, if it is already closed).",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.Facets",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the facets of a type.",
      "longDescription": "Returns a record containing the facets of <code>type</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Type.FunctionParameters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record with field values set to the name of the parameters of a function type, and their values set to their corresponding types.",
      "longDescription": "Returns a record with field values set to the name of the parameters of <code>type</code>, and their values set to their corresponding types.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Type.FunctionRequiredParameters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a number indicating the minimum number of parameters required to invoke the type of function.",
      "longDescription": "Returns a number indicating the minimum number of parameters required to invoke the input <code>type</code> of function.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Type.FunctionReturn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a type returned by a function type.",
      "longDescription": "Returns a type returned by a function <code>type</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.IsNullable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if a type is a nullable type; otherwise, false.",
      "longDescription": "Returns <code>true</code> if a type is a <code>nullable</code> type; otherwise, <code>false</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Type.IsOpenRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns whether a record type is open.",
      "longDescription": "Returns a <code>logical</code> indicating whether a record <code>type</code> is open.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Type.ListItem",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an item type from a list type.",
      "longDescription": "Returns an item type from a list <code>type</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.NonNullable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the non nullable type from a type.",
      "longDescription": "Returns the non <code>nullable</code> type from the <code>type</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.OpenRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an opened version of the given record type (or the same type, if it is already open).",
      "longDescription": "Returns an opened version of the given <code>record</code> <code>type</code> (or the same type, if it is already opened).",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.RecordFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record describing the fields of a record type with each field of the returned record type having a corresponding name and a value.",
      "longDescription": "Returns a record describing the fields of a record <code>type</code>. Each field of the returned record type has a corresponding name and a value, in the form of a record <code>[ Type = type, Optional = logical ]</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Type.TableKeys",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the possibly empty list of keys for the given table type.",
      "longDescription": "Returns the possibly empty list of keys for the given table type.<br>\r\n    <br>\r\n    Each key is defined using a record in the following form:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: a list of the column names that define the key\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> if the key is the table's primary key; otherwise, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Type.TablePartitionKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the partition key for the given table type if it has one.",
      "longDescription": "Returns the partition key for the given table type if it has one.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Type.TableRow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the row type of the table type.",
      "longDescription": "Returns the row type of the specified table type. The result will always be a record type.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.TableSchema",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table containing a description of the columns (i.e. the schema) of the specified table type.",
      "longDescription": "<p>Returns a table describing the columns of <code>tableType</code>.</p>\r\n<p>Refer to the documentation for <code>Table.Schema</code> for a description of the resulting table.</p>",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Type.Union",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the union of a list of types.",
      "longDescription": "Returns the union of the types in <code>types</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "types",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter types"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Uri.BuildQueryString",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Assemble a record into a URI query string.",
      "longDescription": "Assemble the record <code>query</code> into a URI query string, escaping characters as necessary.",
      "category": "Uri"
    },
    "functionParameters": [
      {
        "name": "query",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter query"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Uri.EscapeDataString",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Encodes special characters in accordance with RFC 3986.",
      "longDescription": "Encodes special characters in the input <code>data</code> according to the rules of RFC 3986.",
      "category": "Uri"
    },
    "functionParameters": [
      {
        "name": "data",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter data"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Uri.Parts",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the parts of the input absolute URI as a record.",
      "longDescription": "Returns the parts of the input <code>absoluteUri</code> as a record, containing values such as Scheme, Host, Port, Path, Query, Fragment, UserName and Password.",
      "category": "Uri"
    },
    "functionParameters": [
      {
        "name": "absoluteUri",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter absoluteUri"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Value.Alternates",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Expresses alternate query plans.",
      "longDescription": "Expresses alternate query plans within a query plan expression obtained through Value.Expression(Value.Optimize(...)). Not intended for other uses.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "alternates",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter alternates"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Expression",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an abstract syntax tree (AST) that represents the value's expression.",
      "longDescription": "Returns an abstract syntax tree (AST) that represents the value's expression",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Value.Firewall",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "key",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.FromText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a strongly-typed value from a textual representation.",
      "longDescription": "Decodes a value from a textual representation and interprets it as a value with an appropriate type.\r\n    <ul>\r\n      <li><code>text</code>: The text to interpret.</li>\r\n      <li><code>culture</code>: (Optional) A specific culture used to interpret the text (for example, \"en-US\").</li>\r\n    </ul>\r\n    This function takes a text value and returns a value of type <code>number</code>, <code>logical</code>,  <code>null</code>, <code>datetime</code>, <code>duration</code>, or <code>text</code>. An empty text value is interpreted as a <code>null</code> value.",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Lineage",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Metadata",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record containing the input's metadata.",
      "longDescription": "Returns a record containing the input's metadata.",
      "category": "Metadata"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Optimize",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Signals Value.Expression to return the optimized expression for a value.",
      "longDescription": "When used within Value.Expression, if <code>value</code> represents a query that can be optimized, this function indicates that the optimized expression should be returned. Otherwise, <code>value</code> will be passed through with no effect.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.RemoveMetadata",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Strips the input of metadata.",
      "longDescription": "Strips the input of metadata.",
      "category": "Metadata"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "metaValue",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter metaValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.ResourceExpression",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Value.ResourceExpression",
      "longDescription": "Value.ResourceExpression",
      "category": ""
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Traits",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Expression"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Value.Type",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the type of the given value.",
      "longDescription": "Returns the type of the given value.\r\n    <ul>\r\n      <li><code>value</code>: The value whose type is returned.</li>\r\n    </ul>",
      "category": "Values"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Value.VersionIdentity",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Value.VersionIdentity",
      "longDescription": "Value.VersionIdentity",
      "category": "Action"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Versions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Value.Versions",
      "longDescription": "Value.Versions",
      "category": "Action"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Value.ViewError",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "errorRecord",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter errorRecord"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Value.ViewFunction",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Variable.Value",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "identifier",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identifier"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Variable.ValueOrDefault",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "identifier",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identifier"
      },
      {
        "name": "defaultValue",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter defaultValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Web.BrowserContents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the HTML for the specified URL, as viewed by a web browser.",
      "longDescription": "Returns the HTML for the specified <code>url</code>, as viewed by a web browser. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</li>\r\n        <li><code>WaitFor</code>: Specifies a condition to wait for before downloading the HTML, in addition to waiting for the page to load (which is always done). Can be a record containing Timeout and/or Selector fields. If only a Timeout is specified, the function will wait the amount of time specified before downloading the HTML. If both a Selector and Timeout are specified, and the Timeout elapses before the Selector exists on the page, an error will be thrown. If a Selector is specified with no Timeout, a default Timeout of 30 seconds is applied.</li>\r\n      </ul>\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Web.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents downloaded from the url as binary.",
      "longDescription": "Returns the contents downloaded from <code>url</code> as binary. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>Query</code> : Programmatically add query parameters to the URL without having to worry about escaping.</li>\r\n<li><code>ApiKeyName</code> : If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</li>\r\n<li><code>Headers</code> : Specifying this value as a record will supply additional headers to an HTTP request.</li>\r\n<li><code>Timeout</code> : Specifying this value as a duration will change the timeout for an HTTP request. The default value is 100 seconds.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.</li>\r\n<li><code>IsRetry</code> : Specifying this logical value as true will ignore any existing response in the cache when fetching data.</li>\r\n<li><code>ManualStatusHandling</code> : Specifying this value as a list will prevent any builtin handling for HTTP requests whose response has one of these status codes.</li>\r\n<li><code>RelativePath</code> : Specifying this value as text appends it to the base URL before making the request.</li>\r\n<li><code>Content</code> : Specifying this value changes the web request from a GET to a POST, using the value of the option as the content of the POST.</li>\r\n</ul>\r\n\r\n    The HTTP request is made as either a GET (when no Content is specified) or a POST (when there is Content). POST requests may only be made anonymously.\r\n    <br>\r\n    The headers of the HTTP response are available as metadata on the binary result. Outside of a custom data connector context, only a subset of response headers is available (for security reasons).\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Web.Headers",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the HTTP headers downloaded from the url as a record value.",
      "longDescription": "Returns the headers downloaded from <code>url</code> as a record. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>Query</code> : Programmatically add query parameters to the URL without having to worry about escaping.</li>\r\n<li><code>ApiKeyName</code> : If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</li>\r\n<li><code>Headers</code> : Specifying this value as a record will supply additional headers to an HTTP request.</li>\r\n<li><code>Timeout</code> : Specifying this value as a duration will change the timeout for an HTTP request. The default value is 100 seconds.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.</li>\r\n<li><code>IsRetry</code> : Specifying this logical value as true will ignore any existing response in the cache when fetching data.</li>\r\n<li><code>ManualStatusHandling</code> : Specifying this value as a list will prevent any builtin handling for HTTP requests whose response has one of these status codes.</li>\r\n<li><code>RelativePath</code> : Specifying this value as text appends it to the base URL before making the request.</li>\r\n</ul>\r\n\r\n    The HTTP request is made with the HEAD method. Outside of a custom data connector context, only a subset of response headers is available (for security reasons).\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Web.Page",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.",
      "longDescription": "Returns the contents of the HTML document broken into its constituent structures, as well as a representation of the full document and its text after removing tags.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "html",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter html"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Xml.Document",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the XML document as a hierarchical table.",
      "longDescription": "Returns the contents of the XML document as a hierarchical table.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "contents",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter contents"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Xml.Tables",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the XML document as a nested collection of flattened tables.",
      "longDescription": "Returns the contents of the XML document as a nested collection of flattened tables.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "contents",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter contents"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      },
      {
        "name": "encoding",
        "type": "TextEncoding.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter encoding"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AccessControlEntry.ConditionToIdentities",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a list of identities that the condition will accept.",
      "longDescription": "<p>Using the specified <code>identityProvider</code>, converts the <code>condition</code> into the list of identities for which <code>condition</code> would return <code>true</code> in all authorization contexts with <code>identityProvider</code> as the identity provider. An error is raised if it is not possible to convert <code>condition</code> into a list of identities, for example if <code>condition</code> consults attributes other than user or group identities to make a decision.</p>\r\n    <p>Note that the list of identities represents the identities as they appear in <code>condition</code> and no normalization (such as group expansion) is performed on them.</p>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "identityProvider",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identityProvider"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Action.WithErrorContext",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "action",
        "type": "action",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter action"
      },
      {
        "name": "context",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter context"
      }
    ],
    "returnType": "action"
  },
  {
    "name": "AdoDotNet.DataSource",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the schema collection for an ADO.NET data source.",
      "longDescription": "Returns the schema collection for the ADO.NET data source with provider name <code>providerName</code> and connection string <code>connectionString</code>. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "providerName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter providerName"
      },
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AnalysisServices.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of multidimensional cubes or tabular models from the Analysis Services database.",
      "longDescription": "Returns a table of multidimensional cubes or tabular models from the Analysis Services database <code>database</code> on server <code>server</code>. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>Query</code> : A native MDX query used to retrieve data.</li>\r\n<li><code>TypedMeasureColumns</code> : A logical value indicating if the types specified in the multidimensional or tabular model will be used for the types of the added measure columns. When set to false, the type &quot;number&quot; will be used for all measure columns. The default value for this option is false.</li>\r\n<li><code>Culture</code> : A culture name specifying the culture for the data. This corresponds to the &#39;Locale Identifier&#39; connection string property.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is driver-dependent.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>SubQueries</code> : A number (0, 1 or 2) that sets the value of the &quot;SubQueries&quot; property in the connection string. This controls the behavior of calculated members on subselects or subcubes. (The default value is 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Binary.Compress",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Compresses a binary value using the given compression type.",
      "longDescription": "Compresses a binary value using the given compression type.  The result of this call is a compressed copy of the input. Compression types include:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "compressionType",
        "type": "Compression.Type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter compressionType"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.Decompress",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Decompresses a binary value using the given compression type.",
      "longDescription": "Decompresses a binary value using the given compression type.  The result of this call is a decompressed copy of the input. Compression types include:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "compressionType",
        "type": "Compression.Type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter compressionType"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.Range",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a subset of the binary value beginning at an offset.",
      "longDescription": "Returns a subset of the binary value beginning at the offset <code>binary</code>. An optional parameter, <code>offset</code>, sets the maximum length of the subset.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "Binary.Split",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Splits the specified binary into a list of binaries using the specified page size.",
      "longDescription": "Splits <code>binary</code> into a list of binaries where the first element of the output list is a binary containing the first <code>pageSize</code> bytes from\r\n    the source binary, the next element of the output list is a binary containing the next <code>pageSize</code> bytes from the source binary, and so on.",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "pageSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pageSize"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Binary.View",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates or extends a binary with user-defined handlers for query and action operations.",
      "longDescription": "<p>Returns a view of <code>binary</code> where the functions specified in <code>handlers</code> are used in lieu of the default behavior of an operation when the operation is applied to the view.</p>\r\n<p>If <code>binary</code> is provided, all handler functions are optional. If <code>binary</code> isn't provided, the <code>GetStream</code> handler function is required. If a handler function isn't specified for an operation, the default behavior of the operation is applied to <code>binary</code> instead (except in the case of <code>GetExpression</code>).</p>\r\n<p>Handler functions must return a value that is semantically equivalent to the result of applying the operation against <code>binary</code> (or the resulting view in the case of <code>GetExpression</code>).</p>\r\n<p>If a handler function raises an error, the default behavior of the operation is applied to the view.</p>\r\n<p><code>Binary.View</code> can be used to implement folding to a data source – the translation of M queries into source-specific operations (for example, to download a section of a file).</p>\r\n<p>Refer to the published Power Query custom connector documentation for a more complete description of <code>Binary.View</code>.</p>",
      "category": "Binary"
    },
    "functionParameters": [
      {
        "name": "binary",
        "type": "binary",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binary"
      },
      {
        "name": "handlers",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter handlers"
      }
    ],
    "returnType": "binary"
  },
  {
    "name": "BinaryFormat.ByteOrder",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format with the byte order specified by a function.",
      "longDescription": "Returns a binary format with the byte order specified by <code>binaryFormat</code>.  The default byte order is <code>ByteOrder.BigEndian</code>.",
      "category": "Binary Formats.Controlling byte order"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "byteOrder",
        "type": "ByteOrder.Type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter byteOrder"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.Choice",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that chooses the next binary format based on a value that has already been read.",
      "longDescription": "Returns a binary format that chooses the next binary format based on a value that has already been read.  The binary format value produced by this function works in stages:<ul>\r\n<li>The binary format specified by the <code>binaryFormat</code> parameter is used to read a value.</li>\r\n<li>The value is passed to the choice function specified by the <code>chooseFunction</code> parameter.</li>\r\n<li>The choice function inspects the value and returns a second binary format.</li>\r\n<li>The second binary format is used to read a second value.</li>\r\n<li>If the combine function is specified, then the first and second values are passed to the combine function, and the resulting value is returned.</li>\r\n<li>If the combine function is not specified, the second value is returned.</li>\r\n<li>The second value is returned.</li>\r\n</ul>The optional <code>type</code> parameter indicates the type of binary format that will be returned by the choice function.  Either <code>type any</code>, <code>type list</code>, or <code>type binary</code> may be specified.  If the <code>type</code> parameter is not specified, then <code>type any</code> is used.   If <code>type list</code> or <code>type binary</code> is used, then the system may be able to return a streaming <code>binary</code> or <code>list</code> value instead of a buffered one, which may reduce the amount of memory necessary to read the format.",
      "category": "Binary Formats.Controlling what comes next"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "chooseFunction",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter chooseFunction"
      },
      {
        "name": "type",
        "type": "type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter type"
      },
      {
        "name": "combineFunction",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter combineFunction"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.Group",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that reads a group of items.",
      "longDescription": "The parameters are as follows:\r\n<ul>\r\n<li>The <code>binaryFormat</code> parameter specifies the binary format of the key value.</li>\r\n<li>The <code>group</code> parameter provides information about the group of known items.</li>\r\n<li>The optional <code>extra</code> parameter can be used to specify a function that will return a binary format value for the value following any key that was unexpected.  If the <code>extra</code> parameter is not specified, then an error will be raised if there are unexpected key values.</li>\r\n</ul>\r\nThe <code>group</code> parameter specifies a list of item definitions.  Each item definition is a list, containing 3-5 values, as follows:\r\n<ul>\r\n<li>Key value.  The value of the key that corresponds to the item.  This must be unique within the set of items.</li>\r\n<li>Item format.  The binary format corresponding to the value of the item.  This allows each item to have a different format. </li>\r\n<li>Item occurrence.  The <code>BinaryOccurrence.Type</code> value for how many times the item is expected to appear in the group.   Required items that are not present cause an error.  Required or optional duplicate items are handled like unexpected key values.</li>\r\n<li>Default item value (optional).  If the default item value appears in the item definition list and is not null, then it will be used instead of the default.  The default for repeating or optional items is null, and the default for repeating values is an empty list { }.</li>\r\n<li>Item value transform (optional).   If the item value transform function is present in the item definition list and is not null, then it will be called to transform the item value before it is returned.  The transform function is only called if the item appears in the input (it will never be called with the default value). </li>\r\n</ul>",
      "category": "Binary Formats.Reading a group of items"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "group",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter group"
      },
      {
        "name": "extra",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter extra"
      },
      {
        "name": "lastKey",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter lastKey"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.Length",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that limits the amount of data that can be read.",
      "longDescription": "Returns a binary format that limits the amount of data that can be read.  Both <code>BinaryFormat.List</code> and <code>BinaryFormat.Binary</code> can be used to read until end of the data.  <code>BinaryFormat.Length</code> can be used to limit the number of bytes that are read.  The <code>binaryFormat</code> parameter specifes the binary format to limit.  The <code>length</code> parameter specifies the number of bytes to read.  The <code>length</code> parameter may either be a number value, or a binary format value that specifies the format of the length value that appears that precedes the value being read.",
      "category": "Binary Formats.Limiting input"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "length",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter length"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "BinaryFormat.Transform",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that will transform the values read by another binary format.",
      "longDescription": "Returns a binary format that will transform the values read by another binary format.  The <code>binaryFormat</code> parameter specifies the binary format that will be used to read the value.  The <code>function</code> is invoked with the value read, and returns the transformed value.",
      "category": "Binary Formats.Transforming what was read"
    },
    "functionParameters": [
      {
        "name": "binaryFormat",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter binaryFormat"
      },
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Comparer.Ordinal",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a comparer function which uses Ordinal rules to compare values.",
      "longDescription": "Returns a comparer function which uses Ordinal rules to compare the provided values <code>x</code> and <code>y</code>.<br>\r\n      <br>\r\n      A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.\r\n    ",
      "category": "Comparer"
    },
    "functionParameters": [
      {
        "name": "x",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter x"
      },
      {
        "name": "y",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter y"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Comparer.OrdinalIgnoreCase",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a case-insensitive comparer function which uses Ordinal rules to compare values.",
      "longDescription": "Returns a case-insensitive comparer function which uses Ordinal rules to compare the provided values <code>x</code> and <code>y</code>.<br>\r\n        <br>\r\n        A comparer function accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.\r\n    ",
      "category": "Comparer"
    },
    "functionParameters": [
      {
        "name": "x",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter x"
      },
      {
        "name": "y",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter y"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Cube.ApplyParameter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a cube after applying a parameter to it.",
      "longDescription": "Returns a cube after applying <code>parameter</code> with <code>arguments</code> to <code>cube</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "parameter",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter parameter"
      },
      {
        "name": "arguments",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter arguments"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.AttributeMemberProperty",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a property of a dimension attribute.",
      "longDescription": "Returns the property <code>propertyName</code> of dimension attribute <code>attribute</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "attribute",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attribute"
      },
      {
        "name": "propertyName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter propertyName"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Cube.CollapseAndRemoveColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Changes the dimensional granularity of the filter context for the cube by collapsing the attributes mapped to the specified columns.",
      "longDescription": "Changes the dimensional granularity of the filter context for the <code>cube</code> by collapsing the attributes mapped to the specified columns <code>columnNames</code>. The columns are also removed from the tabular view of the cube.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "columnNames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnNames"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.MeasureProperty",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a property of a measure (cell property).",
      "longDescription": "Returns the property <code>propertyName</code> of measure <code>measure</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "measure",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter measure"
      },
      {
        "name": "propertyName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter propertyName"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Cube.ReplaceDimensions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the set of dimensions returned by Cube.Dimensions.",
      "longDescription": "Replaces the set of dimensions returned by <code>Cube.Dimensions</code>.\r\n    For example, this function can be used to add an ID column to a dimension attribute, so that the data source can group on the ID rather than the displayed value.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "dimensions",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dimensions"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.Transform",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Applies a list of cube functions.",
      "longDescription": "Applies the list cube functions, <code>transforms</code>, on the <code>cube</code>.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "transforms",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter transforms"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "DB2.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views available in a Db2 database.",
      "longDescription": "Returns a table of SQL tables and views available in a Db2 database on server <code>server</code> in the database instance named <code>database</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n<li><code>Implementation</code> : Specifies the internal database provider implementation to use. Valid values are: &quot;IBM&quot; and &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : A number for the CCSID (Coded Character Set Identifier) to decode Db2 FOR BIT binary data into character strings. Applies to Implementation = &quot;Microsoft&quot;. Set 0 to disable conversion (default). Set 1 to convert based on database encoding. Set other CCSID number to convert to application encoding.</li>\r\n<li><code>PackageCollection</code> : Specifies a string value for package collection (default is &quot;NULLID&quot;) to enable use of shared packages required to process SQL statements. Applies to Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Specifies whether the connection is being made through a Db2 Connect gateway. Applies to Implementation = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Date.AddDays",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds the specified days to the date.",
      "longDescription": "Returns the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> result from adding <code>numberOfDays</code> days to the <code>datetime</code> value <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: The <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to which days are being added.</li>\r\n      <li><code>numberOfDays</code>: The number of days to add.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "numberOfDays",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberOfDays"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.AddMonths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds the specified months to the date.",
      "longDescription": "Returns the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> result from adding <code>numberOfMonths</code> months to the <code>datetime</code> value <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: The <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to which months are being added.</li>\r\n        <li><code>numberOfMonths</code>: The number of months to add.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "numberOfMonths",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberOfMonths"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.AddQuarters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds the specified quarters to the date.",
      "longDescription": "Returns the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> result from adding <code>numberOfQuarters</code> quarters to the <code>datetime</code> value <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: The <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to which quarters are being added.</li>\r\n      <li><code>numberOfQuarters</code>: The number of quarters to add.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "numberOfQuarters",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberOfQuarters"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.AddWeeks",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds the specified weeks to the date.",
      "longDescription": "Returns the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> result from adding <code>numberOfWeeks</code> weeks to the <code>datetime</code> value <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: The <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to which weeks are being added.</li>\r\n      <li><code>numberOfWeeks</code>: The number of weeks to add.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "numberOfWeeks",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberOfWeeks"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.AddYears",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds the specified years to the date.",
      "longDescription": "Returns the <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> result of adding <code>numberOfYears</code> to a <code>datetime</code> value <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: The <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to which years are added.</li>\r\n        <li><code>numberOfYears</code>: The number of years to add.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "numberOfYears",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberOfYears"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Date.IsInNextNDays",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>days</code>: The number of days.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "days",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter days"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextNMonths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>months</code>: The number of months.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "months",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter months"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextNQuarters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>quarters</code>: The number of quarters.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "quarters",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter quarters"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextNWeeks",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>weeks</code>: The number of weeks.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "weeks",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter weeks"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInNextNYears",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>years</code>: The number of years.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "years",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter years"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousNDays",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of days, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current day.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>days</code>: The number of days.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "days",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter days"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousNMonths",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of months, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current month.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>months</code>: The number of months.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "months",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter months"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousNQuarters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of quarters, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current quarter.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>quarters</code>: The number of quarters.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "quarters",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter quarters"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousNWeeks",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of weeks, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current week.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>weeks</code>: The number of weeks.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "weeks",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter weeks"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Date.IsInPreviousNYears",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this date occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of years, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current year.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>date</code>, <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>years</code>: The number of years.</li>\r\n      </ul>",
      "category": "Date"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "years",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter years"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.AddZone",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds timezone information to the datetime value.",
      "longDescription": "Adds timezone information to the <code>dateTime</code> value. The timezone information includes <code>timezoneHours</code> and optionally <code>timezoneMinutes</code>, which specify the desired offset from UTC time.",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "datetime",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "timezoneHours",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter timezoneHours"
      },
      {
        "name": "timezoneMinutes",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter timezoneMinutes"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTime.IsInNextNHours",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>hours</code>: The number of hours.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "hours",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter hours"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInNextNMinutes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>minutes</code>: The number of minutes.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "minutes",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter minutes"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInNextNSeconds",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the next number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>seconds</code>: The number of seconds.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "seconds",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter seconds"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousNHours",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of hours, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current hour.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>hours</code>: The number of hours.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "hours",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter hours"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousNMinutes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of minutes, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current minute.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>minutes</code>: The number of minutes.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "minutes",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter minutes"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTime.IsInPreviousNSeconds",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether this datetime occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.",
      "longDescription": "Indicates whether the given datetime value <code>dateTime</code> occurs during the previous number of seconds, as determined by the current date and time on the system. Note that this function will return false when passed a value that occurs within the current second.\r\n      <ul>\r\n      <li><code>dateTime</code>: A <code>datetime</code>, or <code>datetimezone</code> value to be evaluated.</li>\r\n      <li><code>seconds</code>: The number of seconds.</li>\r\n      </ul>",
      "category": "DateTime"
    },
    "functionParameters": [
      {
        "name": "dateTime",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTime"
      },
      {
        "name": "seconds",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter seconds"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "DateTimeZone.SwitchZone",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Changes the timezone of the value.",
      "longDescription": "Changes timezone information to on the datetimezone value <code>dateTimeZone</code> to the new timezone information provided by <code>timezoneHours</code> and optionally <code>timezoneMinutes</code>.\r\n    If <code>dateTimeZone</code> does not have a timezone component, an exception is thrown.",
      "category": "DateTimeZone"
    },
    "functionParameters": [
      {
        "name": "dateTimeZone",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dateTimeZone"
      },
      {
        "name": "timezoneHours",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter timezoneHours"
      },
      {
        "name": "timezoneMinutes",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter timezoneMinutes"
      }
    ],
    "returnType": "datetimezone"
  },
  {
    "name": "Embedded.Value",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Accesses a value by name in an embedded mashup.",
      "longDescription": "Accesses a value by name in an embedded mashup.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "path",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter path"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Function.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a function with a specific parameter signature on top of a function that takes a single list argument",
      "longDescription": "Takes a unary function <code>function</code> and creates a new function with the type <code>functionType</code> that constructs a list out of its arguments and passes it to <code>function</code>.",
      "category": "Function"
    },
    "functionParameters": [
      {
        "name": "functionType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter functionType"
      },
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Function.Invoke",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Invokes the given function",
      "longDescription": "Invokes the given function using the specified list of arguments and returns the result.",
      "category": "Function"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      },
      {
        "name": "args",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter args"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Function.InvokeAfter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Invokes the given function after the specified duration has passed.",
      "longDescription": "Returns the result of invoking <code>function</code> after duration <code>delay</code> has passed.",
      "category": "Function"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      },
      {
        "name": "delay",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delay"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Function.InvokeWithErrorContext",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "function",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter function"
      },
      {
        "name": "context",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter context"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Function.ScalarVector",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a scalar function on top of a vector function, batching multiple invocations.",
      "longDescription": "<p>Returns a scalar function of type <code>scalarFunctionType</code> that invokes <code>vectorFunction</code> with a single row of arguments and returns its single output. Additionally, when the scalar function is repeatedly applied for each row of a table of inputs, such as in Table.AddColumn, instead <code>vectorFunction</code> will be applied once for all inputs.</p>\r\n<p><code>vectorFunction</code> will be passed a table whose columns match in name and position the parameters of <code>scalarFunctionType</code>. Each row of this table contains the arguments for one call to the scalar function, with the columns corresponding to the parameters of <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> must return a list of the same length as the input table, whose item at each position must be the same result as evaluating the scalar function on the input row of the same position.</p>\r\n<p>The input table is expected to be streamed in, so <code>vectorFunction</code> is expected to stream its output as input comes in, only working with one chunk of input at a time. In particular, <code>vectorFunction</code> must not enumerate its input table more than once.</p>",
      "category": "Function"
    },
    "functionParameters": [
      {
        "name": "scalarFunctionType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter scalarFunctionType"
      },
      {
        "name": "vectorFunction",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter vectorFunction"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "GeographyPoint.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a record representing a geographic point from parts.",
      "longDescription": "Creates a record representing a geographic point from its constituent parts, such as longitude, latitude, and if present, elevation (Z) and measure (M). An optional spatial reference identifier (SRID) can be given if different from the default value (4326).",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "longitude",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter longitude"
      },
      {
        "name": "latitude",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter latitude"
      },
      {
        "name": "z",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter z"
      },
      {
        "name": "m",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter m"
      },
      {
        "name": "srid",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter srid"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "GeometryPoint.From",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates a record representing a geometric point from parts.",
      "longDescription": "Creates a record representing a geometric point from its constituent parts, such as X coordinate, Y coordinate, and if present, Z coordinate and measure (M). An optional spatial reference identifier (SRID) can be given if different from the default value (0).",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "x",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter x"
      },
      {
        "name": "y",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter y"
      },
      {
        "name": "z",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter z"
      },
      {
        "name": "m",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter m"
      },
      {
        "name": "srid",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter srid"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "HdInsight.Files",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the properties and contents of the blobs found in the specified container from an Azure storage vault.",
      "longDescription": "Returns a table containing a row for each blob file found at the container URL, <code>account</code>, from an Azure storage vault. Each row contains properties of the file and a link to its content.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "account",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter account"
      },
      {
        "name": "containerName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter containerName"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Html.Table",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table containing the results of running the specified CSS selectors against the provided HTML.",
      "longDescription": "Returns a table containing the results of running the specified CSS selectors against the provided <code>html</code>. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "html",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter html"
      },
      {
        "name": "columnNameSelectorPairs",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnNameSelectorPairs"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Identity.From",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Creates an identity.",
      "longDescription": "Creates an identity.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "identityProvider",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identityProvider"
      },
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Identity.IsMemberOf",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Determines whether an identity is a member of an identity collection.",
      "longDescription": "Determines whether an identity is a member of an identity collection.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "identity",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identity"
      },
      {
        "name": "collection",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter collection"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Informix.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views available in an Informix database.",
      "longDescription": "Returns a table of SQL tables and views available in an Informix database on server <code>server</code> in the database instance named <code>database</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "List.Alternate",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list comprised of all the odd numbered offset elements in a list.",
      "longDescription": "Returns a list comprised of all the odd numbered offset elements in a list. Alternates between taking and skipping values from the list <code>list</code> depending on the parameters.\r\n    <ul>\r\n    <li><code>count</code>: Specifies number of values that are skipped each time.</li>\r\n    <li><code>repeatInterval</code>: An optional repeat interval to indicate how many values are added in between the skipped values.</li>\r\n    <li><code>offset</code>: An option offset parameter to begin skipping the values at the initial offset.</li>\r\n    </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "repeatInterval",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter repeatInterval"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter offset"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Contains",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the list contains the value.",
      "longDescription": "Indicates whether the list contains the specified value. Returns <code>true</code> if the value is found in the list, <code>false</code> otherwise.\r\n    <ul>\r\n      <li><code>list</code>: The list to search.</li>\r\n      <li><code>value</code>: The value to search for in the list.</li>\r\n      <li><code>equationCriteria</code>: (Optional) The comparer used to determine if two values are equal.</li>\r\n    </ul>",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.ContainsAll",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates where a list includes all the values in another list.",
      "longDescription": "Indicates whether the list includes all the values from another list. Returns <code>true</code> if all the values are found in the list, <code>false</code> otherwise.\r\n    <ul>\r\n      <li><code>list</code>: The list to search.</li>\r\n      <li><code>values</code>: The list of values to search for in the first list.</li>\r\n      <li><code>equationCriteria</code>: (Optional) The comparer used to determine if two values are equal.</li>\r\n    </ul>",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "values",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter values"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.ContainsAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates where a list includes any of the values in another list.",
      "longDescription": "Indicates whether the list contains any of the values from another list. Returns <code>true</code> if the values are found in the list, <code>false</code> otherwise.\r\n    <ul>\r\n      <li><code>list</code>: The list to search.</li>\r\n      <li><code>values</code>: The list of values to search for in the first list.</li>\r\n      <li><code>equationCriteria</code>: (Optional) The comparer used to determine if two values are equal.</li>\r\n    </ul>",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "values",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter values"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.Covariance",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the covariance between the two lists of numbers.",
      "longDescription": "Returns the covariance between two lists, <code>numberList1</code> and <code>numberList2</code>. <code>numberList1</code> and <code>numberList2</code> must contain the same number of <code>number</code> values.",
      "category": "List.Numerics"
    },
    "functionParameters": [
      {
        "name": "numberList1",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberList1"
      },
      {
        "name": "numberList2",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter numberList2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "List.Difference",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the difference of the two given lists.",
      "longDescription": "Returns the items in list <code>list1</code> that do not appear in list <code>list2</code>. Duplicate values are supported.\r\n    An optional equation criteria value, <code>equationCriteria</code>, can be specified to control equality testing. ",
      "category": "List.Set operations"
    },
    "functionParameters": [
      {
        "name": "list1",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list1"
      },
      {
        "name": "list2",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list2"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.FindText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of values (including record fields) that contain the specified text.",
      "longDescription": "Returns a list of the values from the list <code>list</code> which contained the value <code>text</code>.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.FirstN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first set of items in the list by specifying how many items to return or a qualifying condition.",
      "longDescription": " <ul>\r\n  <li>If a number is specified, up to that many items are returned. </li>\r\n  <li>If a condition is specified, all items are returned that initially meet the condition. Once an item fails the condition, no further items are considered. </li>\r\n </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.MatchesAll",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if the condition function is satisfied by all values in the list.",
      "longDescription": "Returns <code>true</code> if the condition function is satisfied by all values in the list, otherwise returns <code>false</code>.\r\n    <ul>\r\n      <li><code>list</code>: The list containing the values to check.</li>\r\n      <li><code>condition</code>: The condition to check against the values in the list.</li>\r\n    </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.MatchesAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns true if the condition function is satisfied by any value.",
      "longDescription": "Returns <code>true</code> if the condition function is satisfied by any of the values in the list, otherwise returns <code>false</code>.\r\n    <ul>\r\n      <li><code>list</code>: The list containing the values to check.</li>\r\n      <li><code>condition</code>: The condition to check against the values in the list.</li>\r\n    </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "List.MaxN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the maximum value(s) in the list. The number of values to return or a filtering condition must be specified.",
      "longDescription": "Returns the maximum value(s) in the list, <code>list</code>.\r\n    After the rows are sorted, optional parameters may be specified to further filter the result. The optional parameter <code>countOrCondition</code> specifies the number of values to return or a filtering condition. The optional parameter <code>comparisonCriteria</code> specifies how to compare values in the list.\r\n <ul>\r\n        <li> <code>list</code>: The list of values.</li>\r\n        <li> <code>countOrCondition</code>: If a number is specified, a list of up to <code>countOrCondition</code> items in ascending order is returned. If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> An optional <code>comparisonCriteria</code> value can be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.\r\n </ul>",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "includeNulls",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeNulls"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.MinN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the minimum value(s) in the list. The number of values to return or a filtering condition may be specified.",
      "longDescription": "Returns the minimum value(s) in the list, <code>list</code>.\r\n    The parameter, <code>countOrCondition</code>, specifies the number of values to return or a filtering condition. The optional parameter, <code>comparisonCriteria</code>, specifies how to compare values in the list.\r\n <ul>\r\n        <li> <code>list</code>: The list of values.</li>\r\n        <li> <code>countOrCondition</code>: If a number is specified, a list of up to <code>countOrCondition</code> items in ascending order is returned. If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. If this parameter is null, the single smallest value in the list is returned.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> An optional <code>comparisonCriteria</code> value can be specified to determine how to compare the items in the list. If this parameter is null, the default comparer is used.\r\n </ul>",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "includeNulls",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter includeNulls"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Numbers",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of numbers given an initial value, count, and optional increment value.",
      "longDescription": "Returns a list of numbers given an initial value, count, and optional increment value. The default increment value is 1.\r\n<ul>\r\n   <li><code>start</code>: The initial value in the list.</li>\r\n   <li><code>count</code>: The number of values to create.</li>\r\n   <li><code>increment</code>: <i>[Optional]</i> The value to increment by. If omitted values are incremented by 1.</li>\r\n</ul>",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "increment",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter increment"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Percentile",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns one or more sample percentiles corresponding to the given probabilities.",
      "longDescription": "Returns one or more sample percentiles of the list <code>list</code>. If the value <code>percentiles</code> is a number between 0.0 and 1.0, it will be treated as a percentile and the result will be\r\n    a single value corresponding to that probability. If the value <code>percentiles</code> is a list of numbers with values between 0.0 and 1.0, the result will be a list of percentiles\r\n    corresponding to the input probability. The PercentileMode option in <code>options</code> can be used by advanced users to pick a more-specific interpolation method but is not recommended for most uses.\r\n    Predefined symbols <code>PercentileMode.ExcelInc</code> and <code>PercentileMode.ExcelExc</code> match the interpolation methods used by the Excel functions\r\n    <code>PERCENTILE.INC</code> and <code>PERCENTILE.EXC</code>. The default behavior matches <code>PercentileMode.ExcelInc</code>. The symbols\r\n    <code>PercentileMode.SqlCont</code> and <code>PercentileMode.SqlDisc</code> match the SQL Server behavior for <code>PERCENTILE_CONT</code> and\r\n    <code>PERCENTILE_DISC</code>, respectively.\r\n  ",
      "category": "List.Ordering"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "percentiles",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter percentiles"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.PositionOf",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the offset(s) of a value in a list.",
      "longDescription": "Returns the offset at which the specified value appears in a list. Returns -1 if the value doesn't appear.\r\n    <ul>\r\n      <li><code>list</code>: The list to search.</li>\r\n      <li><code>value</code>: The value to find in the list.</li>\r\n      <li><code>occurrence</code>: (Optional) The specific occurrence to report. This value can be <code>Occurrence.First</code>, <code>Occurrence.Last</code>, or <code>Occurrence.All</code>.</li>\r\n      <li><code>equationCriteria</code>: (Optional) Specifies how equality is determined when comparing values. This parameter can be a key selector function, a comparer function, or a list containing both a key selector and a comparer.\r\n</ul>",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "occurrence",
        "type": "Occurrence.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.PositionOfAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first offset of a value in a list.",
      "longDescription": "Returns the offset in list <code>list</code> of the first occurrence of a value in a list <code>values</code>. Returns -1 if no occurrence is found.\r\n    An optional occurrence parameter <code>occurrence</code> can be specified.\r\n<ul>\r\n   <li><code>occurrence</code>: The maximum number of occurrences that can be returned.</li>\r\n</ul>",
      "category": "List.Membership functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "values",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter values"
      },
      {
        "name": "occurrence",
        "type": "Occurrence.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.Range",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a subset of the list beginning at an offset.",
      "longDescription": "Returns a subset of <code>list</code> beginning at <code>offset</code>. An optional parameter, <code>count</code>, sets the maximum number of items in the subset.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveItems",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes items from list1 that are present in list.",
      "longDescription": "Removes all occurrences of the given values in the <code>list2</code> from <code>list1</code>. If the values in <code>list2</code> don't exist in <code>list1</code>, the original list is returned.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list1",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list1"
      },
      {
        "name": "list2",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list2"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveMatchingItems",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all occurrences of the input values.",
      "longDescription": "Removes all occurrences of the given values in <code>list2</code> from the list <code>list1</code>. If the values in <code>list2</code> don't exist in <code>list1</code>, the original list is returned.\r\n    An optional equation criteria value, <code>equationCriteria</code>, can be specified to control equality testing. ",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list1",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list1"
      },
      {
        "name": "list2",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list2"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.RemoveRange",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes count number of values starting at the specified position.",
      "longDescription": "Removes <code>count</code> values in the <code>list</code> starting at the specified position, <code>index</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "index",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter index"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Repeat",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list that is count repetitions of the original list.",
      "longDescription": "Returns a list that is <code>count</code> repetitions of the original list, <code>list</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.ReplaceMatchingItems",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Applies each replacement of { old, new }.",
      "longDescription": "Performs the given replacements to the list <code>list</code>. A replacement operation <code>replacements</code> consists of a list of two values, the old value and new value, provided in a list.\r\n    An optional equation criteria value, <code>equationCriteria</code>, can be specified to control equality testing.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "replacements",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter replacements"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Select",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of values that match the condition.",
      "longDescription": "Returns a list of values from the list <code>list</code>, that match the selection condition <code>selection</code>.",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "selection",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter selection"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Split",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Splits the specified list into a list of lists using the specified page size.",
      "longDescription": "Splits <code>list</code> into a list of lists where the first element of the output list is a list containing the first <code>pageSize</code> elements from\r\n    the source list, the next element of the output list is a list containing the next <code>pageSize</code> elements from the source list, and so on.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "pageSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pageSize"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Transform",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a new list of values computed from this list.",
      "longDescription": "Returns a new list of values by applying the transform function <code>transform</code> to the list, <code>list</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "transform",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter transform"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "MySQL.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database.",
      "longDescription": "Returns a table of SQL tables, views, and stored scalar functions available in a MySQL database on server <code>server</code> in the database instance named <code>database</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>Encoding</code> : A TextEncoding value that specifies the character set used to encode all queries sent to the server (default is null).</li>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>TreatTinyAsBoolean</code> : A logical (true/false) that determines whether to force tinyint columns on the server as logical values. The default value is true.</li>\r\n<li><code>OldGuids</code> : A logical (true/false) that sets whether char(36) columns (if false) or binary(16) columns (if true) will be treated as GUIDs. The default value is false.</li>\r\n<li><code>ReturnSingleDatabase</code> : A logical (true/false) that sets whether to return all tables of all databases (if false) or to return tables and views of the specified database (if true). The default value is false.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Number.Atan2",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the arctangent of the division of the two numbers.",
      "longDescription": "Returns the arctangent of the division of the two numbers, <code>y</code> and <code>x</code>. The division will be constructed as <code>y</code>/<code>x</code>.",
      "category": "Number.Trigonometry"
    },
    "functionParameters": [
      {
        "name": "y",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter y"
      },
      {
        "name": "x",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter x"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseAnd",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of performing a bitwise \"And\" operation between the two inputs.",
      "longDescription": "Returns the result of performing a bitwise \"And\" operation between <code>number1</code> and <code>number2</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseOr",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of performing a bitwise \"Or\" between the two inputs.",
      "longDescription": "Returns the result of performing a bitwise \"Or\" between <code>number1</code> and <code>number2</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseShiftLeft",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Shifts the bits set to the left.",
      "longDescription": "Returns the result of performing a bitwise shift to the left on <code>number1</code>, by the specified number of bits <code>number2</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseShiftRight",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Shifts the bits set to the right.",
      "longDescription": "Returns the result of performing a bitwise shift to the right on <code>number1</code>, by the specified number of bits <code>number2</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.BitwiseXor",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of performing a bitwise \"XOR\" (Exclusive-OR) between the two inputs.",
      "longDescription": "Returns the result of performing a bitwise \"XOR\" (Exclusive-OR) between <code>number1</code> and <code>number2</code>.",
      "category": "Number.Bytes"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Combinations",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of unique combinations.",
      "longDescription": "Returns the number of unique combinations from a list of items, <code>setSize</code> with specified combination size, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: The number of items in the list.</li>\r\n    <li><code>combinationSize</code>: The number of items in each combination.</li>\r\n</ul>\r\n",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "setSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter setSize"
      },
      {
        "name": "combinationSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter combinationSize"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.IntegerDivide",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Divides two numbers and returns the integer portion of the result.",
      "longDescription": "Returns the integer portion of the result from dividing a number, <code>number1</code>, by another number, <code>number2</code>.\r\n    If <code>number1</code> or <code>number2</code> are null, <code>Number.IntegerDivide</code> returns null.\r\n      <ul>\r\n        <li><code>number1</code>: The dividend.</li>\r\n        <li><code>number2</code>: The divisor.</li>\r\n      </ul>",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number1",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number1"
      },
      {
        "name": "number2",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Mod",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Integer divides two numbers and returns the remainder.",
      "longDescription": "Returns the remainder resulting from the integer division of <code>number</code> by <code>divisor</code>.\r\n    If <code>number</code> or <code>divisor</code> are null, <code>Number.Mod</code> returns null.\r\n      <ul>\r\n        <li><code>number</code>: The dividend.</li>\r\n        <li><code>divisor</code>: The divisor.</li>\r\n      </ul>",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "divisor",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter divisor"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Permutations",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the number of permutations.",
      "longDescription": "Returns the number of permutations that can be generated from a number of items, <code>setSize</code>,  with a specified permutation size, <code>permutationSize</code>.",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "setSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter setSize"
      },
      {
        "name": "permutationSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter permutationSize"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.Power",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Raises a number to the given power.",
      "longDescription": "Returns the result of raising <code>number</code> to the power of <code>power</code>.\r\n    If <code>number</code> or <code>power</code> are null, <code>Number.Power</code> returns null.\r\n      <ul>\r\n        <li><code>number</code>: The base.</li>\r\n        <li><code>power</code>: The exponent.</li>\r\n      </ul>",
      "category": "Number.Operations"
    },
    "functionParameters": [
      {
        "name": "number",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter number"
      },
      {
        "name": "power",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter power"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Number.RandomBetween",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a random number between two numbers.",
      "longDescription": "Returns a random number between <code>bottom</code> and <code>top</code>.",
      "category": "Number.Random"
    },
    "functionParameters": [
      {
        "name": "bottom",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter bottom"
      },
      {
        "name": "top",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter top"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Odbc.Query",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the result of running a native query on an ODBC data source.",
      "longDescription": "Returns the result of running <code>query</code> with the connection string <code>connectionString</code> using ODBC. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is 15 seconds.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "query",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter query"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "OleDb.Query",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the result of running a native query on an OLE DB data source.",
      "longDescription": "Returns the result of running <code>query</code> with the connection string <code>connectionString</code> using OLE DB. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "query",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter query"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "PostgreSQL.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views available in a PostgreSQL database.",
      "longDescription": "Returns a table of SQL tables and views available in a PostgreSQL database on server <code>server</code> in the database instance named <code>database</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Record.Field",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the value of the specified field in a record.",
      "longDescription": "Returns the value of the specified <code>field</code> in the <code>record</code>. If the field is not found, an exception is thrown.",
      "category": "Record.Selection"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "field",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter field"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Record.FieldOrDefault",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the value of the specified field in a record or the default value if the field is not found.",
      "longDescription": "Returns the value of the specified field <code>field</code> in the record <code>record</code>. If the field is not found, the optional <code>defaultValue</code> is returned.",
      "category": "Record.Selection"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "field",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter field"
      },
      {
        "name": "defaultValue",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter defaultValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Record.FromList",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record given a list of field values and a set of fields.",
      "longDescription": "Returns a record given a <code>list</code> of field values and a set of fields.  The <code>fields</code> can be specified either by a list of text values, or a record type.  An error is thrown if the fields are not unique.",
      "category": "Record.Serialization"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "fields",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fields"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.HasFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the record has the specified fields.",
      "longDescription": "Indicates whether the record <code>record</code> has the fields specified in <code>fields</code>, by returning a logical value (true or false).\r\n    Multiple field values can be specified using a list.",
      "category": "Record.Information"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "fields",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fields"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Record.RemoveFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes the specified field(s) from the input record.",
      "longDescription": "Returns a record that removes all the fields specified in list <code>fields</code> from the input <code>record</code>. If the field specified does not exist, an exception is thrown.",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "fields",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fields"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.RenameFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Applies rename(s) from a list in the form { old, new }.",
      "longDescription": "Returns a record after renaming fields in the input <code>record</code> to the new field names specified in list <code>renames</code>. For multiple renames, a nested list can be used ({ {old1, new1}, {old2, new2} }).",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "renames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter renames"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.ReorderFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Reorders the record fields to match the order of a list of field names.",
      "longDescription": "Reorders the fields of a record to match the order of a list of field names.\r\n    <ul>\r\n      <li><code>record</code>: The record containing the fields to reorder.</li>\r\n      <li><code>fieldOrder</code>: A list containing the new order of the fields to apply to the record. Field values are maintained and fields not listed in this parameter are left in their original positions.</li>\r\n      <li><code>missingField</code>: Specifies the expected action for missing values in a row that contains fewer fields than expected. The following values are valid:\r\n      <ul>\r\n        <li><code>MissingField.Error</code>: (Default) Indicates that missing fields should result in an error. If no value is entered for the <code>missingField</code> parameter, this value is used.</li>\r\n        <li><code>MissingField.Ignore</code>: Indicates that missing fields should be ignored.</li>\r\n        <li><code>MissingField.UseNull</code>: Indicates that missing fields should be included as <code>null</code> values.</li>\r\n      </li>\r\n    </ul> ",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "fieldOrder",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fieldOrder"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.SelectFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record that contains only the specified fields.",
      "longDescription": "Returns a record which includes only the fields specified in list <code>fields</code> from the input <code>record</code>.",
      "category": "Record.Selection"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "fields",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fields"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Record.TransformFields",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record after applying specified transformations.",
      "longDescription": "Returns a record after applying transformations specified in list <code>transformOperations</code> to <code>record</code>.\r\n    One or more fields may be transformed at a given time.\r\n      <div>In the case of a single field being transformed, <code>transformOperations</code> is expected to be a list with two items. The first item in <code>transformOperations</code> specifies a field name, and the second item in <code>transformOperations</code> specifies the function to be used for transformation. For example, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>In the case of a multiple fields being transformed, <code>transformOperations</code> is expected to be a list of lists, where each inner list is a pair of field name and transformation operation. For example, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "transformOperations",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter transformOperations"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Splitter.SplitTextByCharacterTransition",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text according to a transition from one kind of character to another. The {0} and {1} parameters can either be a list of characters, or a function that takes a character and returns true/false.",
      "longDescription": "Returns a function that splits text into a list of text according to a transition from one kind of character to another. The <code>before</code> and <code>after</code> parameters can either be a list of characters, or a function that takes a character and returns true/false.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "before",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter before"
      },
      {
        "name": "after",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter after"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Sql.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables, views, and stored functions from the SQL Server database.",
      "longDescription": "Returns a table of SQL tables, views, and stored functions from the SQL Server database <code>database</code> on server <code>server</code>. The port may be optionally specified with the server, separated by a colon or a comma. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : A number that sets the value of the &quot;maxdop&quot; query clause in the generated SQL query.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n<li><code>MultiSubnetFailover</code> : A logical (true/false) that sets the value of the &quot;MultiSubnetFailover&quot; property in the connection string (default is false).</li>\r\n<li><code>UnsafeTypeConversions</code> : A logical (true/false) that, if true, attempts to fold type conversions which could fail and cause the entire query to fail. Not recommended for general use.</li>\r\n<li><code>ContextInfo</code> : A binary value that is used to set the CONTEXT_INFO before running each command.</li>\r\n<li><code>OmitSRID</code> : A logical (true/false) that, if true, omits the SRID when producing Well-Known Text from geometry and geography types.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : A logical (true/false) value that, if true, allows query folding across databases on the same server. The default value is false.</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SqlExpression.ToExpression",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Converts the provided SQL query to M code. This function is intended for internal use only.",
      "longDescription": "Converts the provided <code>sql</code> query to M code, with the available identifiers defined by <code>environment</code>. This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "sql",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter sql"
      },
      {
        "name": "environment",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter environment"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Sybase.Database",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of SQL tables and views available in a Sybase database.",
      "longDescription": "Returns a table of SQL tables and views available in a Sybase database on server <code>server</code> in the database instance named <code>database</code>. The port may be optionally specified with the server, separated by a colon. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : A function that is used for the creation of names for navigation properties.</li>\r\n<li><code>Query</code> : A native SQL query used to retrieve data. If the query produces multiple result sets, only the first will be returned.</li>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>ConnectionTimeout</code> : A duration that controls how long to wait before abandoning an attempt to make a connection to the server. The default value is driver-dependent.</li>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n</ul>\r\n\r\n    The record parameter is specified as [option1 = value1, option2 = value2...] or [Query = \"select ...\"] for example.\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "database",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter database"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AddIndexColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Appends a column with explicit position values.",
      "longDescription": "Appends a column named <code>newColumnName</code> to the <code>table</code> with explicit position values.\r\n    An optional value, <code>initialValue</code>, the initial index value. An optional value, <code>increment</code>, specifies how much to increment each index value.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "initialValue",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter initialValue"
      },
      {
        "name": "increment",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter increment"
      },
      {
        "name": "columnType",
        "type": "type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columnType"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Column",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a specified column of data from the table as a list.",
      "longDescription": "Returns the column of data specified by <code>column</code> from the table <code>table</code> as a list.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.ColumnsOfType",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list with the names of the columns that match the specified types.",
      "longDescription": "Returns a list with the names of the columns from table <code>table</code> that match the types specified in <code>listOfTypes</code>.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "listOfTypes",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter listOfTypes"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.ConformToPageReader",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "shapingFunction",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter shapingFunction"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Contains",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the specified record appears as a row in the table.",
      "longDescription": "Indicates whether the specified record, <code>row</code>, appears as a row in the <code>table</code>.\r\n    An optional parameter <code>equationCriteria</code> may be specified to control comparison between the rows of the table.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "row",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter row"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.ContainsAll",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether all of the specified records appear as rows in the table.",
      "longDescription": "Indicates whether all the specified records in the list of records <code>rows</code>, appear as rows in the <code>table</code>.\r\n    An optional parameter <code>equationCriteria</code> may be specified to control comparison between the rows of the table.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.ContainsAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether any of the specified records appear as rows in the table.",
      "longDescription": "Indicates whether any the specified records in the list of records <code>rows</code>, appear as rows in the <code>table</code>.\r\n    An optional parameter <code>equationCriteria</code> may be specified to control comparison between the rows of the table.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.ExpandListColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Given a column of lists in a table, create a copy of a row for each value in its list.",
      "longDescription": "Given a <code>table</code> where <code>column</code> contains a list of values, splits the list into a row for each value. Values in the other columns are duplicated in each new row created. This function can also expand nested tables by treating them as lists of records.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FillDown",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Propagates the value of a previous cell to the null-valued cells below in the column.",
      "longDescription": "Returns a table from the <code>table</code> specified where the value of a previous cell is propagated to the null-valued cells below in the <code>columns</code> specified.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FillUp",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Propagates the value of a cell to the null-valued cells above in the column.",
      "longDescription": "Returns a table from the <code>table</code> specified where the value of the next cell is propagated to the null-valued cells above in the <code>columns</code> specified.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FilterWithDataTable",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "dataTableIdentifier",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dataTableIdentifier"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.FindText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns all the rows that contain the given text in the table.",
      "longDescription": "Returns the rows in the table <code>table</code> that contain the text <code>text</code>. If the text is not found, an empty table is returned.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FirstN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first count rows specified.",
      "longDescription": "Returns the first row(s) of the table <code>table</code>, depending on the value of <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> If <code>countOrCondition</code> is a number, that many rows (starting at the top) will be returned. </li>\r\n    <li> If <code>countOrCondition</code> is a condition, the rows that meet the condition will be returned until a row does not meet the condition.</li>\r\n</ul>",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FromPartitions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table that is the result of combining a set of partitioned tables.",
      "longDescription": "Returns a table that is the result of combining a set of partitioned tables, <code>partitions</code>. <code>partitionColumn</code> is the name of the column to add. The type of the column defaults to <code>any</code>, but can be specified by <code>partitionColumnType</code>.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "partitionColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter partitionColumn"
      },
      {
        "name": "partitions",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter partitions"
      },
      {
        "name": "partitionColumnType",
        "type": "type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter partitionColumnType"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.HasColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the table contains the specified column(s).",
      "longDescription": "Indicates whether the <code>table</code> contains the specified column(s), <code>columns</code>. Returns <code>true</code> if the table contains the column(s), <code>false</code> otherwise.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.LastN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the last specified number of rows.",
      "longDescription": "Returns the last row(s) from the table, <code>table</code>, depending on the value of <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> If <code>countOrCondition</code> is a number, that many rows will be returned starting from position (end - <code>countOrCondition</code>). </li>\r\n    <li> If <code>countOrCondition</code> is a condition, the rows that meet the condition will be returned in ascending position until a row does not meet the condition.</li>\r\n</ul>",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.MatchesAllRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether all the rows in the table meet the given condition.",
      "longDescription": "Indicates whether all the rows in the <code>table</code> match the given <code>condition</code>. Returns <code>true</code> if all of the rows match, <code>false</code> otherwise.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.MatchesAnyRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether any the rows in the table meet the given condition.",
      "longDescription": "Indicates whether any the rows in the <code>table</code> match the given <code>condition</code>. Returns <code>true</code> if any of the rows match, <code>false</code> otherwise.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Table.Max",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the largest row or default value using the given criteria.",
      "longDescription": "Returns the largest row in the <code>table</code>, given the <code>comparisonCriteria</code>. If the table is empty, the optional <code>default</code> value is returned. ",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.Min",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the smallest row or a default value using the given criteria.",
      "longDescription": "Returns the smallest row in the <code>table</code>, given the <code>comparisonCriteria</code>. If the table is empty, the optional <code>default</code> value is returned.",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.PositionOf",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the position or positions of the row within the table.",
      "longDescription": "Returns the row position of the first occurrence of the <code>row</code> in the <code>table</code> specified. Returns -1 if no occurrence is found.\r\n    <ul>\r\n       <li><code>table</code>: The input table.</li>\r\n       <li><code>row</code>: The row in the table to find the position of.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Specifies which occurrences of the row to return.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Controls the comparison between the table rows.</li>\r\n    </ul>\r\n    ",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "row",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter row"
      },
      {
        "name": "occurrence",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.PositionOfAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the position or positions of any of the specified rows within the table.",
      "longDescription": "Returns the row(s) position(s) from the <code>table</code> of the first occurrence of the list of <code>rows</code>. Returns -1 if no occurrence is found.\r\n    <ul>\r\n    <li><code>table</code>: The input table.</li>\r\n       <li><code>rows</code>:  The list of rows in the table to find the positions of.</li>\r\n       <li><code>occurrence</code>: <i>[Optional]</i> Specifies which occurrences of the row to return.</li>\r\n       <li><code>equationCriteria</code>: <i>[Optional]</i> Controls the comparison between the table rows.</li>\r\n    </ul>\r\n    ",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      },
      {
        "name": "occurrence",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.PrefixColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table where the columns have all been prefixed with the given text.",
      "longDescription": "Returns a table where all the column names from the <code>table</code> provided are prefixed with the given text, <code>prefix</code>, plus a period in the form <code>prefix</code><code>.ColumnName</code>.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "prefix",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter prefix"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Range",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the rows beginning at the specified offset.",
      "longDescription": "Returns the rows from the <code>table</code> starting at the specified <code>offset</code>. An optional parameter, <code>count</code>, specifies how many rows to return. By default, all the rows after the offset are returned.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes the specified columns.",
      "longDescription": "Removes the specified <code>columns</code> from the <code>table</code> provided.\r\n    If the specified column doesn't exist, an error is raised unless the optional parameter <code>missingField</code> specifies an alternative behavior (for example, <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveMatchingRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all occurrences of the specified rows from the table.",
      "longDescription": "Removes all occurrences of the specified <code>rows</code> from the <code>table</code>.\r\n    An optional parameter <code>equationCriteria</code> may be specified to control the comparison between the rows of the table.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RemoveRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes the specified number of rows.",
      "longDescription": "Removes <code>count</code> of rows from the beginning of the <code>table</code>, starting at the <code>offset</code> specified. A default count of 1 is used if the <code>count</code> parameter isn't provided. ",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.RenameColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Applies rename(s) of the form {old, new}.",
      "longDescription": "Performs the given renames to the columns in table <code>table</code>. A replacement operation <code>renames</code> consists of a list of two values, the old column name and new column name, provided in a list.\r\n    If the column doesn't exist, an exception is thrown unless the optional parameter <code>missingField</code> specifies an alternative (eg. <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "renames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter renames"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReorderColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with the columns in the specified order.",
      "longDescription": "Returns a table from the input <code>table</code>, with the columns in the order specified by <code>columnOrder</code>. Columns that are not specified in the list will not be reordered.\r\n     If the column doesn't exist, an exception is thrown unless the optional parameter <code>missingField</code> specifies an alternative (eg. <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columnOrder",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnOrder"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Repeat",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Repeats the rows of the tables a specified number of times.",
      "longDescription": "Returns a table with the rows from the input <code>table</code> repeated the specified <code>count</code> times.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceErrorValues",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the error values in the specified columns with the corresponding specified value.",
      "longDescription": "Replaces the error values in the specified columns of the <code>table</code> with the new values in the <code>errorReplacement</code> list. The format of the list is {{column1, value1}, …}. There may only be one replacement value per column, specifying the column more than once will result in an error.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "errorReplacement",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter errorReplacement"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceKeys",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the keys of the specified table.",
      "longDescription": "Replaces the keys of the specified table.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "keys",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter keys"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceMatchingRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces all the specified rows with the provided row(s).",
      "longDescription": "Replaces all the specified rows in the <code>table</code> with the provided ones. The rows to replace and the replacements are specified in <code>replacements</code>, using {old, new} formatting.\r\n    An optional <code>equationCriteria</code> parameter may be specified to control comparison between the rows of the table.",
      "category": "Table.Membership"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "replacements",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter replacements"
      },
      {
        "name": "equationCriteria",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter equationCriteria"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplacePartitionKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the partition key of the specified table.",
      "longDescription": "Replaces the partition key of the specified table.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "partitionKey",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter partitionKey"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceRelationshipIdentity",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "identity",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter identity"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Table.SelectColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a table with only the specified columns.",
      "longDescription": "Returns the <code>table</code> with only the specified <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: The provided table.</li>\r\n       <li><code>columns</code>: The list of columns from the table <code>table</code> to return. Columns in the returned table are in the order listed in <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Optional)</i> What to do if the column does not exist.  Example: <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.SelectRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Selects the rows that meet the condition function.",
      "longDescription": "Returns a table of rows from the <code>table</code>, that matches the selection <code>condition</code>.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Sort",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Sorts the table using one or more column names and comparison criteria.",
      "longDescription": "Sorts the <code>table</code> using the list of one or more column names and optional <code>comparisonCriteria</code> in the form { { col1, comparisonCriteria }, {col2} }.",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Split",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Splits the specified table into a list of tables using the specified page size.",
      "longDescription": "Splits <code>table</code> into a list of tables where the first element of the list is a table containing the first <code>pageSize</code> rows from\r\n    the source table, the next element of the list is a table containing the next <code>pageSize</code> rows from the source table, and so on.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "pageSize",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pageSize"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.SplitAt",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list containing the first count rows specified and the remaining rows.",
      "longDescription": "Returns a list containing two tables: a table with the first N rows of <code>table</code> (as specified by <code>count</code>) and a table containing the remaining rows of <code>table</code>.\r\n\r\nIf the tables of the resulting list are enumerated exactly once and in order, the function will enumerate <code>table</code> only once.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.TransformColumnNames",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Transforms column names by using the given function.",
      "longDescription": "Transforms column names by using the given <code>nameGenerator</code> function. Valid options:\r\n    <div>\r\n      <code>MaxLength</code> specifies the maximum length of new column names. If the given function results with a longer column name, the long name will be trimmed.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> is used to control the comparison while generating new column names. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.\r\n    </div>\r\n    <div>\r\n      The following built-in comparers are available in the formula language:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform an exact ordinal case-insensitive comparison</li>\r\n      <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison</li>\r\n    </ul>\r\n    ",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "nameGenerator",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter nameGenerator"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.TransformColumnTypes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Applies type transformation(s) of the form { column, type } using a specific culture.",
      "longDescription": "Returns a table by applying the transform operations to the specified columns using an optional culture.\r\n<ul>\r\n  <li><code>table</code>: The input table to transform.</li>\r\n  <li><code>typeTransformations</code>: The type transformations to apply. The format for a single transformation is { column name, type value }. A list of transformations can be used to change the types of more than one column at a time. If a column doesn't exist, an error is raised.</li>\r\n  <li><code>culture</code>: (Optional) The culture to use when transforming the column types (for example, \"en-US\"). If a record is specified for <code>culture</code>, it can contain the following fields:</li>\r\n  <ul>\r\n    <li><code>Culture</code>: The culture to use when transforming the column types (for example, \"en-US\").</li>\r\n    <li><code>MissingField</code>: If a column doesn't exist, an error is raised unless this field provides an alternative behavior (for example, <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).</value></li>\r\n  </ul>\r\n</ul>\r\nThe type value in the <code>typeTransformations</code> parameter can be <code>any</code>, all of the <code>number</code> types, <code>text</code>, all of the <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, and <code>duration</code> types, <code>logical</code>, or <code>binary</code>. The <code>list</code>, <code>record</code>, <code>table</code>, or <code>function</code> types aren't valid for this parameter.<br>\r\n<br>\r\nFor each column listed in <code>typeTransformations</code>, the \".From\" method corresponding to the specified type value is normally used to perform the transformation. For example, if a <code>Currency.Type</code> type value is given for a column, the transformation function <code>Currency.From</code> is applied to each value in that column.\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "typeTransformations",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter typeTransformations"
      },
      {
        "name": "culture",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.TransformColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Transforms the values of one or more columns.",
      "longDescription": "Transforms <code>table</code> by applying each column operation listed in <code>transformOperations</code> (where the format is { column name, transformation } or { column name, transformation, new column type }).\r\n    If a <code>defaultTransformation</code> is specified, it will be applied to all columns not listed in <code>transformOperations</code>.\r\n    If a column listed in <code>transformOperations</code> doesn't exist, an exception is thrown unless the optional parameter <code>missingField</code> specifies an alternative (for example, <code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>).",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "transformOperations",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter transformOperations"
      },
      {
        "name": "defaultTransformation",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter defaultTransformation"
      },
      {
        "name": "missingField",
        "type": "MissingField.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter missingField"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.TransformRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Transforms the rows of the table using the specified transform function.",
      "longDescription": "Creates a <code>list</code> by applying the <code>transform</code> operation to each row in <code>table</code>.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "transform",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter transform"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.View",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates or extends a table with user-defined handlers for query and action operations.",
      "longDescription": "<p>Returns a view of <code>table</code> where the functions specified in <code>handlers</code> are used in lieu of the default behavior of an operation when the operation is applied to the view.</p>\r\n<p>If <code>table</code> is provided, all handler functions are optional. If <code>table</code> isn't provided, the <code>GetType</code> and <code>GetRows</code> handler functions are required. If a handler function isn't specified for an operation, the default behavior of the operation is applied to <code>table</code> instead (except in the case of <code>GetExpression</code>).</p>\r\n<p>Handler functions must return a value that is semantically equivalent to the result of applying the operation against <code>table</code> (or the resulting view in the case of <code>GetExpression</code>).</p>\r\n<p>If a handler function raises an error, the default behavior of the operation is applied to the view.</p>\r\n<p><code>Table.View</code> can be used to implement folding to a data source – the translation of M queries into source-specific queries (for example, to create T-SQL statements from M queries).</p>\r\n<p>Refer to the published Power Query custom connector documentation for a more complete description of <code>Table.View</code>.</p>",
      "category": "Table.Table construction"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "handlers",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter handlers"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.WithErrorContext",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "context",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter context"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.AfterDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Text.AfterDelimiter",
      "longDescription": "Returns the portion of <code>text</code> after the specified <code>delimiter</code>.\r\n    An optional numeric <code>index</code> indicates which occurrence of the <code>delimiter</code> should be considered.\r\n    An optional list <code>index</code> indicates which occurrence of the <code>delimiter</code> should be considered, as well as whether indexing should be done from the start or end of the input.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "delimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiter"
      },
      {
        "name": "index",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter index"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.At",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the character at the specified position.",
      "longDescription": "Returns the character in the text value, <code>text</code> at position <code>index</code>. The first character in the text is at position 0.",
      "category": "Text.Extraction"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "index",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter index"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.BeforeDelimiter",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Text.BeforeDelimiter",
      "longDescription": "Returns the portion of <code>text</code> before the specified <code>delimiter</code>.\r\n    An optional numeric <code>index</code> indicates which occurrence of the <code>delimiter</code> should be considered.\r\n    An optional list <code>index</code> indicates which occurrence of the <code>delimiter</code> should be considered, as well as whether indexing should be done from the start or end of the input.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "delimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter delimiter"
      },
      {
        "name": "index",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter index"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.Contains",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns whether the text contains the substring.",
      "longDescription": "Detects whether <code>text</code> contains the value <code>substring</code>. Returns true if the value is found. This function doesn't support wildcards or regular expressions.\r\n      <br>\r\n      <br>\r\n      The optional argument <code>comparer</code> can be used to specify case-insensitive or culture and locale-aware comparisons.\r\n      The following built-in comparers are available in the formula language:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform a case-sensitive ordinal comparison</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform a case-insensitive ordinal comparison</li>\r\n        <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison</li>\r\n      </ul>\r\n      <br>\r\n      <br>\r\n      If the first argument is null, this function returns null.\r\n      <br>\r\n      <br>\r\n      All characters are treated literally. For example, \"DR\", \" DR\", \"DR \", and \" DR \" aren't considered equal to each other.\r\n    ",
      "category": "Text.Membership"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "substring",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter substring"
      },
      {
        "name": "comparer",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparer"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Text.End",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the last characters of the text.",
      "longDescription": "Returns a <code>text</code> value that is the last <code>count</code> characters of the <code>text</code> value <code>text</code>.",
      "category": "Text.Extraction"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.EndsWith",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the text ends in the specified value.",
      "longDescription": "Indicates whether the given text, <code>text</code>, ends with the specified value, <code>substring</code>. The indication is case sensitive.\r\n\r\n      <div>\r\n        <code>comparer</code> is a <code>Comparer</code> which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.\r\n      </div>\r\n      <div>\r\n        The following built-in comparers are available in the formula language:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform an exact ordinal case-insensitive comparison</li>\r\n        <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison</li>\r\n      </ul>",
      "category": "Text.Membership"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "substring",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter substring"
      },
      {
        "name": "comparer",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparer"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Text.Format",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns formatted text from a format string and arguments.",
      "longDescription": "Returns formatted text that is created by applying <code>arguments</code> from a list or record to a format string <code>formatString</code>. An optional <code>culture</code> may also be provided (for example, \"en-US\").",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [
      {
        "name": "formatString",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter formatString"
      },
      {
        "name": "arguments",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter arguments"
      },
      {
        "name": "culture",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter culture"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Middle",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the substring up to a specific length.",
      "longDescription": "Returns <code>count</code> characters, or through the end of <code>text</code>; at the offset <code>start</code>.",
      "category": "Text.Extraction"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "start",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.PadEnd",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns text of a specified length by padding the end of the given text.",
      "longDescription": "Returns a <code>text</code> value padded to length <code>count</code> by inserting spaces at the end of the text value <code>text</code>.\r\n    An optional character <code>character</code> can be used to specify the character used for padding. The default pad character is a space.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "character",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter character"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.PadStart",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns text of a specified length by padding the start of the given text.",
      "longDescription": "Returns a <code>text</code> value padded to length <code>count</code> by inserting spaces at the start of the text value <code>text</code>.\r\n    An optional character <code>character</code> can be used to specify the character used for padding. The default pad character is a space.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "character",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter character"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.PositionOf",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first position of the value (-1 if not found).",
      "longDescription": "Returns the position of the specified occurrence of the text value <code>substring</code> found in <code>text</code>.\r\n    An optional parameter <code>occurrence</code> may be used to specify which occurrence position to return (first occurrence by default).\r\n    Returns -1 if <code>substring</code> was not found.\r\n\r\n      <div>\r\n        <code>comparer</code> is a <code>Comparer</code> which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.\r\n      </div>\r\n      <div>\r\n        The following built-in comparers are available in the formula language:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform an exact ordinal case-insensitive comparison</li>\r\n        <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison</li>\r\n      </ul>",
      "category": "Text.Membership"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "substring",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter substring"
      },
      {
        "name": "occurrence",
        "type": "Occurrence.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      },
      {
        "name": "comparer",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparer"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.PositionOfAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the first position in the text value of any listed character (-1 if not found).",
      "longDescription": "Returns the first position of any character in the list <code>characters</code> that is found in <code>text</code>.\r\n    An optional parameter <code>occurrence</code> may be used to specify which occurrence position to return.",
      "category": "Text.Membership"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "characters",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter characters"
      },
      {
        "name": "occurrence",
        "type": "Occurrence.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter occurrence"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.Range",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the substring found at offset.",
      "longDescription": "Returns the substring from the text <code>text</code> found at the offset <code>offset</code>.\r\n    An optional parameter, <code>count</code>, can be included to specify how many characters to return. Throws an error if there aren't enough characters.",
      "category": "Text.Extraction"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Remove",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes all occurrences of the given character or list of characters from the input text value.",
      "longDescription": "Returns a copy of the text value <code>text</code> with all the characters from <code>removeChars</code> removed.  ",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "removeChars",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter removeChars"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.RemoveRange",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes a count of characters starting at the given offset",
      "longDescription": "Returns a copy of the text value <code>text</code> with all the characters from position <code>offset</code> removed.\r\n    An optional parameter, <code>count</code> can by used to specify the number of characters to remove. The default value of <code>count</code> is 1. Position values start at 0.",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Repeat",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a text value composed of the input text repeated a specified number of times.",
      "longDescription": "Returns a text value composed of the input text <code>text</code> repeated <code>count</code> times.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Select",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Selects all occurrences of the given character or list of characters from the input text value.",
      "longDescription": "Returns a copy of the text value <code>text</code> with all the characters not in <code>selectChars</code> removed.  ",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "selectChars",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter selectChars"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.Split",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Splits text into a list of text values based upon a specified delimiter.",
      "longDescription": "Returns a list of text values resulting from the splitting of a text value based on the specified delimiter.\r\n    <ul>\r\n      <li><code>text</code>: The text value to split.</li>\r\n      <li><code>separator</code>: The delimiter used to split the text. The delimiter can be either a single character or a sequence of characters. If a sequence of characters is used, the text is split only at instances where the exact sequence occurs.</li>\r\n    </ul>",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "separator",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter separator"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Text.SplitAny",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list of text values, split on any of the characters in the delimiter.",
      "longDescription": "Returns a list of text values resulting from the splitting of a text value based on any character specified in the delimiter.\r\n    <ul>\r\n      <li><code>text</code>: The text value to split.</li>\r\n      <li><code>separators</code>: The delimiter characters used to split the text.</li>\r\n    </ul>",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "separators",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter separators"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Text.Start",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the start of the text.",
      "longDescription": "Returns the first <code>count</code> characters of <code>text</code> as a text value.",
      "category": "Text.Extraction"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.StartsWith",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Indicates whether the text starts with a specified value.",
      "longDescription": "Returns true if text value <code>text</code> starts with text value <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> A <code>text</code> value which is to be searched.</li>\r\n        <li><code>substring</code>: <i></i> A <code>text</code> value which is the substring to be searched for in <code>text</code>.</li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> A <code>Comparer</code> used for controlling the comparison. For example, <code>Comparer.OrdinalIgnoreCase</code> may be used to perform case-insensitive searches.</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> is a <code>Comparer</code> which is used to control the comparison. Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.\r\n      </div>\r\n      <div>\r\n        The following built-in comparers are available in the formula language:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform an exact ordinal case-insensitive comparison.</li>\r\n        <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison.</li>\r\n      </ul>",
      "category": "Text.Membership"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "substring",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter substring"
      },
      {
        "name": "comparer",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparer"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Type.ForFunction",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a type that represents functions with specific parameter and return type constraints.",
      "longDescription": "Creates a <code>function type</code> from <code>signature</code>, a record of <code>ReturnType</code> and <code>Parameters</code>, and <code>min</code>, the minimum number of arguments required to invoke the function.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "signature",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter signature"
      },
      {
        "name": "min",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter min"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.ForRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a type that represents records with specific type constraints on fields.",
      "longDescription": "Returns a type that represents records with specific type constraints on fields.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "fields",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fields"
      },
      {
        "name": "open",
        "type": "logical",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter open"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.Is",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Determines if a value of the first type is always compatible with the second type.",
      "longDescription": "Determines if a value of <code>type1</code> is always compatible with <code>type2</code>. Parameter <code>type2</code> should be a primitive (or nullable primitive) type value. Otherwise, this function's behavior is undefined and shouldn't be relied on.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type1",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type1"
      },
      {
        "name": "type2",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type2"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Type.ReplaceFacets",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the facets of a type.",
      "longDescription": "Replaces the facets of <code>type</code> with the facets contained in the record <code>facets</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      },
      {
        "name": "facets",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter facets"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.ReplaceTableKeys",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a new table type with all keys replaced by the specified list of keys.",
      "longDescription": "Returns a new table type with all keys replaced by the specified list of keys.<br>\r\n    <br>\r\n    Each key is defined using a record in the following form:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: a list of the column names that define the key\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> if the key is the table's primary key; otherwise, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    The specified list of keys is validated to ensure that no more than one primary key is defined and that all key column names exist on the table type.\r\n    ",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      },
      {
        "name": "keys",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter keys"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.ReplaceTablePartitionKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a new table type with the partition key replaced by the specified partition key.",
      "longDescription": "Returns a new table type with the partition key replaced by the specified partition key.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      },
      {
        "name": "partitionKey",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter partitionKey"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Type.TableColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the type of a column in a table.",
      "longDescription": "Returns the type of the column <code>column</code> in the table type <code>tableType</code>.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "tableType",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter tableType"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "Uri.Combine",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an absolute URI that is the combination of the input base URI and relative URI.",
      "longDescription": "Returns an absolute URI that is the combination of the input <code>baseUri</code> and <code>relativeUri</code>.",
      "category": "Uri"
    },
    "functionParameters": [
      {
        "name": "baseUri",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter baseUri"
      },
      {
        "name": "relativeUri",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter relativeUri"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Value.Add",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the sum of the two values.",
      "longDescription": "Returns the sum of <code>value1</code> and <code>value2</code>. An optional <code>precision</code> parameter may be specified, by default <code>Precision.Double</code> is used.",
      "category": "Values.Arithmetic operations"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.As",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the value if it is compatible with the specified type.",
      "longDescription": "Returns the value if it is compatible with the specified type. This is equivalent to the \"as\" operator in M, with the exception that it can accept identifier type references such as Number.Type.",
      "category": "Values.Types"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Compare",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.",
      "longDescription": "Returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.",
      "category": "Values"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "number"
  },
  {
    "name": "Value.Divide",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the result of dividing the first value by the second.",
      "longDescription": "Returns the result of dividing <code>value1</code> by <code>value2</code>. An optional <code>precision</code> parameter may be specified, by default <code>Precision.Double</code> is used.",
      "category": "Values.Arithmetic operations"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Equals",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns whether two values are equal.",
      "longDescription": "Returns true if value <code>value1</code> is equal to value <code>value2</code>, false otherwise.",
      "category": "Values"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Value.Is",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Determines whether a value is compatible with the specified type.",
      "longDescription": "Determines whether a value is compatible with the specified type. This is equivalent to the \"is\" operator in M, with the exception that it can accept identifier type references such as Number.Type.",
      "category": "Values.Types"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Value.Multiply",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the product of the two values.",
      "longDescription": "Returns the product of multiplying <code>value1</code> by <code>value2</code>. An optional <code>precision</code> parameter may be specified, by default <code>Precision.Double</code> is used.",
      "category": "Values.Arithmetic operations"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.NativeQuery",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Evaluates a query against a target.",
      "longDescription": "<p>Evaluates <code>query</code> against <code>target</code> using the parameters specified in <code>parameters</code> and the options specified in <code>options</code>.</p>\r\n<p>The output of the query is defined by <code>target</code>.</p>\r\n<p><code>target</code> provides the context for the operation described by <code>query</code>.</p>\r\n<p><code>query</code> describes the query to be executed against <code>target</code>. <code>query</code> is expressed in a manner specific to <code>target</code> (for example, a T-SQL statement).</p>\r\n<p>The optional <code>parameters</code> value may contain either a list or record as appropriate to supply the parameter values expected by <code>query</code>.</p>\r\n<p>The optional <code>options</code> record may contain options that affect the evaluation behavior of <code>query</code> against <code>target</code>. These options are specific to <code>target</code>.</p>",
      "category": "Values"
    },
    "functionParameters": [
      {
        "name": "target",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter target"
      },
      {
        "name": "query",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter query"
      },
      {
        "name": "parameters",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter parameters"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.NullableEquals",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns whether two values are equal.",
      "longDescription": "Returns null if either argument '<code>value1</code>', '<code>value2</code>' is null, otherwise equivalent to Value.Equals.",
      "category": "Values"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Value.ReplaceMetadata",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the input's metadata information.",
      "longDescription": "Replaces the input's metadata information.",
      "category": "Metadata"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "metaValue",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter metaValue"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.ReplaceType",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the value's type.",
      "longDescription": "Replaces the <code>value</code>'s type with the provided <code>type</code>.",
      "category": "Values.Types"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "type",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter type"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Value.Subtract",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the difference of the two values.",
      "longDescription": "Returns the difference of <code>value1</code> and <code>value2</code>. An optional <code>precision</code> parameter may be specified, by default <code>Precision.Double</code> is used.",
      "category": "Values.Arithmetic operations"
    },
    "functionParameters": [
      {
        "name": "value1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value1"
      },
      {
        "name": "value2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value2"
      },
      {
        "name": "precision",
        "type": "Precision.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter precision"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "WebAction.Request",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Creates an action that, when executed, will return the results of performing an HTTP request as a binary value.",
      "longDescription": "Creates an action that, when executed, will return the results of performing a <code>method</code> request against <code>url</code> using HTTP as a binary value.\r\n    An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>Query</code> : Programmatically add query parameters to the URL without having to worry about escaping.</li>\r\n<li><code>ApiKeyName</code> : If the target site has a notion of an API key, this parameter can be used to specify the name (not the value) of the key parameter that must be used in the URL. The actual key value is provided in the credential.</li>\r\n<li><code>Headers</code> : Specifying this value as a record will supply additional headers to an HTTP request.</li>\r\n<li><code>Timeout</code> : Specifying this value as a duration will change the timeout for an HTTP request. The default value is 100 seconds.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Specifying this value as a list will exclude these HTTP header keys from being part of the calculation for caching data.</li>\r\n<li><code>IsRetry</code> : Specifying this logical value as true will ignore any existing response in the cache when fetching data.</li>\r\n<li><code>ManualStatusHandling</code> : Specifying this value as a list will prevent any builtin handling for HTTP requests whose response has one of these status codes.</li>\r\n<li><code>RelativePath</code> : Specifying this value as text appends it to the base URL before making the request.</li>\r\n<li><code>Content</code> : Specifying this value will cause its contents to become the body of the HTTP request.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Note that this function is disabled in most contexts. Consider using Web.Contents or Web.Headers instead.\r\n    ",
      "category": "Action"
    },
    "functionParameters": [
      {
        "name": "method",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter method"
      },
      {
        "name": "url",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter url"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "action"
  },
  {
    "name": "ActiveDirectory.Domains",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.",
      "longDescription": "Returns a list of Active Directory domains in the same forest as the specified domain or of the current machine's domain if none is specified.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "forestRootDomainName",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter forestRootDomainName"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AdoDotNet.Query",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the result of running a native query on an ADO.NET data source.",
      "longDescription": "Returns the result of running <code>query</code> with the connection string <code>connectionString</code> using the ADO.NET provider <code>providerName</code>. <code>connectionString</code> can be text or a record of property value pairs. Property values can either be text or number. An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : A duration that controls how long the server-side query is allowed to run before it is canceled. The default value is ten minutes.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : A logical (true/false) that determines whether to produce SQL Server-compatible connection string options for Windows authentication. The default value is true.</li>\r\n</ul>\r\n",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "providerName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter providerName"
      },
      {
        "name": "connectionString",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter connectionString"
      },
      {
        "name": "query",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter query"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "AdobeAnalytics.Cubes",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the report suites in Adobe Analytics.",
      "longDescription": "Returns a table of multidimensional packages from Adobe Analytics. An optional record parameter, <code>options</code>, may be specified to control the following options:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : A logical (true/false) that sets whether to view the tables grouped by their schema names (default is false).</li>\r\n<li><code>MaxRetryCount</code> : The number of retries to perform when polling for the result of the query. The default value is 120.</li>\r\n<li><code>RetryInterval</code> : The duration of time between retry attempts. The default value is 1 second.</li>\r\n<li><code>Implementation</code> : Specifies Adobe Analytics API version. Valid values are: &quot;2.0&quot;. Default uses API version 1.4.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "BinaryFormat.Binary",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a binary format that reads a binary value.",
      "longDescription": "Returns a binary format that reads a binary value.  If <code>length</code> is specified, the binary value will contain that many bytes.  If <code>length</code> is not specified, the binary value will contain the remaining bytes.  The <code>length</code> can be specified either as a number, or as a binary format of the length that precedes the binary data.",
      "category": "Binary Formats.Reading binary data"
    },
    "functionParameters": [
      {
        "name": "length",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter length"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Comparer.Equals",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a logical value based on the equality check over the two given values.",
      "longDescription": "Returns a <code>logical</code> value based on the equality check over the two given values, <code>x</code> and <code>y</code>, using the provided <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> is a <code>Comparer</code> which is used to control the comparison.\r\n        A comparer is a function that accepts two arguments and returns -1, 0, or 1 based on whether the first value is less than, equal to, or greater than the second.\r\n        Comparers can be used to provide case-insensitive or culture and locale-aware comparisons.\r\n      </div>\r\n      <div>\r\n        The following built-in comparers are available in the formula language:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Used to perform an exact ordinal comparison</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Used to perform an exact ordinal case-insensitive comparison</li>\r\n        <li> <code>Comparer.FromCulture</code>: Used to perform a culture-aware comparison</li>\r\n      </ul>",
      "category": "Comparer"
    },
    "functionParameters": [
      {
        "name": "comparer",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparer"
      },
      {
        "name": "x",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter x"
      },
      {
        "name": "y",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter y"
      }
    ],
    "returnType": "logical"
  },
  {
    "name": "Cube.AddAndExpandDimensionColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Merges the specified dimension table into the cube’s filter context and changes the dimensional granularity of the filter context by expanding the specified set of dimension attributes.",
      "longDescription": "Merges the specified dimension table, <code>dimensionSelector</code>, into the cube’s, <code>cube</code>, filter context and changes the dimensional granularity by expanding the specified set, <code>attributeNames</code>, of dimension attributes. The dimension attributes are added to the tabular view with columns named <code>newColumnNames</code>, or <code>attributeNames</code> if not specified.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "dimensionSelector",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter dimensionSelector"
      },
      {
        "name": "attributeNames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attributeNames"
      },
      {
        "name": "newColumnNames",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter newColumnNames"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Cube.AddMeasureColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a column to the cube that contains the results of the measure applied in the row context of each row.",
      "longDescription": "Adds a column with the name <code>column</code> to the <code>cube</code> that contains the results of the measure <code>measureSelector</code> applied in the row context of each row. Measure application is affected by changes to dimension granularity and slicing. Measure values will be adjusted after certain cube operations are performed.",
      "category": "Cube"
    },
    "functionParameters": [
      {
        "name": "cube",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter cube"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      },
      {
        "name": "measureSelector",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter measureSelector"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "DateTime.FixedLocalNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date and time in the local timezone. This value is fixed and will not change with successive calls.",
      "longDescription": "Returns a <code>datetime</code> value set to the current date and time on the system. This value is fixed and will not change with successive calls, unlike DateTime.LocalNow, which may return different values over the course of execution of an expression.",
      "category": "DateTime"
    },
    "functionParameters": [],
    "returnType": "datetime"
  },
  {
    "name": "DateTime.LocalNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date and time in the local timezone.",
      "longDescription": "Returns a <code>datetime</code> value set to the current date and time on the system.<br>\r\n      <br>\r\n      The value returned by this function depends on whether you're running your query on a local machine or online. For example, if you run your query on a system located in the U.S. Pacific Time zone, Power Query Desktop returns the date and time set on your local machine. However, if you run your query on the cloud, Power Query Online returns UTC time because it's reading the time set on the cloud virtual machines, which are all set to UTC.",
      "category": "DateTime"
    },
    "functionParameters": [],
    "returnType": "datetime"
  },
  {
    "name": "DateTimeZone.FixedLocalNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date & time in the local timezone. This value is fixed and will not change with successive calls.",
      "longDescription": "Returns a <code>datetime</code> value set to the current date and time on the system. The returned value contains timezone information representing the local timezone. This value is fixed and will not change with successive calls, unlike DateTimeZone.LocalNow, which may return different values over the course of execution of an expression.",
      "category": "DateTimeZone"
    },
    "functionParameters": [],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.FixedUtcNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.",
      "longDescription": "Returns the current date and time in UTC (the GMT timezone). This value is fixed and will not change with successive calls.",
      "category": "DateTimeZone"
    },
    "functionParameters": [],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.LocalNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date & time in the local timezone.",
      "longDescription": "Returns a <code>datetimezone</code> value set to the current date and time on the system.\r\n    The returned value contains timezone information representing the local timezone.",
      "category": "DateTimeZone"
    },
    "functionParameters": [],
    "returnType": "datetimezone"
  },
  {
    "name": "DateTimeZone.UtcNow",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the current date and time in UTC (the GMT timezone).",
      "longDescription": "Returns the current date and time in UTC (the GMT timezone).",
      "category": "DateTimeZone"
    },
    "functionParameters": [],
    "returnType": "datetimezone"
  },
  {
    "name": "Diagnostics.ActivityId",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an opaque identifier for the currently-running evaluation.",
      "longDescription": "Returns an opaque identifier for the currently-running evaluation.",
      "category": "Diagnostics"
    },
    "functionParameters": [],
    "returnType": "text"
  },
  {
    "name": "Diagnostics.CorrelationId",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns an opaque identifier to correlate incoming requests with outgoing ones.",
      "longDescription": "Returns an opaque identifier to correlate incoming requests with outgoing ones.",
      "category": "Diagnostics"
    },
    "functionParameters": [],
    "returnType": "text"
  },
  {
    "name": "Diagnostics.Trace",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Writes a trace entry, if tracing is enabled, and returns the value.",
      "longDescription": "Writes a trace <code>message</code>, if tracing is enabled, and returns <code>value</code>. An optional parameter <code>delayed</code> specifies whether to delay the evaluation of <code>value</code> until the message is traced. <code>traceLevel</code> can take one of the following values:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
      "category": "Diagnostics"
    },
    "functionParameters": [
      {
        "name": "traceLevel",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter traceLevel"
      },
      {
        "name": "message",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter message"
      },
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "delayed",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter delayed"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Excel.CurrentWorkbook",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the contents of the current Excel workbook.",
      "longDescription": "Returns the contents of the current Excel workbook. It returns tables, named ranges, and dynamic arrays. Unlike <code>Excel.Workbook</code>, it does not return sheets.",
      "category": "Accessing data"
    },
    "functionParameters": [],
    "returnType": "table"
  },
  {
    "name": "Exchange.Contents",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns a table of contents from a Microsoft Exchange account.",
      "longDescription": "Returns a table of contents from the Microsoft Exchange account <code>mailboxAddress</code>. If <code>mailboxAddress</code> is not specified, the default account for the credential will be used.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "mailboxAddress",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter mailboxAddress"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "GoogleAnalytics.Accounts",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns Google Analytics accounts.",
      "longDescription": "Returns Google Analytics accounts that are accessible from the current credential.",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "IdentityProvider.Default",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "The default identity provider for the current host.",
      "longDescription": "The default identity provider for the current host.",
      "category": "Accessing data"
    },
    "functionParameters": [],
    "returnType": "any"
  },
  {
    "name": "List.Accumulate",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Accumulates a summary value from the items in the list.",
      "longDescription": "Accumulates a summary value from the items in the list <code>list</code>, using <code>accumulator</code>.\r\n    An optional seed parameter, <code>seed</code>, may be set.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "seed",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter seed"
      },
      {
        "name": "accumulator",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter accumulator"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "List.DateTimeZones",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of datetimezone values given an initial value, count, and incremental duration value.",
      "longDescription": "Returns a list of <code>datetimezone</code> values of size <code>count</code>, starting at <code>start</code>. The given increment, <code>step</code>, is a <code>duration</code> value that is added to every value.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "datetimezone",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "step",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter step"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.DateTimes",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of datetime values given an initial value, count, and incremental duration value.",
      "longDescription": "Returns a list of <code>datetime</code> values of size <code>count</code>, starting at <code>start</code>. The given increment, <code>step</code>, is a <code>duration</code> value that is added to every value.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "datetime",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "step",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter step"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Dates",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of date values given an initial value, count, and incremental duration value.",
      "longDescription": "Returns a list of <code>date</code> values of size <code>count</code>, starting at <code>start</code>. The given increment, <code>step</code>, is a <code>duration</code> value that is added to every value.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "date",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "step",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter step"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Durations",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of duration values given an initial value, count, and incremental duration value.",
      "longDescription": "Returns a list of <code>count</code> <code>duration</code> values, starting at <code>start</code> and incremented by the given <code>duration</code> <code>step</code>.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "step",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter step"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Generate",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of values.",
      "longDescription": "Generates a list of values using the provided functions. The <code>initial</code> function generates a starting candidate value, which is then tested against <code>condition</code>.\r\n    If the candidate value is approved, then it's returned as part of the resulting list, and the next candidate value is generated by passing the newly approved value to <code>next</code>.\r\n    Once a candidate value fails to match <code>condition</code>, the list generation process stops.\r\n    An optional parameter, <code>selector</code>, may also be provided to transform the items in the resulting list.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "initial",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter initial"
      },
      {
        "name": "condition",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter condition"
      },
      {
        "name": "next",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter next"
      },
      {
        "name": "selector",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter selector"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.InsertRange",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Inserts values into a list at the given index.",
      "longDescription": "Returns a new list produced by inserting the values in <code>values</code> into <code>list</code> at <code>index</code>. The first position in the list is at index 0.\r\n      <ul>\r\n        <li><code>list</code>: The target list where values are to be inserted.</li>\r\n        <li><code>index</code>: The index of the target list(<code>list</code>) where the values are to be inserted. The first position in the list is at index 0.</li>\r\n        <li><code>values</code>: The list of values which are to be inserted into <code>list</code>.</li>\r\n      </ul>",
      "category": "List.Selection"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "index",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter index"
      },
      {
        "name": "values",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter values"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.ReplaceRange",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces count number of values starting at position with the replacement values.",
      "longDescription": "Replaces <code>count</code> values in the <code>list</code> with the list <code>replaceWith</code>, starting at specified position, <code>index</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "index",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter index"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "replaceWith",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter replaceWith"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.ReplaceValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Searches a list for the specified value and replaces it.",
      "longDescription": "Searches a list of values, <code>list</code>, for the value <code>oldValue</code> and replaces each occurrence with the replacement value <code>newValue</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "oldValue",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter oldValue"
      },
      {
        "name": "newValue",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newValue"
      },
      {
        "name": "replacer",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter replacer"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.Times",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Generates a list of time values given an initial value, count, and incremental duration value.",
      "longDescription": "Returns a list of <code>time</code> values of size <code>count</code>, starting at <code>start</code>. The given increment, <code>step</code>, is a <code>duration</code> value that is added to every value.",
      "category": "List.Generators"
    },
    "functionParameters": [
      {
        "name": "start",
        "type": "time",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter start"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "step",
        "type": "duration",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter step"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "List.TransformMany",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a list whose elements are transformed from the input list using specified functions.",
      "longDescription": "Returns a list whose elements are projected from the input list.<br>\r\n    <br>\r\n    The <code>collectionTransform</code> function transforms each element into an intermediate list, and the <code>resultTransform</code> function receives the original element as well as an item from the intermediate list in order to construct the final result.<br>\r\n    <br>\r\n    The <code>collectionTransform</code> function has the signature <code>(x as any) as list => ...</code>, where <code>x</code> is an element in <code>list</code>.\r\n    The <code>resultTransform</code> function projects the shape of the result and has the signature <code>(x as any, y as any) as any => ...</code>, where <code>x</code> is an element in <code>list</code> and <code>y</code> is an element from the list generated by passing <code>x</code> to <code>collectionTransform</code>.",
      "category": "List.Transformation functions"
    },
    "functionParameters": [
      {
        "name": "list",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter list"
      },
      {
        "name": "collectionTransform",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter collectionTransform"
      },
      {
        "name": "resultTransform",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter resultTransform"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Module.Versions",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a record of module versions for the current module and its dependencies.",
      "longDescription": "Returns a record of module versions for the current module and its dependencies.",
      "category": "Values.Implementation"
    },
    "functionParameters": [],
    "returnType": "record"
  },
  {
    "name": "Number.Random",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a random number.",
      "longDescription": "Returns a random number between 0 and 1.",
      "category": "Number.Random"
    },
    "functionParameters": [],
    "returnType": "number"
  },
  {
    "name": "Progress.DataSourceProgress",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "This function is intended for internal use only.",
      "longDescription": "This function is intended for internal use only.",
      "category": "Values.Implementation"
    },
    "functionParameters": [],
    "returnType": "any"
  },
  {
    "name": "Record.AddField",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a field to a record.",
      "longDescription": "Adds a field to a record <code>record</code>, given the name of the field <code>fieldName</code> and the value <code>value</code>.",
      "category": "Record.Transformations"
    },
    "functionParameters": [
      {
        "name": "record",
        "type": "record",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter record"
      },
      {
        "name": "fieldName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fieldName"
      },
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "delayed",
        "type": "logical",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter delayed"
      }
    ],
    "returnType": "record"
  },
  {
    "name": "Replacer.ReplaceText",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces text within the provided input.",
      "longDescription": "Replaces the <code>old</code> text in the original <code>text</code> with the <code>new</code> text. This replacer function can be used in <code>List.ReplaceValue</code> and <code>Table.ReplaceValue</code>.",
      "category": "Replacer"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "old",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter old"
      },
      {
        "name": "new",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter new"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Replacer.ReplaceValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces values within the provided input.",
      "longDescription": "Replaces the <code>old</code> value in the original <code>value</code> with the <code>new</code> value. This replacer function can be used in <code>List.ReplaceValue</code> and <code>Table.ReplaceValue</code>.",
      "category": "Replacer"
    },
    "functionParameters": [
      {
        "name": "value",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter value"
      },
      {
        "name": "old",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter old"
      },
      {
        "name": "new",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter new"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Salesforce.Data",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the objects from the Salesforce account.",
      "longDescription": "Returns the objects on the Salesforce account provided in the credentials. The account will be connected through the provided environment <code>loginUrl</code>. If no environment is provided then the account will connect to production (https://login.salesforce.com). An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : A logical (true/false) that sets whether to generate navigation properties on the returned values (default is false).</li>\r\n<li><code>ApiVersion</code> : The Salesforce API version to use for this query. When not specified, API version 29.0 is used.</li>\r\n<li><code>Timeout</code> : A duration that controls how long to wait before abandoning the request to the server. The default value is source-specific.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "loginUrl",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter loginUrl"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Salesforce.Reports",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the reports from the Salesforce account.",
      "longDescription": "Returns the reports on the Salesforce account provided in the credentials. The account will be connected through the provided environment <code>loginUrl</code>. If no environment is provided then the account will connect to production (https://login.salesforce.com). An optional record parameter, <code>options</code>, may be provided to specify additional properties. The record can contain the following fields:\r\n    <ul>\r\n<li><code>ApiVersion</code> : The Salesforce API version to use for this query. When not specified, API version 29.0 is used.</li>\r\n<li><code>Timeout</code> : A duration that controls how long to wait before abandoning the request to the server. The default value is source-specific.</li>\r\n</ul>\r\n\r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "loginUrl",
        "type": "text",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter loginUrl"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "SapBusinessWarehouse.Cubes",
    "type": "function",
    "isDataSource": true,
    "documentation": {
      "description": "Returns the InfoCubes and queries in an SAP Business Warehouse system grouped by InfoArea.",
      "longDescription": "Returns a table of InfoCubes and queries grouped by InfoArea from an SAP Business Warehouse instance at server <code>server</code> with system number <code>systemNumberOrSystemId</code> and Client ID <code>clientId</code>. An optional record parameter, <code>optionsOrLogonGroup</code>, may be specified to control the following options:\r\n    \r\n    ",
      "category": "Accessing data"
    },
    "functionParameters": [
      {
        "name": "server",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter server"
      },
      {
        "name": "systemNumberOrSystemId",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter systemNumberOrSystemId"
      },
      {
        "name": "clientId",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter clientId"
      },
      {
        "name": "optionsOrLogonGroup",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter optionsOrLogonGroup"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Splitter.SplitByNothing",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that does no splitting, returning its argument as a single element list.",
      "longDescription": "Returns a function that does no splitting, returning its argument as a single element list.",
      "category": "Splitter"
    },
    "functionParameters": [],
    "returnType": "function"
  },
  {
    "name": "Splitter.SplitTextByWhitespace",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a function that splits text into a list of text at whitespace.",
      "longDescription": "Returns a function that splits text into a list of text at whitespace.",
      "category": "Splitter"
    },
    "functionParameters": [
      {
        "name": "quoteStyle",
        "type": "QuoteStyle.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter quoteStyle"
      }
    ],
    "returnType": "function"
  },
  {
    "name": "Table.AddColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a column with the specified name. The value is computed using the specified selection function with each row taken as an input.",
      "longDescription": "Adds a column named <code>newColumnName</code> to the table <code>table</code>. The values for the column are computed using the specified selection function <code>columnGenerator</code> with each row taken as an input.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "columnGenerator",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnGenerator"
      },
      {
        "name": "columnType",
        "type": "type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columnType"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AddFuzzyClusterColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a new column with representative values obtained by fuzzy grouping values of the specified column in the table.",
      "longDescription": "Adds a new column <code>newColumnName</code> to <code>table</code> with representative values of <code>columnName</code>. The representatives are obtained by fuzzily matching values in <code>columnName</code>, for each row.\r\n    <p>An optional set of <code>options</code> may be included to specify how to compare the key columns. Options include:\r\n    <ul>\r\n<li><code>Culture</code> : Allows grouping records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of &quot;ja-JP&quot; groups records based on the Japanese culture. The default value is &quot;&quot;, which groups based on the Invariant English culture.</li>\r\n<li><code>IgnoreCase</code> : A logical (true/false) value that allows case-insensitive key grouping. For example, when true, &quot;Grapes&quot; is grouped with &quot;grapes&quot;. The default value is true.</li>\r\n<li><code>IgnoreSpace</code> : A logical (true/false) value that allows combining of text parts in order to find groups. For example, when true, &quot;Gra pes&quot; is grouped with &quot;Grapes&quot;. The default value is true.</li>\r\n<li><code>SimilarityColumnName</code> : A name for the column that shows the similarity between an input value and the representative value for that input. The default value is null, in which case a new column for similarities will not be added.</li>\r\n<li><code>Threshold</code> : A number between 0.00 and 1.00 that specifies the similarity score at which two values will be grouped.\r\n    For example, &quot;Grapes&quot; and &quot;Graes&quot; (missing the &quot;p&quot;) are grouped together only if this option is set to less than 0.90.\r\n    A threshold of 1.00 only allows exact matches.\r\n    (Note that a fuzzy &quot;exact match&quot; might ignore differences like casing, word order, and punctuation.)\r\n    The default value is 0.80.</li>\r\n<li><code>TransformationTable</code> : A table that allows grouping records based on custom value mappings. It should contain &quot;From&quot; and &quot;To&quot; columns. For example, &quot;Grapes&quot; is grouped with &quot;Raisins&quot; if a transformation table is provided with the &quot;From&quot; column containing &quot;Grapes&quot; and the &quot;To&quot; column containing &quot;Raisins&quot;. Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, &quot;Grapes are sweet&quot; will also be grouped with &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnName"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AddJoinColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Performs a join between tables on supplied columns and produces the join result in a new column.",
      "longDescription": "Joins the rows of <code>table1</code> with the rows of <code>table2</code> based on the equality of the values of the key columns selected by <code>key1</code> (for <code>table1</code>) and <code>key2</code> (for <code>table2</code>). The results are entered into the column named <code>newColumnName</code>.\r\nThis function behaves similarly to Table.Join with a JoinKind of LeftOuter except that the join results are presented in a nested rather than flattened fashion.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table1",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table1"
      },
      {
        "name": "key1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key1"
      },
      {
        "name": "table2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table2"
      },
      {
        "name": "key2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key2"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AddKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a key to a table.",
      "longDescription": "Adds a key to <code>table</code>, where <code>columns</code> is the list of column names that define the key, and <code>isPrimary</code> specifies whether the key is primary.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      },
      {
        "name": "isPrimary",
        "type": "logical",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter isPrimary"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AddRankColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Appends a column with the ranking of one or more other columns.",
      "longDescription": "Appends a column named <code>newColumnName</code> to the <code>table</code> with the ranking of one or more other columns described by <code>comparisonCriteria</code>.\r\nThe RankKind option in <code>options</code> can be used by advanced users to pick a more-specific ranking method.",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AggregateTableColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Aggregates a column of tables into multiple columns in the containing table.",
      "longDescription": "Aggregates tables in <code>table</code>[<code>column</code>] into multiple columns containing aggregate values for the tables. <code>aggregations</code> is used to specify the columns containing the tables to aggregate, the aggregation functions to apply to the tables to generate their values, and the names of the aggregate columns to create.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      },
      {
        "name": "aggregations",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter aggregations"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.AlternateRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Keeps the initial offset then alternates taking and skipping the following rows.",
      "longDescription": "Keeps the initial offset then alternates taking and skipping the following rows.\r\n    <ul>\r\n       <li><code>table</code>: The input table.</li>\r\n       <li><code>offset</code>: The number of rows to keep before starting iterations.</li>\r\n       <li><code>skip</code>: The number of rows to remove in each iteration.</li>\r\n       <li><code>take</code>: The number of rows to keep in each iteration.</li>\r\n    </ul>\r\n    ",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "skip",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter skip"
      },
      {
        "name": "take",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter take"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.CombineColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Combines the specified columns into a new column using the specified combiner function.",
      "longDescription": "Combines the specified columns into a new column using the specified combiner function.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "sourceColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter sourceColumns"
      },
      {
        "name": "combiner",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter combiner"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.CombineColumnsToRecord",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Combines the specified columns into a new record-valued column where each record has field names and values corresponding to the column names and values of the columns that were combined.",
      "longDescription": "Combines the specified columns of <code>table</code> into a new record-valued column named <code>newColumnName</code> where each record has field names and values corresponding to the column names and values of the columns that were combined. If a record is specified for <code>options</code>, the following options may be provided:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: When specified as text, indicates that the given column name should be treated as the display name of the record. This need not be one of the columns in the record itself.</li>\r\n     <li> <code>TypeName</code>: When specified as text, supplies a logical type name for the resulting record which can be used during data load to drive behavior by the loading environment.</li>\r\n    </ul>\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "sourceColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter sourceColumns"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.DuplicateColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Duplicates a column with the specified name. Values and type are copied from the source column.",
      "longDescription": "Duplicate the column named <code>columnName</code> to the table <code>table</code>. The values and type for the column <code>newColumnName</code> are copied from coulmn <code>columnName</code>.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnName"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "columnType",
        "type": "type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columnType"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ExpandRecordColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Expands a column of records into columns with each of the values.",
      "longDescription": "Given the <code>column</code> of records in the input <code>table</code>, creates a table with a column for each field in the record. Optionally, <code>newColumnNames</code> may be specified to ensure unique names for the columns in the new table.\r\n    <ul>\r\n        <li><code>table</code>: The original table with the record column to expand. </li>\r\n        <li><code>column</code>: The column to expand.</li>\r\n        <li><code>fieldNames</code>: The list of fields to expand into columns in the table.</li>\r\n        <li><code>newColumnNames</code>: The list of column names to give the new columns. The new column names cannot duplicate any column in the new table.</li>\r\n    </ul>",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      },
      {
        "name": "fieldNames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter fieldNames"
      },
      {
        "name": "newColumnNames",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter newColumnNames"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ExpandTableColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Expands a column of records or a column of tables into multiple columns in the containing table.",
      "longDescription": "Expands tables in <code>table</code>[<code>column</code>] into multiple rows and columns. <code>columnNames</code> is used to select the columns to expand from the inner table. Specify <code>newColumnNames</code> to avoid conflicts between existing columns and new columns.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      },
      {
        "name": "columnNames",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnNames"
      },
      {
        "name": "newColumnNames",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter newColumnNames"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FuzzyGroup",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Groups rows in the table based on fuzzy matching of keys.",
      "longDescription": "Groups the rows of <code>table</code> by fuzzily matching values in the specified column, <code>key</code>, for each row.\r\n    For each group, a record is constructed containing the key columns (and their values) along with any aggregated columns specified by <code>aggregatedColumns</code>.\r\n    This function cannot guarantee to return a fixed order of rows.\r\n    <p>An optional set of <code>options</code> may be included to specify how to compare the key columns. Options include:\r\n    <ul>\r\n<li><code>Culture</code> : Allows grouping records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of &quot;ja-JP&quot; groups records based on the Japanese culture. The default value is &quot;&quot;, which groups based on the Invariant English culture.</li>\r\n<li><code>IgnoreCase</code> : A logical (true/false) value that allows case-insensitive key grouping. For example, when true, &quot;Grapes&quot; is grouped with &quot;grapes&quot;. The default value is true.</li>\r\n<li><code>IgnoreSpace</code> : A logical (true/false) value that allows combining of text parts in order to find groups. For example, when true, &quot;Gra pes&quot; is grouped with &quot;Grapes&quot;. The default value is true.</li>\r\n<li><code>SimilarityColumnName</code> : A name for the column that shows the similarity between an input value and the representative value for that input. The default value is null, in which case a new column for similarities will not be added.</li>\r\n<li><code>Threshold</code> : A number between 0.00 and 1.00 that specifies the similarity score at which two values will be grouped.\r\n    For example, &quot;Grapes&quot; and &quot;Graes&quot; (missing the &quot;p&quot;) are grouped together only if this option is set to less than 0.90.\r\n    A threshold of 1.00 only allows exact matches.\r\n    (Note that a fuzzy &quot;exact match&quot; might ignore differences like casing, word order, and punctuation.)\r\n    The default value is 0.80.</li>\r\n<li><code>TransformationTable</code> : A table that allows grouping records based on custom value mappings. It should contain &quot;From&quot; and &quot;To&quot; columns. For example, &quot;Grapes&quot; is grouped with &quot;Raisins&quot; if a transformation table is provided with the &quot;From&quot; column containing &quot;Grapes&quot; and the &quot;To&quot; column containing &quot;Raisins&quot;. Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, &quot;Grapes are sweet&quot; will also be grouped with &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "key",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key"
      },
      {
        "name": "aggregatedColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter aggregatedColumns"
      },
      {
        "name": "options",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter options"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FuzzyJoin",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Joins the rows from the two tables that fuzzy match based on the given keys.",
      "longDescription": "<p>Joins the rows of <code>table1</code> with the rows of <code>table2</code> based on a fuzzy matching of the values of the key columns selected by <code>key1</code> (for <code>table1</code>) and <code>key2</code> (for <code>table2</code>).</p>\r\n<p>Fuzzy matching is a comparison based on similarity of text rather than equality of text.</p>\r\n<p>By default, an inner join is performed, however an optional <code>joinKind</code> may be included to specify the type of join. Options include:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n<li><code>JoinKind.LeftSemi</code></li>\n<li><code>JoinKind.RightSemi</code></li>\n</ul>\r\n\r\n</p>\r\n<p>An optional set of <code>joinOptions</code> may be included to specify how to compare the key columns. Options include:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : A number between 1 and 8 that specifies the number of parallel threads to use for fuzzy matching. The default value is 1.</li>\r\n<li><code>Culture</code> : Allows matching records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of &quot;ja-JP&quot; matches records based on the Japanese culture. The default value is &quot;&quot;, which matches based on the Invariant English culture.</li>\r\n<li><code>IgnoreCase</code> : A logical (true/false) value that allows case-insensitive key matching. For example, when true, &quot;Grapes&quot; is matched with &quot;grapes&quot;. The default value is true.</li>\r\n<li><code>IgnoreSpace</code> : A logical (true/false) value that allows combining of text parts in order to find matches. For example, when true, &quot;Gra pes&quot; is matched with &quot;Grapes&quot;. The default value is true.</li>\r\n<li><code>NumberOfMatches</code> : A whole number that specifies the maximum number of matching rows that can be returned for every input row. For example, a value of 1 will return at most one matching row for each input row. If this option is not provided, all matching rows are returned.</li>\r\n<li><code>SimilarityColumnName</code> : A name for the column that shows the similarity between an input value and the representative value for that input. The default value is null, in which case a new column for similarities will not be added.</li>\r\n<li><code>Threshold</code> : A number between 0.00 and 1.00 that specifies the similarity score at which two values will be matched.\r\n    For example, &quot;Grapes&quot; and &quot;Graes&quot; (missing the &quot;p&quot;) are matched only if this option is set to less than 0.90.\r\n    A threshold of 1.00 only allows exact matches.\r\n    (Note that a fuzzy &quot;exact match&quot; might ignore differences like casing, word order, and punctuation.)\r\n    The default value is 0.80.</li>\r\n<li><code>TransformationTable</code> : A table that allows matching records based on custom value mappings. It should contain &quot;From&quot; and &quot;To&quot; columns. For example, &quot;Grapes&quot; is matched with &quot;Raisins&quot; if a transformation table is provided with the &quot;From&quot; column containing &quot;Grapes&quot; and the &quot;To&quot; column containing &quot;Raisins&quot;. Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, &quot;Grapes are sweet&quot; will also be matched with &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table1",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table1"
      },
      {
        "name": "key1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key1"
      },
      {
        "name": "table2",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table2"
      },
      {
        "name": "key2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key2"
      },
      {
        "name": "joinKind",
        "type": "JoinKind.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinKind"
      },
      {
        "name": "joinOptions",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinOptions"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.FuzzyNestedJoin",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Performs a fuzzy join between tables on supplied columns and produces the join result in a new column.",
      "longDescription": "<p>Joins the rows of <code>table1</code> with the rows of <code>table2</code> based on a fuzzy matching of the values of the key columns selected by <code>key1</code> (for <code>table1</code>) and <code>key2</code> (for <code>table2</code>). The results are returned in a new column named <code>newColumnName</code>.</p>\r\n<p>Fuzzy matching is a comparison based on similarity of text rather than equality of text.</p>\r\n<p>The optional <code>joinKind</code> specifies the kind of join to perform. By default, a left outer join is performed if a <code>joinKind</code> is not specified. Options include:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n<li><code>JoinKind.LeftSemi</code></li>\n<li><code>JoinKind.RightSemi</code></li>\n</ul>\r\n\r\n</p>\r\n<p>An optional set of <code>joinOptions</code> may be included to specify how to compare the key columns. Options include:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : A number between 1 and 8 that specifies the number of parallel threads to use for fuzzy matching. The default value is 1.</li>\r\n<li><code>Culture</code> : Allows matching records based on culture-specific rules. It can be any valid culture name. For example, a Culture option of &quot;ja-JP&quot; matches records based on the Japanese culture. The default value is &quot;&quot;, which matches based on the Invariant English culture.</li>\r\n<li><code>IgnoreCase</code> : A logical (true/false) value that allows case-insensitive key matching. For example, when true, &quot;Grapes&quot; is matched with &quot;grapes&quot;. The default value is true.</li>\r\n<li><code>IgnoreSpace</code> : A logical (true/false) value that allows combining of text parts in order to find matches. For example, when true, &quot;Gra pes&quot; is matched with &quot;Grapes&quot;. The default value is true.</li>\r\n<li><code>NumberOfMatches</code> : A whole number that specifies the maximum number of matching rows that can be returned for every input row. For example, a value of 1 will return at most one matching row for each input row. If this option is not provided, all matching rows are returned.</li>\r\n<li><code>SimilarityColumnName</code> : A name for the column that shows the similarity between an input value and the representative value for that input. The default value is null, in which case a new column for similarities will not be added.</li>\r\n<li><code>Threshold</code> : A number between 0.00 and 1.00 that specifies the similarity score at which two values will be matched.\r\n    For example, &quot;Grapes&quot; and &quot;Graes&quot; (missing the &quot;p&quot;) are matched only if this option is set to less than 0.90.\r\n    A threshold of 1.00 only allows exact matches.\r\n    (Note that a fuzzy &quot;exact match&quot; might ignore differences like casing, word order, and punctuation.)\r\n    The default value is 0.80.</li>\r\n<li><code>TransformationTable</code> : A table that allows matching records based on custom value mappings. It should contain &quot;From&quot; and &quot;To&quot; columns. For example, &quot;Grapes&quot; is matched with &quot;Raisins&quot; if a transformation table is provided with the &quot;From&quot; column containing &quot;Grapes&quot; and the &quot;To&quot; column containing &quot;Raisins&quot;. Note that the transformation will be applied to all occurrences of the text in the transformation table. With the above transformation table, &quot;Grapes are sweet&quot; will also be matched with &quot;Raisins are sweet&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table1",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table1"
      },
      {
        "name": "key1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key1"
      },
      {
        "name": "table2",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table2"
      },
      {
        "name": "key2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key2"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "joinKind",
        "type": "JoinKind.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinKind"
      },
      {
        "name": "joinOptions",
        "type": "record",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinOptions"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Group",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Groups rows in the table that have the same key.",
      "longDescription": "Groups the rows of <code>table</code> by the key columns defined by <code>key</code>. The <code>key</code> can either be a single column name, or a list of column names.\r\n    For each group, a record is constructed containing the key columns (and their values), along with any aggregated columns specified by <code>aggregatedColumns</code>.\r\n    Optionally, <code>groupKind</code> and <code>comparer</code> may also be specified.<br>\r\n    <br>\r\n    If the data is already sorted by the key columns, then a <code>groupKind</code> of GroupKind.Local can be provided. This may improve the performance of grouping in certain cases,\r\n    since all the rows with a given set of key values are assumed to be contiguous.<br>\r\n    <br>\r\n    When passing a <code>comparer</code>, note that if it treats differing keys as equal, a row may be placed in a group whose keys differ from its own.<br>\r\n    <br>\r\n    This function does not guarantee the ordering of the rows it returns.\r\n  ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "key",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key"
      },
      {
        "name": "aggregatedColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter aggregatedColumns"
      },
      {
        "name": "groupKind",
        "type": "GroupKind.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter groupKind"
      },
      {
        "name": "comparer",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter comparer"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.InsertRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Inserts a list of rows into the table at the specified position.",
      "longDescription": "Returns a table with the list of rows, <code>rows</code>, inserted into the <code>table</code> at the given position, <code>offset</code>. Each column in the row to insert must match the column types of the table.",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Join",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Joins the rows from the two tables that match based on the given keys.",
      "longDescription": "<p>Joins the rows of <code>table1</code> with the rows of <code>table2</code> based on the equality of the values of the key columns selected by <code>key1</code> (for <code>table1</code>) and <code>key2</code> (for <code>table2</code>).</p>\r\n<p>By default, an inner join is performed, however an optional <code>joinKind</code> may be included to specify the type of join. Options include:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n<li><code>JoinKind.LeftSemi</code></li>\n<li><code>JoinKind.RightSemi</code></li>\n</ul>\r\n\r\n</p>\r\n<p>An optional set of <code>keyEqualityComparers</code> may be included to specify how to compare the key columns. This parameter is currently intended for internal use only.</p>",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table1",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table1"
      },
      {
        "name": "key1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key1"
      },
      {
        "name": "table2",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table2"
      },
      {
        "name": "key2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key2"
      },
      {
        "name": "joinKind",
        "type": "JoinKind.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinKind"
      },
      {
        "name": "joinAlgorithm",
        "type": "JoinAlgorithm.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinAlgorithm"
      },
      {
        "name": "keyEqualityComparers",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter keyEqualityComparers"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.MaxN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the largest row(s) using the given criteria.",
      "longDescription": "Returns the largest row(s) in the <code>table</code>, given the <code>comparisonCriteria</code>.\r\n    After the rows are sorted, the <code>countOrCondition</code> parameter must be specified to further filter the result. Note the sorting algorithm cannot guarantee a fixed sorted result. The <code>countOrCondition</code> parameter can take multiple forms:\r\n    <ul>\r\n        <li> If a number is specified, a list of up to <code>countOrCondition</code> items in ascending order is returned. </li>\r\n        <li> If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. </li>\r\n </ul>",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.MinN",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns the smallest row(s) using the given criteria.",
      "longDescription": "Returns the smallest row(s) in the <code>table</code>, given the <code>comparisonCriteria</code>. After the rows are sorted, the <code>countOrCondition</code> parameter must be specified to further filter the result. Note the sorting algorithm cannot guarantee a fixed sorted result. The <code>countOrCondition</code> parameter can take multiple forms:\r\n    <ul>\r\n        <li> If a number is specified, a list of up to <code>countOrCondition</code> items in ascending order is returned. </li>\r\n        <li> If a condition is specified, a list of items that initially meet the condition is returned. Once an item fails the condition, no further items are considered. </li>\r\n </ul>",
      "category": "Table.Ordering"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "comparisonCriteria",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter comparisonCriteria"
      },
      {
        "name": "countOrCondition",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter countOrCondition"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.NestedJoin",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Performs a join between tables on supplied columns and produces the join result in a new column.",
      "longDescription": "<p>Joins the rows of <code>table1</code> with the rows of <code>table2</code> based on the equality of the values of the key columns selected by <code>key1</code> (for <code>table1</code>) and <code>key2</code> (for <code>table2</code>). The results are entered into the column named <code>newColumnName</code>.</p>\r\n<p>The optional <code>joinKind</code> specifies the kind of join to perform. By default, a left outer join is performed if a <code>joinKind</code> is not specified.</p>\r\n<p>An optional set of <code>keyEqualityComparers</code> may be included to specify how to compare the key columns. This feature is currently intended for internal use only.</p>  ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table1",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table1"
      },
      {
        "name": "key1",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key1"
      },
      {
        "name": "table2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table2"
      },
      {
        "name": "key2",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter key2"
      },
      {
        "name": "newColumnName",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newColumnName"
      },
      {
        "name": "joinKind",
        "type": "JoinKind.Type",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter joinKind"
      },
      {
        "name": "keyEqualityComparers",
        "type": "list",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter keyEqualityComparers"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Partition",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Partitions the table into a list of tables based on the number of groups and column specified.",
      "longDescription": "Partitions the <code>table</code> into a list of <code>groups</code> number of tables, based on the value of the <code>column</code> and a <code>hash</code> function.\r\n    The <code>hash</code> function is applied to the value of the <code>column</code> row to obtain a hash value for the row. The hash value modulo <code>groups</code> determines in which of the returned tables the row will be placed.\r\n    <ul>\r\n       <li><code>table</code>: The table to partition.</li>\r\n       <li><code>column</code>: The column to hash to determine which returned table the row is in.</li>\r\n       <li><code>groups</code>: The number of tables the input table will be partitioned into.</li>\r\n       <li><code>hash</code>: The function applied to obtain a hash value.</li>\r\n    </ul>\r\n  ",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "column",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter column"
      },
      {
        "name": "groups",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter groups"
      },
      {
        "name": "hash",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter hash"
      }
    ],
    "returnType": "list"
  },
  {
    "name": "Table.Pivot",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.",
      "longDescription": "Given a pair of columns representing attribute-value pairs, rotates the data in the attribute column into a column headings.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "pivotValues",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pivotValues"
      },
      {
        "name": "attributeColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attributeColumn"
      },
      {
        "name": "valueColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter valueColumn"
      },
      {
        "name": "aggregationFunction",
        "type": "function",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter aggregationFunction"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceRows",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces the specified range of rows with the provided row(s).",
      "longDescription": "Replaces a specified number of rows, <code>count</code>, in the input <code>table</code> with the specified <code>rows</code>, beginning after the <code>offset</code>. The <code>rows</code> parameter is a list of records.\r\n    <ul>\r\n       <li><code>table</code>: The table where the replacement is performed.</li>\r\n       <li><code>offset</code>: The number of rows to skip before making the replacement.</li>\r\n       <li><code>count</code>: The number of rows to replace.</li>\r\n       <li><code>rows</code>: The list of row records to insert into the <code>table</code> at the location specified by the <code>offset</code>.</li>\r\n    </ul>\r\n",
      "category": "Table.Row operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "rows",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter rows"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.ReplaceValue",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces one value with another in the specified columns.",
      "longDescription": "Replaces <code>oldValue</code> with <code>newValue</code> in the specified columns of the <code>table</code>.",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "oldValue",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter oldValue"
      },
      {
        "name": "newValue",
        "type": "any",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newValue"
      },
      {
        "name": "replacer",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter replacer"
      },
      {
        "name": "columnsToSearch",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columnsToSearch"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.SplitColumn",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Splits the specified column into a set of additional columns using the specified splitter function.",
      "longDescription": "Splits the specified column into a set of additional columns using the specified splitter function.\r\n    <ul>\r\n      <li><code>table</code>: The table containing the column to split.</li>\r\n      <li><code>sourceColumn</code>: The name of the column to split.</li>\r\n      <li><code>splitter</code>: The splitter function used to split the column (for example, <code>Splitter.SplitTextByDelimiter</code> or <code>Splitter.SplitTextByPosition</code>).</li>\r\n      <li><code>columnNamesOrNumber</code>: Either a list of new column names to create, or the number of new columns.</li>\r\n      <li><code>default</code>: Overrides the value used when there aren't enough split values to fill all of the new columns. The default for this parameter is <code>null</code>.</li>\r\n      <li><code>extraColumns</code>: Specifies what to do if there might be more split values than the number of new columns. You can pass an <code>ExtraValues.Type</code> enumeration value to this parameter. The default is <code>ExtraValues.Ignore</code>.\r\n    </ul>\r\n    ",
      "category": "Table.Transformation"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "sourceColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter sourceColumn"
      },
      {
        "name": "splitter",
        "type": "function",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter splitter"
      },
      {
        "name": "columnNamesOrNumber",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter columnNamesOrNumber"
      },
      {
        "name": "default",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter default"
      },
      {
        "name": "extraColumns",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter extraColumns"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.Unpivot",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates a set of columns in a table into attribute-value pairs.",
      "longDescription": "Translates a set of columns in a table into attribute-value pairs, combined with the rest of the values in each row.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "pivotColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pivotColumns"
      },
      {
        "name": "attributeColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attributeColumn"
      },
      {
        "name": "valueColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter valueColumn"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Table.UnpivotOtherColumns",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Translates all columns other than a specified set into attribute-value pairs.",
      "longDescription": "Translates all columns other than a specified set into attribute-value pairs, combined with the rest of the values in each row.",
      "category": "Table.Column operations"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "table",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "pivotColumns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter pivotColumns"
      },
      {
        "name": "attributeColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter attributeColumn"
      },
      {
        "name": "valueColumn",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter valueColumn"
      }
    ],
    "returnType": "table"
  },
  {
    "name": "Text.BetweenDelimiters",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Text.BetweenDelimiters",
      "longDescription": "Returns the portion of <code>text</code> between the specified <code>startDelimiter</code> and <code>endDelimiter</code>.\r\n    An optional numeric <code>startIndex</code> indicates which occurrence of the <code>startDelimiter</code> should be considered.\r\n    An optional list <code>startIndex</code> indicates which occurrence of the <code>startDelimiter</code> should be considered, as well as whether indexing should be done from the start or end of the input.\r\n    The <code>endIndex</code> is similar, except that indexing is done relative to the <code>startIndex</code>.",
      "category": "Text.Transformations"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "startDelimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter startDelimiter"
      },
      {
        "name": "endDelimiter",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter endDelimiter"
      },
      {
        "name": "startIndex",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter startIndex"
      },
      {
        "name": "endIndex",
        "type": "any",
        "isRequired": false,
        "isNullable": true,
        "description": "Parameter endIndex"
      }
    ],
    "returnType": "any"
  },
  {
    "name": "Text.Insert",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Inserts one text value into another at a given position.",
      "longDescription": "Returns the result of inserting text value <code>newText</code> into the text value <code>text</code> at position <code>offset</code>. Positions start at number 0.",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "newText",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newText"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.NewGuid",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Returns a new, random globally unique identifier (GUID).",
      "longDescription": "Returns a new, random globally unique identifier (GUID).",
      "category": "Text.Conversions from and to text"
    },
    "functionParameters": [],
    "returnType": "text"
  },
  {
    "name": "Text.Replace",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Replaces all occurrences of the given substring in the text.",
      "longDescription": "Returns the result of replacing all occurrences of text value <code>old</code> in text value <code>text</code> with text value <code>new</code>. This function is case sensitive.",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "old",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter old"
      },
      {
        "name": "new",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter new"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Text.ReplaceRange",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Removes a range of characters and inserts a new value at a specified position.",
      "longDescription": "Returns the result of removing a number of characters, <code>count</code>, from text value <code>text</code> beginning at position <code>offset</code> and then inserting the text value <code>newText</code> at the same position in <code>text</code>.",
      "category": "Text.Modification"
    },
    "functionParameters": [
      {
        "name": "text",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter text"
      },
      {
        "name": "offset",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter offset"
      },
      {
        "name": "count",
        "type": "number",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter count"
      },
      {
        "name": "newText",
        "type": "text",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter newText"
      }
    ],
    "returnType": "text"
  },
  {
    "name": "Type.AddTableKey",
    "type": "function",
    "isDataSource": false,
    "documentation": {
      "description": "Adds a key to the given table type.",
      "longDescription": "Adds a key to the given table type.",
      "category": "Type"
    },
    "functionParameters": [
      {
        "name": "table",
        "type": "type",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter table"
      },
      {
        "name": "columns",
        "type": "list",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter columns"
      },
      {
        "name": "isPrimary",
        "type": "logical",
        "isRequired": true,
        "isNullable": false,
        "description": "Parameter isPrimary"
      }
    ],
    "returnType": "type"
  },
  {
    "name": "AccessControlEntry.ConditionContextType",
    "type": "type",
    "baseType": "AccessControlEntry",
    "documentation": {
      "description": "The authorization context against which an access control entry (ACE) condition is evaluated.",
      "longDescription": "The authorization context against which an access control entry (ACE) condition is evaluated.",
      "category": "Accessing data"
    },
    "allowedValues": null
  },
  {
    "name": "AccessControlEntry.Type",
    "type": "type",
    "baseType": "AccessControlEntry",
    "documentation": {
      "description": "A table of access control entries (ACEs).",
      "longDescription": "An ordered table of access control entries (ACEs) representing authorization rules. Each row is evaluated against the current authorization context (in order) and the first row for which the <code>Condition</code> expression returns true determines which rule applies. The <code>Action</code> column represents the kind of action to which the rule applies. The <code>AccessControlKind</code> column determines whether access should be allowed or denied for the action.",
      "category": "Accessing data"
    },
    "allowedValues": null
  },
  {
    "name": "AccessControlKind.Type",
    "type": "type",
    "baseType": "AccessControlKind",
    "documentation": {
      "description": "Specifies the kind of access control.",
      "longDescription": "Specifies the kind of access control.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "Any.Type",
    "type": "type",
    "baseType": "Any",
    "documentation": {
      "description": "The type that represents all values.",
      "longDescription": "The type that represents all values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Binary.Type",
    "type": "type",
    "baseType": "Binary",
    "documentation": {
      "description": "The type that represents all binary values.",
      "longDescription": "The type that represents all binary values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "BinaryEncoding.Type",
    "type": "type",
    "baseType": "BinaryEncoding",
    "documentation": {
      "description": "Specifies the type of binary encoding.",
      "longDescription": "Specifies the type of binary encoding.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "BinaryOccurrence.Type",
    "type": "type",
    "baseType": "BinaryOccurrence",
    "documentation": {
      "description": "Specifies how many times the item is expected to appear in the group.",
      "longDescription": "Specifies how many times the item is expected to appear in the group.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2
    ]
  },
  {
    "name": "BufferMode.Type",
    "type": "type",
    "baseType": "BufferMode",
    "documentation": {
      "description": "Describes the type of buffering to be performed.",
      "longDescription": "Describes the type of buffering to be performed.",
      "category": null
    },
    "allowedValues": [
      1,
      2
    ]
  },
  {
    "name": "Byte.Type",
    "type": "type",
    "baseType": "Byte",
    "documentation": {
      "description": "The type that represents all bytes.",
      "longDescription": "The type that represents all bytes.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "ByteOrder.Type",
    "type": "type",
    "baseType": "ByteOrder",
    "documentation": {
      "description": "Specifies the byte order.",
      "longDescription": "Specifies the byte order.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "Certificate.Type",
    "type": "type",
    "baseType": "Certificate",
    "documentation": {
      "description": "The type that represents a pkcs8 Certificate Text.",
      "longDescription": "The type that represents a pkcs8 Certificate Text.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Character.Type",
    "type": "type",
    "baseType": "Character",
    "documentation": {
      "description": "The type that represents all characters.",
      "longDescription": "The type that represents all characters.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Compression.Type",
    "type": "type",
    "baseType": "Compression",
    "documentation": {
      "description": "Specifies the type of compression.",
      "longDescription": "Specifies the type of compression.",
      "category": null
    },
    "allowedValues": [
      -1,
      0,
      1,
      2,
      3,
      4,
      5
    ]
  },
  {
    "name": "CsvStyle.Type",
    "type": "type",
    "baseType": "CsvStyle",
    "documentation": {
      "description": "Specifies the significance of quotes in Csv documents.",
      "longDescription": "Specifies the significance of quotes in Csv documents.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "Currency.Type",
    "type": "type",
    "baseType": "Currency",
    "documentation": {
      "description": "The type that represents currency value.",
      "longDescription": "The type that represents currency value.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Date.Type",
    "type": "type",
    "baseType": "Date",
    "documentation": {
      "description": "The type that represents all date values.",
      "longDescription": "The type that represents all date values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "DateTime.Type",
    "type": "type",
    "baseType": "DateTime",
    "documentation": {
      "description": "The type that represents all date and time values without an associated timezone.",
      "longDescription": "The type that represents all date and time values without an associated timezone.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "DateTimeZone.Type",
    "type": "type",
    "baseType": "DateTimeZone",
    "documentation": {
      "description": "The type that represents all date and time values relative to a timezone.",
      "longDescription": "The type that represents all date and time values relative to a timezone.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Day.Type",
    "type": "type",
    "baseType": "Day",
    "documentation": {
      "description": "Specifies a day of week.",
      "longDescription": "Specifies a day of week.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4,
      5,
      6
    ]
  },
  {
    "name": "Decimal.Type",
    "type": "type",
    "baseType": "Decimal",
    "documentation": {
      "description": "The type that represents fixed-point decimal number.",
      "longDescription": "The type that represents fixed-point decimal number.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Double.Type",
    "type": "type",
    "baseType": "Double",
    "documentation": {
      "description": "The type that represents double precision floating point number.",
      "longDescription": "The type that represents double precision floating point number.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Duration.Type",
    "type": "type",
    "baseType": "Duration",
    "documentation": {
      "description": "The type that represents all duration values",
      "longDescription": "The type that represents all duration values",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "ExtraValues.Type",
    "type": "type",
    "baseType": "ExtraValues",
    "documentation": {
      "description": "Specifies the expected action for extra values in a row that contains columns more than expected.",
      "longDescription": "Specifies the expected action for extra values in a row that contains columns more than expected.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2
    ]
  },
  {
    "name": "Function.Type",
    "type": "type",
    "baseType": "Function",
    "documentation": {
      "description": "The type that represents all functions.",
      "longDescription": "The type that represents all functions.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "GroupKind.Type",
    "type": "type",
    "baseType": "GroupKind",
    "documentation": {
      "description": "Specifies the kind of grouping.",
      "longDescription": "Multiple local groups may be produced with the same key value but only a single global group is produced for a given key value.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "Guid.Type",
    "type": "type",
    "baseType": "Guid",
    "documentation": {
      "description": "The type that represents a Guid value.",
      "longDescription": "The type that represents a Guid value.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Identity.Type",
    "type": "type",
    "baseType": "Identity",
    "documentation": {
      "description": "An identity represents a user, group, device, or other identifiable thing.",
      "longDescription": "An identity represents a user, group, device, or other identifiable thing.",
      "category": "Accessing data"
    },
    "allowedValues": null
  },
  {
    "name": "IdentityProvider.Type",
    "type": "type",
    "baseType": "IdentityProvider",
    "documentation": {
      "description": "Defines a scope in which identities are created and compared.",
      "longDescription": "Defines a scope in which identities are created and compared.",
      "category": "Accessing data"
    },
    "allowedValues": null
  },
  {
    "name": "Int16.Type",
    "type": "type",
    "baseType": "Int16",
    "documentation": {
      "description": "The type that represents signed 16 bit integer.",
      "longDescription": "The type that represents signed 16 bit integer.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Int32.Type",
    "type": "type",
    "baseType": "Int32",
    "documentation": {
      "description": "The type that represents signed 32 bit integer.",
      "longDescription": "The type that represents signed 32 bit integer.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Int64.Type",
    "type": "type",
    "baseType": "Int64",
    "documentation": {
      "description": "The type that represents signed 64 bit integer.",
      "longDescription": "The type that represents signed 64 bit integer.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Int8.Type",
    "type": "type",
    "baseType": "Int8",
    "documentation": {
      "description": "The type that represents signed 8 bit integer.",
      "longDescription": "The type that represents signed 8 bit integer.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "JoinAlgorithm.Type",
    "type": "type",
    "baseType": "JoinAlgorithm",
    "documentation": {
      "description": "Specifies the join algorithm to be used in the join operation.",
      "longDescription": "Specifies the join algorithm to be used in the join operation.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4,
      5,
      6
    ]
  },
  {
    "name": "JoinKind.Type",
    "type": "type",
    "baseType": "JoinKind",
    "documentation": {
      "description": "Specifies the kind of join operation.",
      "longDescription": "Specifies the kind of join operation.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7
    ]
  },
  {
    "name": "JoinSide.Type",
    "type": "type",
    "baseType": "JoinSide",
    "documentation": {
      "description": "Specifies the left or right table of a join.",
      "longDescription": "Specifies the left or right table of a join.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "LimitClauseKind.Type",
    "type": "type",
    "baseType": "LimitClauseKind",
    "documentation": {
      "description": "Describes the type of limit clause supported by the SQL dialect used by this data source.",
      "longDescription": "Describes the type of limit clause supported by the SQL dialect used by this data source.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "name": "List.Type",
    "type": "type",
    "baseType": "List",
    "documentation": {
      "description": "The type that represents all lists.",
      "longDescription": "The type that represents all lists.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Logical.Type",
    "type": "type",
    "baseType": "Logical",
    "documentation": {
      "description": "The type that represents all logical values.",
      "longDescription": "The type that represents all logical values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "MissingField.Type",
    "type": "type",
    "baseType": "MissingField",
    "documentation": {
      "description": "Specifies the expected action for missing values in a row that contains columns less than expected.",
      "longDescription": "Specifies the expected action for missing values in a row that contains columns less than expected.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2
    ]
  },
  {
    "name": "None.Type",
    "type": "type",
    "baseType": "None",
    "documentation": {
      "description": "None.Type",
      "longDescription": "None.Type",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Null.Type",
    "type": "type",
    "baseType": "Null",
    "documentation": {
      "description": "The type that represents null.",
      "longDescription": "The type that represents null.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Number.Type",
    "type": "type",
    "baseType": "Number",
    "documentation": {
      "description": "The type that represents all numbers.",
      "longDescription": "The type that represents all numbers.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "ODataOmitValues.Type",
    "type": "type",
    "baseType": "ODataOmitValues",
    "documentation": {
      "description": "Specifies the kinds of values an OData service can omit.",
      "longDescription": "Specifies the kinds of values an OData service can omit.",
      "category": null
    },
    "allowedValues": []
  },
  {
    "name": "Occurrence.Type",
    "type": "type",
    "baseType": "Occurrence",
    "documentation": {
      "description": "Specifies the occurrence of an element in a sequence.",
      "longDescription": "Specifies the occurrence of an element in a sequence.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2
    ]
  },
  {
    "name": "Order.Type",
    "type": "type",
    "baseType": "Order",
    "documentation": {
      "description": "Specifies the direction of sorting.",
      "longDescription": "Specifies the direction of sorting.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "Password.Type",
    "type": "type",
    "baseType": "Password",
    "documentation": {
      "description": "The type that represents a text password.",
      "longDescription": "The type that represents a text password.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Percentage.Type",
    "type": "type",
    "baseType": "Percentage",
    "documentation": {
      "description": "The type that represents percentage value.",
      "longDescription": "The type that represents percentage value.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "PercentileMode.Type",
    "type": "type",
    "baseType": "PercentileMode",
    "documentation": {
      "description": "Specifies the percentile mode type.",
      "longDescription": "Specifies the percentile mode type.",
      "category": null
    },
    "allowedValues": [
      1,
      2,
      3,
      4
    ]
  },
  {
    "name": "Precision.Type",
    "type": "type",
    "baseType": "Precision",
    "documentation": {
      "description": "Specifies the precision of comparison.",
      "longDescription": "Specifies the precision of comparison.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "QuoteStyle.Type",
    "type": "type",
    "baseType": "QuoteStyle",
    "documentation": {
      "description": "Specifies the quote style.",
      "longDescription": "Specifies the quote style.",
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "RankKind.Type",
    "type": "type",
    "baseType": "RankKind",
    "documentation": {
      "description": "Specifies the type of ranking.",
      "longDescription": "Specifies the type of ranking.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2
    ]
  },
  {
    "name": "Record.Type",
    "type": "type",
    "baseType": "Record",
    "documentation": {
      "description": "The type that represents all records.",
      "longDescription": "The type that represents all records.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "RelativePosition.Type",
    "type": "type",
    "baseType": "RelativePosition",
    "documentation": {
      "description": "Indicates whether indexing should be done from the start or end of the input.",
      "longDescription": null,
      "category": null
    },
    "allowedValues": [
      0,
      1
    ]
  },
  {
    "name": "RoundingMode.Type",
    "type": "type",
    "baseType": "RoundingMode",
    "documentation": {
      "description": "Specifies rounding direction when there is a tie between the possible numbers to round to.",
      "longDescription": "Specifies rounding direction when there is a tie between the possible numbers to round to.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "name": "SapBusinessWarehouseExecutionMode.Type",
    "type": "type",
    "baseType": "SapBusinessWarehouseExecutionMode",
    "documentation": {
      "description": "Valid options for SAP Business Warehouse execution mode option.",
      "longDescription": "Valid options for SAP Business Warehouse execution mode option.",
      "category": null
    },
    "allowedValues": [
      64,
      65,
      66
    ]
  },
  {
    "name": "SapHanaDistribution.Type",
    "type": "type",
    "baseType": "SapHanaDistribution",
    "documentation": {
      "description": "Valid options for SAP HANA distribution option.",
      "longDescription": "Valid options for SAP HANA distribution option.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3
    ]
  },
  {
    "name": "SapHanaRangeOperator.Type",
    "type": "type",
    "baseType": "SapHanaRangeOperator",
    "documentation": {
      "description": "A range operator for SAP HANA range input parameters.",
      "longDescription": "A range operator for SAP HANA range input parameters.",
      "category": null
    },
    "allowedValues": [
      0,
      1,
      2,
      3,
      4,
      5,
      6
    ]
  },
  {
    "name": "Single.Type",
    "type": "type",
    "baseType": "Single",
    "documentation": {
      "description": "The type that represents single precision floating point number.",
      "longDescription": "The type that represents single precision floating point number.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Table.Type",
    "type": "type",
    "baseType": "Table",
    "documentation": {
      "description": "The type that represents all tables.",
      "longDescription": "The type that represents all tables.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Text.Type",
    "type": "type",
    "baseType": "Text",
    "documentation": {
      "description": "The type that represents all text values.",
      "longDescription": "The type that represents all text values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "TextEncoding.Type",
    "type": "type",
    "baseType": "TextEncoding",
    "documentation": {
      "description": "Specifies the text encoding type.",
      "longDescription": "Specifies the text encoding type.",
      "category": null
    },
    "allowedValues": [
      1200,
      1200,
      1201,
      1252,
      20127,
      65001
    ]
  },
  {
    "name": "Time.Type",
    "type": "type",
    "baseType": "Time",
    "documentation": {
      "description": "The type that represents all time values.",
      "longDescription": "The type that represents all time values.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "TraceLevel.Type",
    "type": "type",
    "baseType": "TraceLevel",
    "documentation": {
      "description": "Specifies the trace level.",
      "longDescription": "Specifies the trace level.",
      "category": null
    },
    "allowedValues": [
      1,
      2,
      4,
      8,
      16
    ]
  },
  {
    "name": "Type.Type",
    "type": "type",
    "baseType": "Type",
    "documentation": {
      "description": "The type that represents all types.",
      "longDescription": "The type that represents all types.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "Uri.Type",
    "type": "type",
    "baseType": "Uri",
    "documentation": {
      "description": "The type that represents a text URI.",
      "longDescription": "The type that represents a text URI.",
      "category": ""
    },
    "allowedValues": null
  },
  {
    "name": "WebMethod.Type",
    "type": "type",
    "baseType": "WebMethod",
    "documentation": {
      "description": "Specifies an HTTP method.",
      "longDescription": "Specifies an HTTP method.",
      "category": null
    },
    "allowedValues": []
  },
  {
    "name": "Occurrence",
    "type": "enum",
    "options": [
      {
        "name": "All",
        "fullName": "Occurrence.All",
        "value": "2"
      },
      {
        "name": "First",
        "fullName": "Occurrence.First",
        "value": "0"
      },
      {
        "name": "Last",
        "fullName": "Occurrence.Last",
        "value": "1"
      },
      {
        "name": "Optional",
        "fullName": "Occurrence.Optional",
        "value": "0"
      },
      {
        "name": "Required",
        "fullName": "Occurrence.Required",
        "value": "1"
      },
      {
        "name": "Repeating",
        "fullName": "Occurrence.Repeating",
        "value": "2"
      }
    ]
  },
  {
    "name": "LimitClauseKind",
    "type": "enum",
    "options": [
      {
        "name": "None",
        "fullName": "LimitClauseKind.None",
        "value": "0"
      },
      {
        "name": "Top",
        "fullName": "LimitClauseKind.Top",
        "value": "1"
      },
      {
        "name": "Limit",
        "fullName": "LimitClauseKind.Limit",
        "value": "3"
      },
      {
        "name": "LimitOffset",
        "fullName": "LimitClauseKind.LimitOffset",
        "value": "2"
      },
      {
        "name": "AnsiSql2008",
        "fullName": "LimitClauseKind.AnsiSql2008",
        "value": "4"
      }
    ]
  },
  {
    "name": "Precision",
    "type": "enum",
    "options": [
      {
        "name": "Double",
        "fullName": "Precision.Double",
        "value": "0"
      },
      {
        "name": "Decimal",
        "fullName": "Precision.Decimal",
        "value": "1"
      }
    ]
  },
  {
    "name": "GroupKind",
    "type": "enum",
    "options": [
      {
        "name": "Global",
        "fullName": "GroupKind.Global",
        "value": "1"
      },
      {
        "name": "Local",
        "fullName": "GroupKind.Local",
        "value": "0"
      }
    ]
  },
  {
    "name": "JoinKind",
    "type": "enum",
    "options": [
      {
        "name": "Inner",
        "fullName": "JoinKind.Inner",
        "value": "0"
      },
      {
        "name": "LeftOuter",
        "fullName": "JoinKind.LeftOuter",
        "value": "1"
      },
      {
        "name": "RightOuter",
        "fullName": "JoinKind.RightOuter",
        "value": "2"
      },
      {
        "name": "FullOuter",
        "fullName": "JoinKind.FullOuter",
        "value": "3"
      },
      {
        "name": "LeftAnti",
        "fullName": "JoinKind.LeftAnti",
        "value": "4"
      },
      {
        "name": "RightAnti",
        "fullName": "JoinKind.RightAnti",
        "value": "5"
      },
      {
        "name": "LeftSemi",
        "fullName": "JoinKind.LeftSemi",
        "value": "6"
      },
      {
        "name": "RightSemi",
        "fullName": "JoinKind.RightSemi",
        "value": "7"
      }
    ]
  },
  {
    "name": "Compression",
    "type": "enum",
    "options": [
      {
        "name": "None",
        "fullName": "Compression.None",
        "value": "-1"
      },
      {
        "name": "GZip",
        "fullName": "Compression.GZip",
        "value": "0"
      },
      {
        "name": "Deflate",
        "fullName": "Compression.Deflate",
        "value": "1"
      },
      {
        "name": "Snappy",
        "fullName": "Compression.Snappy",
        "value": "2"
      },
      {
        "name": "Brotli",
        "fullName": "Compression.Brotli",
        "value": "3"
      },
      {
        "name": "LZ4",
        "fullName": "Compression.LZ4",
        "value": "4"
      },
      {
        "name": "Zstandard",
        "fullName": "Compression.Zstandard",
        "value": "5"
      }
    ]
  },
  {
    "name": "CsvStyle",
    "type": "enum",
    "options": [
      {
        "name": "QuoteAlways",
        "fullName": "CsvStyle.QuoteAlways",
        "value": "1"
      },
      {
        "name": "QuoteAfterDelimiter",
        "fullName": "CsvStyle.QuoteAfterDelimiter",
        "value": "0"
      }
    ]
  },
  {
    "name": "TextEncoding",
    "type": "enum",
    "options": [
      {
        "name": "Utf8",
        "fullName": "TextEncoding.Utf8",
        "value": "65001"
      },
      {
        "name": "Utf16",
        "fullName": "TextEncoding.Utf16",
        "value": "1200"
      },
      {
        "name": "Ascii",
        "fullName": "TextEncoding.Ascii",
        "value": "20127"
      },
      {
        "name": "Unicode",
        "fullName": "TextEncoding.Unicode",
        "value": "1200"
      },
      {
        "name": "BigEndianUnicode",
        "fullName": "TextEncoding.BigEndianUnicode",
        "value": "1201"
      },
      {
        "name": "Windows",
        "fullName": "TextEncoding.Windows",
        "value": "1252"
      }
    ]
  },
  {
    "name": "BufferMode",
    "type": "enum",
    "options": [
      {
        "name": "Eager",
        "fullName": "BufferMode.Eager",
        "value": "1"
      },
      {
        "name": "Delayed",
        "fullName": "BufferMode.Delayed",
        "value": "2"
      }
    ]
  },
  {
    "name": "QuoteStyle",
    "type": "enum",
    "options": [
      {
        "name": "None",
        "fullName": "QuoteStyle.None",
        "value": "0"
      },
      {
        "name": "Csv",
        "fullName": "QuoteStyle.Csv",
        "value": "1"
      }
    ]
  },
  {
    "name": "PercentileMode",
    "type": "enum",
    "options": [
      {
        "name": "ExcelInc",
        "fullName": "PercentileMode.ExcelInc",
        "value": "1"
      },
      {
        "name": "ExcelExc",
        "fullName": "PercentileMode.ExcelExc",
        "value": "2"
      },
      {
        "name": "SqlDisc",
        "fullName": "PercentileMode.SqlDisc",
        "value": "3"
      },
      {
        "name": "SqlCont",
        "fullName": "PercentileMode.SqlCont",
        "value": "4"
      }
    ]
  },
  {
    "name": "Number",
    "type": "enum",
    "options": [
      {
        "name": "E",
        "fullName": "Number.E",
        "value": "3"
      },
      {
        "name": "PI",
        "fullName": "Number.PI",
        "value": "3"
      },
      {
        "name": "Epsilon",
        "fullName": "Number.Epsilon",
        "value": "0"
      }
    ]
  },
  {
    "name": "BinaryOccurrence",
    "type": "enum",
    "options": [
      {
        "name": "Optional",
        "fullName": "BinaryOccurrence.Optional",
        "value": "0"
      },
      {
        "name": "Required",
        "fullName": "BinaryOccurrence.Required",
        "value": "1"
      },
      {
        "name": "Repeating",
        "fullName": "BinaryOccurrence.Repeating",
        "value": "2"
      }
    ]
  },
  {
    "name": "types",
    "type": "enum",
    "options": []
  },
  {
    "name": "RelativePosition",
    "type": "enum",
    "options": [
      {
        "name": "FromStart",
        "fullName": "RelativePosition.FromStart",
        "value": "0"
      },
      {
        "name": "FromEnd",
        "fullName": "RelativePosition.FromEnd",
        "value": "1"
      }
    ]
  },
  {
    "name": "RoundingMode",
    "type": "enum",
    "options": [
      {
        "name": "Up",
        "fullName": "RoundingMode.Up",
        "value": "0"
      },
      {
        "name": "Down",
        "fullName": "RoundingMode.Down",
        "value": "1"
      },
      {
        "name": "AwayFromZero",
        "fullName": "RoundingMode.AwayFromZero",
        "value": "2"
      },
      {
        "name": "TowardZero",
        "fullName": "RoundingMode.TowardZero",
        "value": "3"
      },
      {
        "name": "ToEven",
        "fullName": "RoundingMode.ToEven",
        "value": "4"
      }
    ]
  },
  {
    "name": "Order",
    "type": "enum",
    "options": [
      {
        "name": "Ascending",
        "fullName": "Order.Ascending",
        "value": "0"
      },
      {
        "name": "Descending",
        "fullName": "Order.Descending",
        "value": "1"
      }
    ]
  },
  {
    "name": "SapHanaRangeOperator",
    "type": "enum",
    "options": [
      {
        "name": "GreaterThan",
        "fullName": "SapHanaRangeOperator.GreaterThan",
        "value": "0"
      },
      {
        "name": "LessThan",
        "fullName": "SapHanaRangeOperator.LessThan",
        "value": "1"
      },
      {
        "name": "GreaterThanOrEquals",
        "fullName": "SapHanaRangeOperator.GreaterThanOrEquals",
        "value": "2"
      },
      {
        "name": "LessThanOrEquals",
        "fullName": "SapHanaRangeOperator.LessThanOrEquals",
        "value": "3"
      },
      {
        "name": "Equals",
        "fullName": "SapHanaRangeOperator.Equals",
        "value": "4"
      },
      {
        "name": "NotEquals",
        "fullName": "SapHanaRangeOperator.NotEquals",
        "value": "5"
      }
    ]
  },
  {
    "name": "ByteOrder",
    "type": "enum",
    "options": [
      {
        "name": "LittleEndian",
        "fullName": "ByteOrder.LittleEndian",
        "value": "0"
      },
      {
        "name": "BigEndian",
        "fullName": "ByteOrder.BigEndian",
        "value": "1"
      }
    ]
  },
  {
    "name": "SapBusinessWarehouseExecutionMode",
    "type": "enum",
    "options": [
      {
        "name": "DataStream",
        "fullName": "SapBusinessWarehouseExecutionMode.DataStream",
        "value": "66"
      },
      {
        "name": "BasXml",
        "fullName": "SapBusinessWarehouseExecutionMode.BasXml",
        "value": "64"
      },
      {
        "name": "BasXmlGzip",
        "fullName": "SapBusinessWarehouseExecutionMode.BasXmlGzip",
        "value": "65"
      }
    ]
  },
  {
    "name": "JoinAlgorithm",
    "type": "enum",
    "options": [
      {
        "name": "Dynamic",
        "fullName": "JoinAlgorithm.Dynamic",
        "value": "0"
      },
      {
        "name": "PairwiseHash",
        "fullName": "JoinAlgorithm.PairwiseHash",
        "value": "1"
      },
      {
        "name": "SortMerge",
        "fullName": "JoinAlgorithm.SortMerge",
        "value": "2"
      },
      {
        "name": "LeftHash",
        "fullName": "JoinAlgorithm.LeftHash",
        "value": "3"
      },
      {
        "name": "RightHash",
        "fullName": "JoinAlgorithm.RightHash",
        "value": "4"
      },
      {
        "name": "LeftIndex",
        "fullName": "JoinAlgorithm.LeftIndex",
        "value": "5"
      },
      {
        "name": "RightIndex",
        "fullName": "JoinAlgorithm.RightIndex",
        "value": "6"
      }
    ]
  },
  {
    "name": "Day",
    "type": "enum",
    "options": [
      {
        "name": "Sunday",
        "fullName": "Day.Sunday",
        "value": "0"
      },
      {
        "name": "Monday",
        "fullName": "Day.Monday",
        "value": "1"
      },
      {
        "name": "Tuesday",
        "fullName": "Day.Tuesday",
        "value": "2"
      },
      {
        "name": "Wednesday",
        "fullName": "Day.Wednesday",
        "value": "3"
      },
      {
        "name": "Thursday",
        "fullName": "Day.Thursday",
        "value": "4"
      },
      {
        "name": "Friday",
        "fullName": "Day.Friday",
        "value": "5"
      },
      {
        "name": "Saturday",
        "fullName": "Day.Saturday",
        "value": "6"
      }
    ]
  },
  {
    "name": "TraceLevel",
    "type": "enum",
    "options": [
      {
        "name": "Critical",
        "fullName": "TraceLevel.Critical",
        "value": "1"
      },
      {
        "name": "Error",
        "fullName": "TraceLevel.Error",
        "value": "2"
      },
      {
        "name": "Warning",
        "fullName": "TraceLevel.Warning",
        "value": "4"
      },
      {
        "name": "Information",
        "fullName": "TraceLevel.Information",
        "value": "8"
      },
      {
        "name": "Verbose",
        "fullName": "TraceLevel.Verbose",
        "value": "16"
      }
    ]
  },
  {
    "name": "BinaryEncoding",
    "type": "enum",
    "options": [
      {
        "name": "Hex",
        "fullName": "BinaryEncoding.Hex",
        "value": "1"
      },
      {
        "name": "Base64",
        "fullName": "BinaryEncoding.Base64",
        "value": "0"
      }
    ]
  },
  {
    "name": "SapHanaDistribution",
    "type": "enum",
    "options": [
      {
        "name": "Off",
        "fullName": "SapHanaDistribution.Off",
        "value": "0"
      },
      {
        "name": "Connection",
        "fullName": "SapHanaDistribution.Connection",
        "value": "1"
      },
      {
        "name": "Statement",
        "fullName": "SapHanaDistribution.Statement",
        "value": "2"
      },
      {
        "name": "All",
        "fullName": "SapHanaDistribution.All",
        "value": "3"
      }
    ]
  },
  {
    "name": "ExtraValues",
    "type": "enum",
    "options": [
      {
        "name": "List",
        "fullName": "ExtraValues.List",
        "value": "0"
      },
      {
        "name": "Ignore",
        "fullName": "ExtraValues.Ignore",
        "value": "2"
      },
      {
        "name": "Error",
        "fullName": "ExtraValues.Error",
        "value": "1"
      }
    ]
  },
  {
    "name": "JoinSide",
    "type": "enum",
    "options": [
      {
        "name": "Left",
        "fullName": "JoinSide.Left",
        "value": "0"
      },
      {
        "name": "Right",
        "fullName": "JoinSide.Right",
        "value": "1"
      }
    ]
  },
  {
    "name": "MissingField",
    "type": "enum",
    "options": [
      {
        "name": "Error",
        "fullName": "MissingField.Error",
        "value": "0"
      },
      {
        "name": "Ignore",
        "fullName": "MissingField.Ignore",
        "value": "1"
      },
      {
        "name": "UseNull",
        "fullName": "MissingField.UseNull",
        "value": "2"
      }
    ]
  },
  {
    "name": "AccessControlKind",
    "type": "enum",
    "options": [
      {
        "name": "Allow",
        "fullName": "AccessControlKind.Allow",
        "value": "1"
      },
      {
        "name": "Deny",
        "fullName": "AccessControlKind.Deny",
        "value": "0"
      }
    ]
  },
  {
    "name": "functions",
    "type": "enum",
    "options": []
  },
  {
    "name": "RankKind",
    "type": "enum",
    "options": [
      {
        "name": "Competition",
        "fullName": "RankKind.Competition",
        "value": "0"
      },
      {
        "name": "Dense",
        "fullName": "RankKind.Dense",
        "value": "1"
      },
      {
        "name": "Ordinal",
        "fullName": "RankKind.Ordinal",
        "value": "2"
      }
    ]
  }
]
